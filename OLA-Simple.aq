{"config":{"title":"My Workflow","description":"A workflow that does x, y and z","copyright":"My Organization","version":"0.0.1","authors":[{"name":"Justin Vrana","affiliation":"University of Washington"}],"maintainer":{"name":"Justin Vrana","email":"justin.vrana@gmail.com"},"acknowledgements":[{"name":"First Last","affiliation":"A Place"}],"github":{"user":"jvrana","repo":"OLA-Simple","organization":"klavinslab"},"keywords":null,"aquadoc_version":"1.0.2","aquarium_version":"\u003c%= Bioturk::Application.config.aquarium_version %\u003e"},"components":[{"library":{"name":"OLAConstants","category":"OLASimple","code_source":"needs \"OLASimple/OLAKits\"\n\nmodule OLAConstants\n  include OLAKits\n\n  ##########################################\n  # DATA ASSOCIATION KEYS (DO NOT CHANGE)\n  ##########################################\n  #\n  ALIAS_KEY = :alias\n  KIT_KEY = :kit\n  UNIT_KEY = :unit\n  COMPONENT_KEY = :component\n  SAMPLE_KEY = :sample\n  SCANNED_IMAGE_UPLOAD_KEY = :scanned_image_upload\n  SCANNED_IMAGE_UPLOAD_ID_KEY = :scanned_image_upload_id\n\n  ##########################################\n  # KIT SELECTION\n  ##########################################\n\n  KIT_SELECTION = OLAKits.uw_kit()\n  KIT_NAME = KIT_SELECTION[\"name\"]\n  SAMPLE_PREP_UNIT = KIT_SELECTION[\"sample prep\"]\n  PCR_UNIT = KIT_SELECTION[\"pcr\"]\n  LIGATION_UNIT = KIT_SELECTION[\"ligation\"]\n  DETECTION_UNIT = KIT_SELECTION[\"detection\"]\n  ANALYSIS_UNIT = KIT_SELECTION[\"analysis\"]\n  COLORS = ANALYSIS_UNIT[\"Mutation Colors\"]\n\n  ##########################################\n  # LAB SPECIFICATIONS\n  ##########################################\n  SAVE_SAMPLES = false\n  SUPERVISOR = \"Nuttada P. or Cami C.\"\n\n  ##########################################\n  # KIT SPECIFICATIONS\n  ##########################################\n\n  # mutations\n  MUTATIONKEY = :mutations\n\n  # kit components\n  DILUENT_A = \"Diluent A\" # what to call the Diluent A tube (i.e. water)\n  STOP_MIX = \"stop mix\" # what to call the input samples (cell lysates)\n  GOLD_MIX = \"gold mix\"\n  STRIP = \"detection strip\"\n  STRIPS = STRIP.pluralize(10)\n  BAND = \"band\"\n  BANDS = \"bands\"\n  PANEL = \"panel\"\n  AQUARIUM = \"Aquarium\"\n\n  ##########################################\n  # CODONS\n  ##########################################\n\n  pcr_pkg_color = \"STEELBLUE\"\n  lig_pkg_color = \"PALETURQUOISE\"\n  det_pkg_color = \"MEDIUMPURPLE\"\n  SAMPLE_PREP_PKG_NAME = \"sample prep package\"\n  PCR_PKG_NAME = \"PCR package\"\n  LIG_PKG_NAME = \"ligation package\"\n  DET_PKG_NAME = \"detection package\"\n\n  # names of sample field value and validate kit field types\n  SAMPLE_PREP_FIELD_VALUE = \"Sample Prep Pack\"\n  PCR_FIELD_VALUE = \"PCR Pack\"\n  LIGATION_FIELD_VALUE = \"Ligation Pack\"\n  DETECTION_FIELD_VALUE = \"Detection Pack\"\n  KIT_FIELD_VALUE = \"Kit\"\n  CODONS_FIELD_VALUE = \"Codons\"\n  CODON_COLORS_FIELD_VALUE = \"Codon Colors\"\n  NUM_SAMPLES_FIELD_VALUE = \"Number of Samples\"\n  NUM_SUB_PACKAGES_FIELD_VALUE = \"Number of Sub Packages\"\n  UNIT_NAME_FIELD_VALUE = \"Unit Name\"\n  COMPONENTS_FIELD_VALUE = \"Components\"\n\n  ##########################################\n  # TERMINOLOGY\n  ##########################################\n\n  # kit samples\n  CELL_LYSATE = \"cell lysate\" # what to call the input samples (cell lysates)\n  PCR_SAMPLE = \"PCR sample\" # what to call the tubes for the PCR protocol\n  LIGATION_SAMPLE = \"ligation sample\"\n\n  # equipment\n  THERMOCYCLER = \"thermocycler\" # what to call the thermocycler\n  CENTRIFUGE = \"centrifuge\"\n  PCR_RACK = \"PCR rack\" # what to call the racks the PCR tubes go in\n  PHOTOCOPIER = \"scanner\"\n  BASIC_MATERIALS = [\n      \"200uL pipette and filtered tips\",\n      \"20uL pipette and filtered tips\",\n      \"a spray bottle of 10% v/v bleach\",\n      \"a spray bottle of 70% v/v ethanol\",\n      \"a timer\",\n      \"latex gloves\"\n  ]\n  TRASH = \"trash\"\n  WASTE = \"biohazard waste (red bag)\" # what to call the biohazard waste\n  BENCH = \"bench\"\n  PACKAGE = \"package\"\n  FRIDGE = \"fridge\"\n  P20 = \"P20\"\n  P200 = \"P200\"\n  P1000 = \"P1000\"\n  WIPE = \"KimWipe\"\n\n  # verbs\n  CENTRIFUGE_VERB = \"centrifuge\" # or spin?\n\n  # areas\n  PRE_PCR = \"pre-PCR\"\n  POST_PCR = \"post-PCR\"\n\n  PCR_CYCLE = \"OSPCR\"\n  LIG_CYCLE = \"OSLIG\"\n  STOP_CYCLE = \"OSSTOP\"\n\n  def map_temporary_from_input(input, outputs, keys)\n    outputs = [outputs].flatten\n    keys = [keys].flatten\n    operations.each do |op|\n      input_item = op.input(input).item\n      outputs.each do |out|\n        keys.each do |k|\n          op.output(out).item.associate LOT, input_item.get(k)\n        end\n      end\n    end\n  end\n\n  def explicit_retrieve\n    operations.retrieve interactive: false\n\n    show do\n      title \"Retrieve the following items:\"\n\n      t = Table.new\n      input_items = operations.map {|op| op.inputs.map {|i| i.item}}.flatten\n      t.add_column(\"ID\", input_items.map {|i| i.id})\n      t.add_column(\"Type\", input_items.map {|i| i.object_type.name})\n      t.add_column(\"Location\", input_items.map {|i| i.location})\n      table t\n    end\n  end\nend\n"}},{"library":{"name":"OLAGraphics","category":"OLASimple","code_source":"# require_relative 'graphics'\nneeds \"OLASimple/SVGGraphics\"\n\nmodule OLAGraphics\n  include Graphics\n  include Graphics::MyGraphics\n\n  @@colors = [\"red\", \"yellow\", \"green\", \"blue\", \"purple\"]\n\n  def self.set_tube_colors(new_colors)\n    @@colrs = new_colors\n  end\n\n\n  #####################################\n  # BASICS\n  #####################################\n\n  def get_style\n    \u003c\u003cEOF\n      /* \u003c![CDATA[ */\n      \n      #svg .yellow path {\n          fill: #f7f9c2;\n      }\n      \n      #svg .white rect {\n          fill: #ffffff;\n      }\n      \n      #svg .blue path {\n          fill: #bdf8f9;\n      }\n      \n      #svg .red path {\n          fill: #ffc4c4;\n      }\n      \n      #svg .green path {\n          fill: #c4f9c2;\n      }\n      \n      #svg .purple path {\n          fill: #f1e0fc;\n      }\n\n      #svg .hidden {\n        opacity: 0.3;\n      }\n\n      #svg .yellowstrip rect {\n          fill: #f7f9c2;\n      }\n      \n      #svg .bluestrip rect {\n          fill: #bdf8f9;\n      }\n      \n      #svg .whitestrip rect {\n          fill: #ffffff;\n      }\n      \n      #svg .redstrip rect {\n          fill: #ffc4c4;\n      }\n      \n      #svg .greenstrip rect {\n          fill: #c4f9c2;\n      }\n      \n      #svg .purplestrip rect {\n          fill: #f1e0fc;\n      }\n\n      #svg .redfluid path {\n        fill: #ff7c66;\n      }\n      \n      #svg .brownfluid path {\n        fill: #8B4513;\n      }\n\n      #svg .pinkfluid path {\n        fill: #ff8eec;\n      }\n      \n      #svg .palefluid path {\n          fill: #F2F5D1;\n      }\n      /* ]]\u003e */\nEOF\n  end\n\n  def display_svg(element, scale = 1)\n    element.style!(self.get_style)\n    element.svg(element.boundx, element.boundy, scale).to_str\n  end\n\n  # two labels on top of each other\n  def two_labels(text1, text2)\n    label1 = label(text1, \"font-size\".to_sym =\u003e 25)\n    label2 = label(text2, \"font-size\".to_sym =\u003e 25)\n    label2.align!('center-top')\n    label2.align_with(label1, 'center-bottom')\n    label2.translate!(0, 12)\n    SVGElement.new(children: [label1, label2], boundx: label1.boundx, boundy: label1.boundy * 2)\n  end\n\n  # make a tube label\n  def tube_label(kit, unit, component, sample)\n    self.two_labels(\"#{kit}#{unit}\", \"#{component}#{sample}\")\n  end\n\n  def make_arrow(from, to, tlabel = nil, blabel = nil, tfontsize = 25, bfontsize = 25)\n    # make right arrow\n    top_label = label(tlabel, \"font-size\".to_sym =\u003e tfontsize)\n    bottom_label = label(blabel, \"font-size\".to_sym =\u003e bfontsize)\n    arrow = rarrow.scale(0.75)\n    arrow.align!('center-right')\n    arrow.align_with(to, 'center-left')\n    v1 = from.get_abs_anchor('center-right') - from.abs_anchor_vector\n    v2 = to.get_abs_anchor('center-left') - to.abs_anchor_vector\n    m = (v1 + v2) / 2.0\n    line = Line.new(*v1, *v2, 'black', 3)\n    unless top_label.nil?\n      top_label.translate!(*m)\n      top_label.align!('center-bottom').translate!(0, -10)\n    end\n    unless bottom_label.nil?\n      bottom_label.translate!(*m)\n      puts bottom_label\n      bottom_label.align!('center-top').translate!(0, 10)\n    end\n    myarrow = SVGElement.new(children: [line, arrow, bottom_label, top_label].compact)\n  end\n\n  def make_transfer(from, to, spacing, top_label, bottom_label)\n    to.align_with(from, 'center-right').align!('center-left')\n    to.translate!(spacing)\n    arrow = make_arrow(from, to, top_label, bottom_label)\n    elements = [arrow, from, to]\n    puts elements.map {|e| Vector[e.x, e.y] + e.get_abs_anchor('center-right')}\n    max_x = elements.map {|e| (Vector[e.x, e.y] + e.get_abs_anchor('center-right'))[0]}.max\n    max_y = elements.map {|e| (Vector[e.x, e.y] + e.get_abs_anchor('center-bottom'))[1]}.max\n    svg = SVGElement.new(\n        children: elements,\n        boundx: 700,\n        boundy: 300,\n        )\n    svg.translate!(20)\n  end\n\n  def make_tube(tube, bottom_label, middle_label, fluid = nil, cropped_for_closed_tube = false, fluidclass: nil)\n    bottom_label = bottom_label.join(\"\\n\") if bottom_label.is_a?(Array)\n    middle_label = middle_label.join(\"\\n\") if middle_label.is_a?(Array)\n    img = SVGElement.new(boundx: tube.boundx, boundy: tube.boundy)\n    tube_group = tube\n    bottom_labels = bottom_label.split(\"\\n\")\n    middle_labels = middle_label.split(\"\\n\")\n\n    img.add_child(tube)\n    fluidImage = nil\n    if fluid == \"small\"\n      fluidImage = fluid_small\n    elsif fluid == \"medium\"\n      fluidImage = fluid_medium\n    elsif fluid == \"large\"\n      fluidImage = fluid_large\n    elsif fluid == \"powder\"\n      fluidImage = powder\n    end\n    puts fluid\n    fluidImage.new_class!(fluidclass) unless fluidImage.nil? or fluidclass.nil?\n    img.add_child(fluidImage) unless fluidImage.nil?\n    puts fluid\n    if bottom_label != \"\"\n      bl = nil\n      if bottom_labels.length == 2\n        bl = two_labels(*bottom_labels)\n      else\n        label = label(bottom_label, \"font-size\".to_sym =\u003e 25)\n        bl = label\n      end\n      bl.align!('center-top')\n      bl.align_with(tube, 'center-bottom')\n      bl.translate!(-5 * tube.xscale, 5 * tube.yscale)\n      tube.boundy = tube.boundy + bl.boundy\n      img.add_child(bl)\n    end\n\n    if middle_label != \"\"\n      ml = nil\n      if middle_labels.length == 2\n        ml = two_labels(*middle_labels)\n      else\n        ml = label(middle_label, \"font-size\".to_sym =\u003e 25)\n      end\n      ml.align!('center-center')\n      ml.align_with(tube, 'center-bottom')\n      ml.translate!(-9 * tube.xscale, -110 * tube.yscale)\n      img.add_child(ml)\n    end\n\n\n    img.boundx = tube.boundx\n    img.boundy = tube.boundy\n    if cropped_for_closed_tube\n      shift = 70\n      img.boundy = img.boundy - shift\n      img.group_children.translate!(0, -shift)\n    end\n    img.translate!(10)\n  end\n\n  #####################################\n  # LIGATIONS\n  #####################################\n\n  def display_ligation_tubes(kit, unit, components, sample, colors, open_tubes = nil, hide = nil, spacing = 70)\n    def stripwell(kit, unit, components, sample, open_tubes, apply_classes, hide, spacing)\n      open_tubes = open_tubes || []\n      hide = hide || []\n      apply_classes = apply_classes || []\n      num = components.length\n      grid = SVGGrid.new(num, 1, spacing, opentube.boundy)\n      grid.each_pos do |r, c|\n\n        # add label\n        tube_label = self.tube_label(kit, unit, components[r], sample)\n        tube_type = closedtube\n        if open_tubes.include?(r)\n          tube_type = opentube\n        end\n        tube = make_tube(tube_type,\n                         \"\",\n                         [\"#{kit}#{unit}\", \"#{components[r]}#{sample}\"],\n                         nil,\n                         false)\n        tube.new_class!(apply_classes[r])\n        if hide.include?(r)\n          tube = tube.g(classname: 'hidden')\n        end\n        grid.add(tube, r, c)\n      end\n      grid\n    end\n\n    mystripwell = stripwell(kit, unit, components, sample, open_tubes, colors, hide, spacing).scale!(0.75)\n    myimage = SVGElement.new(boundx: 500, boundy: 190)\n    myimage.add_child(mystripwell)\n  end\n\n  def highlight_ligation_tube(i, kit, unit, components, sample, colors)\n    ligation_tubes = self.display_ligation_tubes(\n        kit, unit, components, sample, colors, [i], (0..components.length - 1).to_a.reject {|x| x == i})\n    ligation_tubes\n  end\n\n  def transfer_to_ligation_tubes_with_highlight(from, i, kit, unit, components, sample, colors, vol, bottom_label = nil)\n    bottom_label = bottom_label || \"\"\n    ligation_tubes = self.highlight_ligation_tube(i, kit, unit, components, sample, colors)\n    ligation_tubes.align_with(from, 'center-right').align!('center-left')\n    ligation_label = label(\"ligation tubes\", \"font-size\".to_sym =\u003e 25)\n    # ligation_label.align_with(ligation_tubes, 'center-bottom').align!('center-top')\n    svg = self.make_transfer(from, ligation_tubes, 200, \"#{vol}uL\", bottom_label)\n    svg.translate!(20)\n    svg.boundy = svg.boundy - 20\n    svg.boundx = 700\n    svg.boundy = 295\n    svg\n  end\n\n  #####################################\n  # DETECTION\n  #####################################\n\n  def display_strip_panel(kit, unit, components, sample, colors)\n    def panel kit, unit, components, sample, apply_classes\n      apply_classes = apply_classes || []\n      num = components.length\n      strip = make_strip(nil, \"\")\n      grid = SVGGrid.new(num, 1, 90, strip.boundy)\n      grid.each_pos do |r, c|\n\n        # add label\n        strip_label = self.tube_label(kit, unit, components[r], sample).scale(0.8)\n        strip = make_strip(strip_label, apply_classes[r] + \"strip\")\n        grid.add(strip, r, c)\n      end\n      grid.scale!(0.75)\n    end\n    \n    mypanel = panel(kit, unit, components, sample, colors)\n    mypanel.boundx = 600\n    mypanel\n  end\n\n  def display_panel_and_tubes(kit, panel_unit, tube_unit, components, sample, colors)\n    tubes = display_ligation_tubes(kit, tube_unit, components, sample, colors)\n    panel = display_strip_panel(kit, panel_unit, components, sample, colors)\n    tubes.align_with(panel, 'center-bottom')\n    tubes.align!('center-top')\n    tubes.translate!(0, -50)\n    img = SVGElement.new(children: [tubes, panel], boundy: 330, boundx: panel.boundx)\n  end\n\n  def make_strip mylabel, classname\n    mystrip = SVGElement.new(boundx: 83.1, boundy: 247.45)\n    mystrip.add_child(self.strip)\n    mystrip.add_child(self.striplabel.new_class(classname))\n    # mylabel = label(\"Strip\", \"font-size\".to_sym=\u003e20)\n    unless mylabel.nil?\n      mylabel.align_with(mystrip, 'center-top')\n      mylabel.align!('center-center')\n      mylabel.translate!(0, 20)\n      mystrip.add_child(mylabel)\n    end\n    mystrip\n  end\n\n  def detection_strip_diagram\n    img = SVGElement.new(boundx: 270, boundy: 270)\n    img.add_child(\u003c\u003cEOF\n     \u003cg id=\"Strip\"\u003e\n\t\u003cg\u003e\n\t\t\u003crect x=\"4.75\" fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"78.346\" height=\"242.948\"/\u003e\n\t\t\u003cline fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"0\" y1=\"247.448\" x2=\"4.75\" y2=\"242.948\"/\u003e\n\t\t\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"-0.067,4.777 4.75,0.001 4.75,242.948 0,247.448 \t\t\"/\u003e\n\t\t\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"74.917,247.448 0,247.448 4.75,242.948 83.096,242.948 \n\t\t\t\t\t\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003crect x=\"19.583\" y=\"49.433\" fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"46.667\" height=\"80\"/\u003e\n\t\t\u003crect x=\"27.083\" y=\"57.433\" fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"31.667\" height=\"64\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"121.433\" x2=\"19.583\" y2=\"129.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"58.75\" y1=\"121.433\" x2=\"66.25\" y2=\"129.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"58.75\" y1=\"57.433\" x2=\"66.25\" y2=\"49.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"57.433\" x2=\"19.583\" y2=\"49.433\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M57.524,216.515c0,4.385-3.693,7.938-8.249,7.938H36.557\n\t\t\tc-4.556,0-8.249-3.554-8.249-7.938v-22.164c0-4.385,3.693-7.939,8.249-7.939h12.718c4.556,0,8.249,3.554,8.249,7.939V216.515z\"/\u003e\n\t\t\u003cpath fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M52.917,213.019c0,3.002-2.528,5.435-5.647,5.435h-8.706\n\t\t\tc-3.119,0-5.647-2.433-5.647-5.435v-15.172c0-3.001,2.528-5.435,5.647-5.435h8.706c3.119,0,5.647,2.433,5.647,5.435V213.019z\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"34.01\" y1=\"216.224\" x2=\"30.27\" y2=\"221.647\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"51.823\" y1=\"216.224\" x2=\"55.562\" y2=\"221.647\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"51.823\" y1=\"194.642\" x2=\"55.023\" y2=\"188.663\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"34.01\" y1=\"194.195\" x2=\"30.27\" y2=\"189.666\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"32.917\" y1=\"205.433\" x2=\"28.308\" y2=\"205.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"52.917\" y1=\"205.433\" x2=\"57.524\" y2=\"205.433\"/\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003cg id=\"StripLabel\"\u003e\n\t\u003crect x=\"4.75\" fill=\"#ED1C24\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"78.346\" height=\"46.433\"/\u003e\n\u003c/g\u003e\n\u003cpolygon fill=\"#BBC9E7\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"43.923,198.542 48.016,201.414 166.567,59.148 \n\t141.463,41.534 \"/\u003e\n\u003ctext transform=\"matrix(1 0 0 1 -60.75 216.2236)\" font-family=\"'MyriadPro-Regular'\" font-size=\"20\"\u003ePort\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 -87.2627 91.1001)\"\u003e\u003ctspan x=\"0\" y=\"0\" font-family=\"'MyriadPro-Regular'\" font-size=\"20\"\u003eReading\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"24\" font-family=\"'MyriadPro-Regular'\" font-size=\"20\"\u003eWindow\u003c/tspan\u003e\u003c/text\u003e\n\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"4\" stroke-miterlimit=\"10\" x1=\"-11.417\" y1=\"95.1\" x2=\"32.917\" y2=\"94.1\"/\u003e\n\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"4\" stroke-miterlimit=\"10\" x1=\"-17.417\" y1=\"209.401\" x2=\"26.917\" y2=\"208.401\"/\u003e\nEOF\n    )\n    img.translate!(100)\n    return img\n  end\n\n  def negative_selection_diagram\n    img = SVGElement.new(boundx: 600, boundy: 262)\n    img.add_child(\u003c\u003cEOF\n\u003cg id=\"SingleTubes_3_\"\u003e\n\t\u003cg id=\"ClosedLid_3_\"\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M363.205,46.889c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n\t\t\t\tC363.205,49.268,363.205,48.078,363.205,46.889z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M363.205,46.889c22.801,0,22.801,18.312,0,18.312\n\t\t\t\tc0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C363.205,49.268,363.205,48.078,363.205,46.889z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M317.727,67.92c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.1-0.535-2-1.188-2\n\t\t\t\tc-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.9-1.188,2\n\t\t\t\tV67.92z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M317.727,67.92c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n\t\t\t\tc0-1.1-0.535-2-1.188-2c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n\t\t\t\ts-1.188,0.9-1.188,2V67.92z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M308.352,48.026c-0.55-0.952-0.1-1.731,1-1.731h55.473c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121\n\t\t\t\tc0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731L308.352,48.026z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M308.352,48.026c-0.55-0.952-0.1-1.731,1-1.731h55.473\n\t\t\t\tc1.1,0,2.311,0.845,2.689,1.877l1.146,3.121c0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731\n\t\t\t\tL308.352,48.026z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"380.16\" y1=\"58.514\" x2=\"381.305\" y2=\"58.514\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg id=\"Tube_3_\"\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M312.102,65.873v45.309l14.998,90.066\n\t\t\tc0,4.35,5.037,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V65.873H312.102z\"/\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M369.35,61.873c0,2.199-1.799,4-4,4h-54c-2.199,0-4-1.801-4-4v-1.875c0-2.201,1.801-4,4-4h54\n\t\t\t\tc2.201,0,4,1.799,4,4V61.873z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M369.35,61.873c0,2.199-1.799,4-4,4h-54c-2.199,0-4-1.801-4-4\n\t\t\t\tv-1.875c0-2.201,1.801-4,4-4h54c2.201,0,4,1.799,4,4V61.873z\"/\u003e\n\t\t\u003c/g\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003cg id=\"SingleTubes_1_\"\u003e\n\t\u003cg id=\"ClosedLid_1_\"\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M175.96,48.821c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n\t\t\t\tC175.96,51.2,175.96,50.011,175.96,48.821z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M175.96,48.821c22.801,0,22.801,18.312,0,18.312\n\t\t\t\tc0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C175.96,51.2,175.96,50.011,175.96,48.821z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M130.481,69.853c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.1-0.535-2-1.188-2\n\t\t\t\tc-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.9-1.188,2\n\t\t\t\tV69.853z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M130.481,69.853c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n\t\t\t\tc0-1.1-0.535-2-1.188-2c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n\t\t\t\ts-1.188,0.9-1.188,2V69.853z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M121.106,49.959c-0.55-0.952-0.1-1.731,1-1.731h55.473c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121\n\t\t\t\tc0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731L121.106,49.959z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M121.106,49.959c-0.55-0.952-0.1-1.731,1-1.731h55.473\n\t\t\t\tc1.1,0,2.311,0.845,2.689,1.877l1.146,3.121c0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731\n\t\t\t\tL121.106,49.959z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"192.915\" y1=\"60.446\" x2=\"194.06\" y2=\"60.446\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg id=\"Tube_1_\"\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M124.856,67.806v45.309l14.998,90.066\n\t\t\tc0,4.35,5.037,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V67.806H124.856z\"/\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M182.104,63.806c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875c0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V63.806\n\t\t\t\tz\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M182.104,63.806c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875\n\t\t\t\tc0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V63.806z\"/\u003e\n\t\t\u003c/g\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003cg id=\"SingleTubes_2_\"\u003e\n\t\u003cg id=\"ClosedLid_2_\"\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M272.545,47.965c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n\t\t\t\tC272.545,50.344,272.545,49.154,272.545,47.965z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M272.545,47.965c22.801,0,22.801,18.312,0,18.312\n\t\t\t\tc0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C272.545,50.344,272.545,49.154,272.545,47.965z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M227.066,68.996c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.101-0.534-2-1.188-2\n\t\t\t\ts-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.899-1.188,2V68.996z\"\n\t\t\t\t/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M227.066,68.996c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n\t\t\t\tc0-1.101-0.534-2-1.188-2s-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n\t\t\t\ts-1.188,0.899-1.188,2V68.996z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M217.691,49.103c-0.55-0.953-0.1-1.732,1-1.732h55.473c1.1,0,2.311,0.845,2.69,1.877l1.146,3.121\n\t\t\t\tc0.38,1.032-0.21,1.877-1.31,1.877h-54.028c-1.1,0-2.45-0.779-3-1.732L217.691,49.103z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M217.691,49.103c-0.55-0.953-0.1-1.732,1-1.732h55.473\n\t\t\t\tc1.1,0,2.311,0.845,2.69,1.877l1.146,3.121c0.38,1.032-0.21,1.877-1.31,1.877h-54.028c-1.1,0-2.45-0.779-3-1.732L217.691,49.103z\n\t\t\t\t\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"289.5\" y1=\"59.59\" x2=\"290.645\" y2=\"59.59\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg id=\"Tube_2_\"\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M221.441,66.949v45.309l14.998,90.066\n\t\t\tc0,4.35,5.037,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V66.949H221.441z\"/\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M278.689,62.949c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875c0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V62.949\n\t\t\t\tz\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M278.689,62.949c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875\n\t\t\t\tc0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V62.949z\"/\u003e\n\t\t\u003c/g\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003cg id=\"SingleTubes_4_\"\u003e\n\t\u003cg id=\"ClosedLid_4_\"\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M459.754,47.131c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n\t\t\t\tC459.754,49.51,459.754,48.32,459.754,47.131z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M459.754,47.131c22.801,0,22.801,18.312,0,18.312\n\t\t\t\tc0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C459.754,49.51,459.754,48.32,459.754,47.131z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M414.275,68.162c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.1-0.535-2-1.188-2\n\t\t\t\tc-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.9-1.188,2\n\t\t\t\tV68.162z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M414.275,68.162c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n\t\t\t\tc0-1.1-0.535-2-1.188-2c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n\t\t\t\ts-1.188,0.9-1.188,2V68.162z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M404.9,48.269c-0.55-0.952-0.1-1.731,1-1.731h55.473c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121\n\t\t\t\tc0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731L404.9,48.269z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M404.9,48.269c-0.55-0.952-0.1-1.731,1-1.731h55.473\n\t\t\t\tc1.1,0,2.311,0.845,2.689,1.877l1.146,3.121c0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731\n\t\t\t\tL404.9,48.269z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"476.709\" y1=\"58.756\" x2=\"477.854\" y2=\"58.756\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg id=\"Tube_4_\"\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M408.65,66.115v45.309l14.998,90.066\n\t\t\tc0,4.35,5.037,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V66.115H408.65z\"/\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M465.898,62.115c0,2.199-1.799,4-4,4h-54c-2.199,0-4-1.801-4-4V60.24c0-2.201,1.801-4,4-4h54\n\t\t\t\tc2.201,0,4,1.799,4,4V62.115z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M465.898,62.115c0,2.199-1.799,4-4,4h-54c-2.199,0-4-1.801-4-4\n\t\t\t\tV60.24c0-2.201,1.801-4,4-4h54c2.201,0,4,1.799,4,4V62.115z\"/\u003e\n\t\t\u003c/g\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003crect x=\"180.021\" y=\"67.951\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003crect x=\"276.023\" y=\"68.36\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003crect x=\"366.934\" y=\"66.539\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M151.104,211.465c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tV92.904c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C139.854,207.939,144.891,211.465,151.104,211.465z\"/\u003e\n\t\u003cpath id=\"largegoop_1_\" fill=\"#BE1E2D\" d=\"M176.233,99.027c-0.539-0.592-1.101-1.156-1.7-1.677\n\t\tc-2.18-1.891-4.767-3.295-7.818-4.106c-3.108-0.959-5.194-0.299-6.55,1.576c-1.355,1.877-1.983,4.971-2.176,8.881\n\t\tc-0.043,4.081,0.029,8.187,0.148,12.31c-0.371,3.683-0.492,7.357-0.467,11.022c0.897,18.184,3.846,37.165-0.056,56.177\n\t\tc-0.8,1.744-1.673,3.365-2.61,4.925c-3.899,3.502-12.119,3.583-12.802,9.137c-1.465,7.144,6.075,12.614,13.855,11.348\n\t\tc1.231-0.126,2.429-0.324,3.597-0.573c0.996-1.113,1.578-2.408,1.578-3.796l15-85.266V99.027z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M338.349,210.596c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tV92.035c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C327.099,207.07,332.136,210.596,338.349,210.596z\"/\u003e\n\t\u003cpath id=\"smallgoop_1_\" fill=\"#BE1E2D\" d=\"M351.601,187.893c-0.48,0.29-0.853,0.667-1.167,1.104\n\t\tc-0.286,0.446-0.544,0.889-0.791,1.329c-0.345,0.425-0.624,0.832-0.864,1.229c-0.991,1.92-1.5,3.797-3.802,6.113\n\t\tc-0.326,0.24-0.664,0.473-1.014,0.702c-1.255,0.63-3.409,1.163-3.962,1.811c-0.864,0.87,0.737,0.984,2.856,0.351\n\t\tc2.816-0.787,5.354-1.938,7.215-3.107c0.564-0.939,0.878-1.972,0.878-3.055l1.118-6.713\n\t\tC351.903,187.729,351.745,187.806,351.601,187.893z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M247.69,210.199c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tV91.639c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C236.44,206.674,241.478,210.199,247.69,210.199z\"/\u003e\n\t\u003cpath id=\"mediumgoop_1_\" fill=\"#BE1E2D\" d=\"M265.456,155.475c-1.722-0.177-2.978,0.252-3.904,1.138s-1.526,2.229-1.938,3.884\n\t\tc-0.338,1.716-0.611,3.433-0.859,5.154c-0.497,1.573-0.849,3.123-1.115,4.659c-0.877,7.564-0.631,15.315-4.343,23.576\n\t\tc-0.596,0.789-1.225,1.533-1.886,2.255c-2.521,1.753-7.274,2.385-8.095,4.764c-1.395,3.104,2.541,4.853,7.132,3.756\n\t\tc3.25-0.642,6.229-1.791,8.848-3.264c0.022-0.203,0.044-0.406,0.044-0.613l7.516-45.127\n\t\tC266.412,155.575,265.951,155.51,265.456,155.475z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M434.899,209.771c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tV91.211c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C423.649,206.246,428.687,209.771,434.899,209.771z\"/\u003e\n\u003c/g\u003e\n\u003ctext transform=\"matrix(1 0 0 1 11.918 253.2422)\" font-family=\"'MyriadPro-Regular'\" font-size=\"25\"\u003eUnwanted Cells\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 12.8271 173.3662)\" font-family=\"'MyriadPro-Regular'\" font-size=\"25\"\u003eCD+ Cells\u003c/text\u003e\n\u003cg\u003e\n\t\u003cpolygon stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"158.353,205.239 150.153,202.41 156.704,194.296 \t\"/\u003e\n\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"3\" stroke-miterlimit=\"10\" x1=\"154.61\" y1=\"202.672\" x2=\"147.199\" y2=\"232.312\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpolygon stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"135.032,139.835 133.309,134.386 142.02,130.715 \t\"/\u003e\n\t\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"3\" stroke-miterlimit=\"10\" x1=\"135.147\" y1=\"136.361\" x2=\"110.832\" y2=\"156.343\"/\u003e\n\u003c/g\u003e\n\u003ctext transform=\"matrix(1 0 0 1 140.5879 38.501)\" font-family=\"'MyriadPro-Regular'\" font-size=\"41\"\u003e1\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 234.8652 36.8428)\" font-family=\"'MyriadPro-Regular'\" font-size=\"41\"\u003e2\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 326.0049 38.4541)\" font-family=\"'MyriadPro-Regular'\" font-size=\"41\"\u003e3\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 435.0049 38.4541)\" font-family=\"'MyriadPro-Regular'\" text-anchor=\"middle\" font-size=\"25\"\u003eCD4+/RBC\u003c/text\u003e\nEOF\n    )\n    img\n  end\nend"}},{"library":{"name":"OLAKits","category":"OLASimple","code_source":"module OLAKits\n  def self.kenya_kit\n    {\n        \"name\" =\u003e \"kenya kit\",\n        \"sample prep\" =\u003e {\n            \"Unit Name\" =\u003e \"A\",\n            \"Components\" =\u003e {\n                \"magnetic beads\" =\u003e \"A\",\n                \"antibodies\" =\u003e \"B\",\n                \"1X PBS 1\" =\u003e \"C\",\n                \"RBC lysis buffer\" =\u003e \"D\",\n                \"1X PBS 2\" =\u003e \"E\",\n                \"CD4 lysis buffer\" =\u003e \"F\",\n                \"sample tube 1\" =\u003e \"G\",\n                \"sample tube 2\" =\u003e \"H\",\n                \"sample tube 3\" =\u003e \"J\",\n                \"sample tube 4\" =\u003e \"K\"\n            }\n        },\n\n        \"pcr\" =\u003e {\n            \"Unit Name\" =\u003e \"B\",\n            \"Components\" =\u003e {\n                \"sample tube\" =\u003e \"A\",\n                \"diluent A\" =\u003e \"B\"\n            },\n            \"PCR Rehydration Volume\" =\u003e 40,\n            \"Sample Volume\" =\u003e 10,\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 2,\n        },\n\n        \"ligation\" =\u003e {\n            \"Unit Name\" =\u003e \"C\",\n            \"Components\" =\u003e {\n                \"sample tubes\" =\u003e [\n                    \"A\",\n                    \"B\",\n                    \"C\",\n                    \"D\",\n                    \"E\"\n                ],\n                \"diluent A\" =\u003e \"F\"\n            },\n            \"PCR to Ligation Mix Volume\" =\u003e 2.4,\n            \"Ligation Mix Rehydration Volume\" =\u003e 24,\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 2\n        },\n\n        \"detection\" =\u003e {\n            \"Unit Name\" =\u003e \"D\",\n            \"Components\" =\u003e {\n                \"strips\" =\u003e [\n                    \"A\",\n                    \"B\",\n                    \"C\",\n                    \"D\",\n                    \"E\"\n                ],\n                \"stop\" =\u003e \"F\",\n                \"gold\" =\u003e \"G\",\n                \"diluent A\" =\u003e \"H\"\n            },\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 4,\n            \"Stop Rehydration Volume\" =\u003e 40,\n            \"Gold Rehydration Volume\" =\u003e 480,\n            \"Gold to Strip Volume\" =\u003e 40,\n            \"Sample to Strip Volume\" =\u003e 24,\n            \"Stop to Sample Volume\" =\u003e 2.4,\n        },\n\n        \"analysis\" =\u003e {\n            \"Components\" =\u003e {\n                \"strips\" =\u003e [\n                    \"A\",\n                    \"B\",\n                    \"C\",\n                    \"D\",\n                    \"E\"\n                ],\n            },\n            \"Mutation Labels\" =\u003e [\n                \"K65R\",\n                \"K103N\",\n                \"Y181C\",\n                \"M184V\",\n                \"G190A\"\n            ],\n            \"Mutation Colors\" =\u003e [\"red\", \"yellow\", \"green\", \"blue\", \"purple\"]\n        }\n\n    }\n  end\n\n  def self.uw_kit()\n    {\n        \"name\" =\u003e \"uw kit\",\n        \"sample prep\" =\u003e {\n            \"Unit Name\" =\u003e \"A\",\n            \"Components\" =\u003e {\n                \"sample tube 1\" =\u003e \"AA\",\n                \"sample tube 2\" =\u003e \"AB\",\n            }\n        },\n\n        \"pcr\" =\u003e {\n            \"Unit Name\" =\u003e \"B\",\n            \"Components\" =\u003e {\n                \"sample tube\" =\u003e \"A\",\n                \"diluent A\" =\u003e \"B\"\n            },\n            \"PCR Rehydration Volume\" =\u003e 40,\n            \"Sample Volume\" =\u003e 10,\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 2,\n        },\n\n        \"ligation\" =\u003e {\n            \"Unit Name\" =\u003e \"C\",\n            \"Components\" =\u003e {\n                \"sample tubes\" =\u003e [\n                    \"A\",\n                    \"B\",\n                    \"C\",\n                    \"D\",\n                    \"E\",\n                    \"F\"\n                ],\n                \"diluent A\" =\u003e \"G\"\n            },\n            \"PCR to Ligation Mix Volume\" =\u003e 1.2,\n            \"Ligation Mix Rehydration Volume\" =\u003e 24,\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 2\n        },\n\n        \"detection\" =\u003e {\n            \"Unit Name\" =\u003e \"D\",\n            \"Components\" =\u003e {\n                \"strips\" =\u003e [\n                    \"A\",\n                    \"B\",\n                    \"C\",\n                    \"D\",\n                    \"E\",\n                    \"F\"\n                ],\n                \"stop\" =\u003e \"G\",\n                \"gold\" =\u003e \"H\",\n                \"diluent A\" =\u003e \"I\"\n            },\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 4,\n            \"Stop Rehydration Volume\" =\u003e 36,\n            \"Gold Rehydration Volume\" =\u003e 600,\n            \"Gold to Strip Volume\" =\u003e 40,\n            \"Sample to Strip Volume\" =\u003e 24,\n            \"Stop to Sample Volume\" =\u003e 2.4,\n            \"Sample Volume\" =\u003e 2.4\n        },\n\n        \"analysis\" =\u003e {\n            \"Components\" =\u003e {\n                \"strips\" =\u003e [\n                    \"A\",\n                    \"B\",\n                    \"C\",\n                    \"D\",\n                    \"E\",\n                    \"F\"\n                ],\n            },\n            \"Mutation Labels\" =\u003e [\n                \"K65R\",\n                \"K103N\",\n                \"V106M\",\n                \"Y181C\",\n                \"M184V\",\n                \"G190A\"\n            ],\n            \"Mutation Colors\" =\u003e [\"red\", \"yellow\", \"white\", \"green\", \"blue\", \"purple\"]\n        }\n\n    }\n  end\nend"}},{"library":{"name":"OLALib","category":"OLASimple","code_source":"# Library code here\n# category = \"Tissue Culture Libs\"\n# needs \"#{category}/TissueCulture\"\nneeds \"OLASimple/OLAConstants\"\nneeds \"OLASimple/OLAGraphics\"\n\nmodule TextExtension\n  include ActionView::Helpers::TagHelper\n\n  def bold\n    return content_tag(:b, \"#{self}\")\n  end\n\n  def ital\n    return content_tag(:i, \"#{self}\")\n  end\n\n  def strong\n    return content_tag(:strong, \"#{self}\")\n  end\n\n  def color(which_color)\n    return content_tag(:font, \"#{self}\", color: which_color)\n  end\n\n  def cap\n    remaining = \"\"\n    remaining = self[1..-1] if self.length \u003e 1\n    return self[0].capitalize + remaining\n  end\n\n  def quote\n    return \"\\\"#{self}\\\"\"\n  end\nend\n\nmodule RefExtension\n  include OLAConstants\n  # this requires :output_kit, :output_unit, :output_sample, and :pack_hash temporary values\n  # references require :kit, :unit, :component, and :sample keys\n\n  def sort_by \u0026block\n    super(\u0026block).extend(OperationList)\n  end\n\n  def component(name)\n    self.temporary[:pack_hash][COMPONENTS_FIELD_VALUE][name]\n  end\n\n  def input_component(name)\n    get_input_item_helper(name).get(COMPONENT_KEY)\n  end\n\n  def output_component(name)\n    self.get_output_item_helper(name).get(COMPONENT_KEY)\n  end\n\n  def ref(name, with_sample = false)\n    # returns the label for a temporary item by name\n    t = self.temporary\n    c = self.component(name)\n    kit = t[:output_kit]\n    unit = t[:output_unit]\n    # samp = t[:output_sample]\n    samp = \"\"\n    if with_sample\n      samp = t[:output_sample]\n    end\n    self.alias_helper(kit, unit, c, samp)\n  end\n\n  def tube_label(name, with_sample = false)\n    self.label_helper(*self.ref_tokens(name, with_sample))\n  end\n\n  def label_helper(k, u, c, s)\n    [\"#{k}#{u}\", \"#{c}#{s}\"]\n  end\n\n  def input_tube_label(name)\n    self.label_helper(*self.input_tokens(name))\n  end\n\n  def output_tube_label(name)\n    self.label_helper(*self.output_tokens(name))\n  end\n\n  # TOKENS\n  def ref_tokens(name, with_sample = false)\n    # return array for kit-unit and component-sample, usually for labeling purposes\n    t = self.temporary\n    c = self.component(name)\n    kit = t[:output_kit]\n    unit = t[:output_unit]\n    samp = \"\" #t[:output_sample]\n    if with_sample\n      samp = t[:output_sample]\n    end\n    [kit, unit, c, samp]\n  end\n\n  def ref_tokens_helper(item)\n    [item.get(KIT_KEY), item.get(UNIT_KEY), item.get(COMPONENT_KEY), item.get(SAMPLE_KEY)]\n  end\n\n  def input_tokens(name)\n    self.ref_tokens_helper(self.get_input_item_helper(name))\n  end\n\n  def output_tokens(name)\n    self.ref_tokens_helper(self.get_output_item_helper(name))\n  end\n\n  def alias_helper(kit, unit, component, sample)\n    # returns the label given kit, unit, comp and sample\n    \"#{kit}#{unit}#{component}#{sample}\"\n  end\n\n  def ref_helper(item)\n    # returns the label for an item\n    self.alias_helper(*self.ref_tokens_helper(item))\n  end\n\n  def refs_helper(item)\n    # returns an array of labels for a collection\n    components = item.get(COMPONENT_KEY)\n    raise \"Components must be an array to use refs_helper\" unless components.is_a?(Array)\n    components.map do |c|\n      self.alias_helper(item.get(KIT_KEY), item.get(UNIT_KEY), c, item.get(SAMPLE_KEY))\n    end\n  end\n\n  def get_input_item_helper(name)\n    input = self.input(name)\n    raise \"Could not find input field_value #{name}\" if input.nil?\n    item = input(name).item\n    raise \"Input #{name} has no item\" if item.nil?\n    item\n  end\n\n  def get_output_item_helper(name)\n    output = self.output(name)\n    raise \"Could not find output field_value \\\"#{name}\\\"\" if output.nil?\n    item = output(name).item\n    raise \"Output \\\"#{name}\\\" has no item\" if item.nil?\n    item\n  end\n\n  def input_ref(name)\n    # return the label for an input\n    self.ref_helper(get_input_item_helper(name))\n  end\n\n  def input_ref_tokens(name)\n    # return the label for an input\n    self.ref_tokens_helper(get_input_item_helper(name))\n  end\n\n  def output_ref(name)\n    # return the label for an output\n    self.ref_helper(get_output_item_helper(name))\n  end\n\n  def output_ref_tokens(name)\n    # return the label for an input\n    self.ref_tokens_helper(get_output_item_helper(name))\n  end\n\n  def input_refs(name)\n    # return the array of labels for an input\n    self.refs_helper(get_input_item_helper(name))\n  end\n\n  def output_refs(name)\n    # return the array of labels for an output\n    self.refs_helper(get_output_item_helper(name))\n  end\n\n  def make_alias_from_pack_hash(output_item, package_name, from_item)\n    kit = self.temporary[:output_kit]\n    unit = self.temporary[:output_unit]\n    component = self.component(package_name)\n    sample = self.temporary[:output_sample]\n\n    raise \"Kit is nil\" if kit.nil?\n    raise \"Unit is nil\" if unit.nil?\n    raise \"Component is nil\" if component.nil?\n    raise \"Sample is nil\" if sample.nil?\n\n    output_item.associate(KIT_KEY, kit)\n    output_item.associate(UNIT_KEY, unit)\n    output_item.associate(COMPONENT_KEY, component)\n    output_item.associate(SAMPLE_KEY, sample)\n    output_item.associate(ALIAS_KEY, self.ref_helper(output_item))\n\n    # from associations\n    output_item.associate(:from, self.input(from_item).item.id)\n    output_item.associate(:fromref, self.input_ref(from_item))\n    output_item.associate(:from_pack, \"#{self.temporary[:input_kit]}#{self.temporary[:input_unit]}\")\n    output_item\n  end\n\n  def make_item_and_alias(name, package_name, from_item)\n    output_item = self.output(name).make\n    self.make_alias_from_pack_hash(output_item, package_name, from_item)\n  end\n\n  def make_collection_and_alias(name, package_name, from_item)\n    output_collection = self.output(name).make_collection\n    components = self.component(package_name)\n    components.each do |c|\n      output_collection.add_one(self.output(name).sample)\n    end\n    output_item = self.output(name).item\n    self.make_alias_from_pack_hash(output_item, package_name, from_item)\n  end\nend\n\nmodule OLALib\n  include OLAConstants\n\n  String.send(:prepend, TextExtension)\n  Integer.send(:prepend, TextExtension)\n  Float.send(:prepend, TextExtension)\n  Operation.send(:prepend, RefExtension)\n#   include TissueCulture\n\n\n#######################################\n# Utilities\n#######################################\n\n  def pluralizer(noun, num)\n    if num == 1\n      \"the #{noun.pluralize(num)}\"\n    elsif num == 2\n      \"both #{noun.pluralize(num)}\"\n    else\n      \"all #{num} #{noun.pluralize(num)}\"\n    end\n  end\n\n  def group_by_unit ops\n    ops.running.group_by {|op| op.temporary[:unit]}\n  end\n\n  def get_technician_name(job_id)\n    job = Job.find(job_id)\n    user_id = job.user_id\n    username = \"\\\"unknown user\\\"\"\n    unless user_id.nil?\n      username = User.find(job.user_id).name\n    end\n    username\n  end\n\n####################################\n# Item Alias\n####################################\n\n  def alias_helper(kit, unit, component, sample = nil)\n    sample = sample || \"\"\n    \"#{kit}#{unit}#{component}#{sample}\"\n  end\n\n  def make_alias(item, kit, unit, component, sample = nil)\n    sample = sample || \"\"\n    label = alias_helper(kit, unit, component, sample)\n    item.associate(ALIAS_KEY, label)\n    item.associate(KIT_KEY, kit)\n    item.associate(UNIT_KEY, unit)\n    item.associate(COMPONENT_KEY, component)\n    item.associate(SAMPLE_KEY, sample)\n  end\n\n  def get_alias_array(item)\n    [item.get(KIT_KEY), item.get(UNIT_KEY), item.get(COMPONENT_KEY), item.get(SAMPLE_KEY)]\n  end\n\n  def ref(item)\n    \"#{item.get(KIT_KEY)}#{item.get(UNIT_KEY)}#{item.get(COMPONENT_KEY)}#{item.get(SAMPLE_KEY)}\"\n  end\n\n  def save_temporary_input_values(ops, input)\n    # get the aliases from the inputs\n    ops.each do |op|\n      kit, unit, component, sample = get_alias_array(op.input(input).item)\n      op.temporary[:input_kit] = kit\n      op.temporary[:input_unit] = unit\n      op.temporary[:input_component] = component\n      op.temporary[:input_sample] = sample\n      op.temporary[:input_kit_and_unit] = [kit, unit].join('')\n    end\n  end\n\n  def save_pack_hash(ops, pack)\n    ops.running.each do |op|\n      op.temporary[:pack_hash] = get_pack_hash(op.input(pack).sample)\n    end\n  end\n\n  def save_temporary_output_values(myops)\n    myops.each do |op|\n      op.temporary[:output_kit] = op.temporary[:input_kit]\n      op.temporary[:output_unit] = op.temporary[:pack_hash][UNIT_NAME_FIELD_VALUE]\n      op.temporary[:output_sample] = op.temporary[:input_sample]\n      op.temporary[:output_kit_and_unit] = [op.temporary[:output_kit], op.temporary[:output_unit]].join('')\n      op.temporary[:output_number_of_samples] = op.temporary[:pack_hash][NUM_SAMPLES_FIELD_VALUE]\n    end\n  end\n\n#   def save_temporary_output_values(myops, pack_field_value_name, unit)\n#     myops.each do |op|\n#       op.temporary[:output_kit] = op.temporary[:input_kit]\n#       op.temporary[:output_sample] = op.temporary[:input_sample]\n#       op.temporary[:output_unit] = unit\n#       op.temporary[:output_kit_and_unit] = [op.temporary[:output_kit], op.temporary[:output_unit]].join('')\n#     end\n#   end\n\n  def group_packages(myops)\n    myops.group_by {|op| op.temporary[:output_kit_and_unit]}\n  end\n\n\n####################################\n# Collection Alias\n####################################\n\n  def make_array_association(item, label, data)\n    raise \"must be an item not a collection for array associations\" unless item.is_a?(Item)\n    data.each.with_index do |d, i|\n      item.associate(\"#{label}#{i}\".to_sym, d)\n    end\n  end\n\n  def get_array_association(item, label, i)\n    item.get(\"#{label}#{i}\".to_sym)\n  end\n\n  def make_collection_alias(item, kit, unit, components, sample = nil)\n    sample = sample || \"\"\n    raise \"must be an item not a collection for array associations\" unless item.is_a?(Item)\n    item.associate(KIT_KEY, kit)\n    item.associate(UNIT_KEY, unit)\n    make_array_association(item, COMPONENT_KEY, components)\n    item.associate(SAMPLE_KEY, sample)\n  end\n\n  def collection_ref(collection, index)\n    component = get_array_association(collection, COMPONENT_KEY, index)\n    \"#{collection.get(KIT_KEY)}#{collection.get(UNIT_KEY)}#{component}#{collection.get(SAMPLE_KEY)}\"\n  end\n\n  def get_collection_refs(item, length)\n    length.times.map do |i|\n      collection_ref(item, i)\n    end\n  end\n\n####################################\n# Kit and Package Parser\n####################################\n\n  def parse_component(component_string)\n    # parses the component value for a OLASimple Package sample\n    # values are formatted as \"key: value\" or \"key: [val1, val2, val3]\"\n    val = nil\n    tokens = component_string.split(/\\s*\\:\\s*/)\n    m = /\\[(.+)\\]/.match(tokens[1])\n    if not m.nil?\n      arr_str = m[1]\n      val = arr_str.split(/\\s*,\\s*/).map {|x| x.strip()}\n    else\n      val = tokens[1]\n    end\n    return tokens[0], val\n  end\n\n  def get_component_dictionary(package_sample)\n    # parses all of the components in a OLASimple Package\n    components = package_sample.properties[COMPONENTS_FIELD_VALUE]\n    components.map {|v| [*parse_component(v)]}.to_h\n  end\n\n\n  def get_pack_hash(sample)\n    pack_hash = {}\n    # get the properties for the output pack sample\n    pack_hash = sample.properties\n\n    # parse the component values, formatted as \"key: value\" or \"key: [val1, val2, val3]\"\n    pack_hash[COMPONENTS_FIELD_VALUE] = get_component_dictionary(sample)\n    pack_hash\n  end\n\n  def get_kit_hash(op)\n    kit_hash = {}\n    # validates that input and output kits sample definitions are formatted correctly\n    [SAMPLE_PREP_FIELD_VALUE, PCR_FIELD_VALUE, LIGATION_FIELD_VALUE, DETECTION_FIELD_VALUE].each do |x|\n      # validate that the input kit is the same as the expected output kits\n      output_sample = op.output(x).sample\n      kit_hash[x] = get_pack_hash(output_sample)\n    end\n\n    kit_hash\n  end\n\n  def kit_hash_to_json(kit_hash)\n    h = kit_hash.map {|k, v| [k, v.reject {|key, val| key == KIT_FIELD_VALUE}]}.to_h\n    JSON.pretty_generate(h)\n  end\n\n  def validate_kit_hash(op, kit_hash)\n    # validates the kit hash\n    errors = []\n\n\n    kit_hash.each do |pack_name, pack_properties|\n      if pack_properties.empty?\n        errors.push([\"components_empty_for_#{pack_name}\".to_sym, \"Package components are empty!\"])\n      end\n\n      if pack_properties[KIT_FIELD_VALUE] != op.input(KIT_FIELD_VALUE).sample\n        errors.push([\"kit_not_found_in_input_for_#{pack_name}\".to_sym, \"Input kit does not match output package definition.\"])\n      end\n    end\n\n    kit_sample = op.input(KIT_FIELD_VALUE).sample\n    kit_sample_props = kit_sample.properties\n    num_codons = kit_sample_props[CODONS_FIELD_VALUE].length\n    num_codon_colors = kit_sample_props[CODON_COLORS_FIELD_VALUE].length\n    num_ligation_tubes = kit_hash[LIGATION_FIELD_VALUE][COMPONENTS_FIELD_VALUE][\"sample tubes\"].length\n    num_strips = kit_hash[DETECTION_FIELD_VALUE][COMPONENTS_FIELD_VALUE][\"strips\"].length\n\n    if debug\n      show do\n        title \"DEBUG: Kit Hash Errors\"\n        errors.each do |k, v|\n          note \"#{k}: #{v}\"\n        end\n      end\n    end\n\n    errors.each do |k, v|\n      op.error(k, v)\n    end\n\n    if debug\n      show do\n        title \"DEBUG: Kit Hash\"\n        note \"#{kit_hash_to_json(kit_hash)}\"\n        # note \"#{kit_hash}\"\n      end\n    end\n  end\n\n####################################\n# Step Utilities\n####################################\n\n  def check_for_tube_defects myops\n    # show do\n    defects = show do\n      title \"Check for cracked or damaged tubes.\"\n      select [\"No\", \"Yes\"], var: \"cracked\", label: \"If there are cracks or defects in the tube, select \\\"Yes\\\" from the dropdown menu below.\", default: 0\n      note \"If yes, #{SUPERVISOR} will replace the samples or tubes for you.\"\n    end\n\n    if defects[\"cracked\"] == \"Yes\"\n      show do\n        title \"Contact #{SUPERVISOR} about missing or damaged tubes.\"\n\n        note \"You said there are some problems with the samples.\"\n        check \"Contact #{SUPERVISOR} about this issue.\"\n        note \"We will simply replace these samples for you.\"\n      end\n    end\n  end\n\n  def area_preparation which_area, materials, other_area\n    show do\n     title \"Put on a pair of gloves\"\n    end\n\n    show do\n      title \"#{which_area.cap} preparation\"\n\n      note \"You will be doing the protocol in the #{which_area.bold} area\"\n      warning \"Put on a pair of gloves now\"\n      warning \"Keep all materials in the #{which_area.bold} area separate from the #{other_area.bold} area\"\n      note \"Before continuing, make sure you have the following items in the #{which_area.bold} area:\"\n      materials.each do |i|\n        check i\n      end\n    end\n  end\n\n  def put_on_ppe which_area\n    show do\n      title \"Put on Lab Coat and Gloves\"\n\n      check \"Put on a lab coat\"\n      warning \"make sure lab coat is from the #{which_area.bold}\"\n      check \"Put on a pair of latex gloves.\"\n    end\n  end\n\n  def transfer_title_proc(vol, from, to)\n    p = Proc.new {\n      title \"Add #{vol}uL from #{from.bold} to #{to.bold}\"\n    }\n    ShowBlock.new(self).run(\u0026p)\n  end\n\n  def show_open_package(kit, unit, num_sub_packages)\n    show do\n      title \"Tear open #{PACKAGE} #{kit.bold}#{unit.bold}\"\n      if num_sub_packages \u003e 0\n        note \"Tear open all smaller packages.\"\n      end\n      extra = ShowBlock.new(self).run(\u0026Proc.new) if block_given?\n      raw extra unless extra.nil?\n      check \"Discard the packaging material in the paper box on your right.\"\n    end\n  end\n\n  def centrifuge_proc(sample_identifier, sample_labels, time, reason, balance = false)\n    p = Proc.new {\n      check \"Place #{sample_identifier.pluralize(sample_labels.length)} #{sample_labels.join(', ').bold} in the #{CENTRIFUGE}\"\n      check \"#{CENTRIFUGE_VERB.cap} #{pluralizer(sample_identifier, sample_labels.length)} for #{time} #{reason}\"\n      if balance\n        if num.even?\n          warning \"Balance tubes in the #{CENTRIFUGE} by placing #{num / 2} #{sample_identifier.pluralize(num / 2)} on each side.\"\n        else\n          warning \"Use a spare tube to balance #{sample_identifier.pluralize(num)}.\"\n        end\n      end\n    }\n    ShowBlock.new(self).run(\u0026p)\n  end\n\n  def vortex_proc(sample_identifier, sample_labels, time, reason)\n    p = Proc.new {\n      # check \"Vortex #{pluralizer(sample_identifier, num)} for #{time} #{reason}\"\n      check \"Vortex #{sample_identifier.pluralize(sample_labels.length)} #{sample_labels.join(', ').bold} for #{time} #{reason}\"\n      # check \"Vortex #{sample_identifier.pluralize(sample_labels.length)} #{sample_labels.map { |label| label.bold })}\n    }\n    ShowBlock.new(self).run(\u0026p)\n  end\n\n  def centrifuge_helper(sample_identifier, sample_labels, time, reason, mynote = nil)\n    sample_labels = sample_labels.uniq\n    show do\n      title \"#{CENTRIFUGE_VERB.cap} #{sample_identifier.pluralize(sample_labels.length)} for #{time}\"\n      if not mynote.nil?\n        note mynote\n      end\n      warning \"Close #{pluralizer(\"tube cap\", sample_labels.length)}.\"\n      raw centrifuge_proc(sample_identifier, sample_labels, time, reason)\n    end\n  end\n\n  def vortex_helper(sample_identifier,\n                    sample_labels,\n                    vortex_time,\n                    vortex_reason, mynote = nil)\n    num = sample_labels.length\n    show do\n      title \"Vortex #{sample_identifier.pluralize(num)}\"\n      if not mynote.nil?\n        note mynote\n      end\n      warning \"Close #{pluralizer(\"tube cap\", sample_labels.length)}.\"\n      raw vortex_proc(sample_identifier, sample_labels, vortex_time, vortex_reason)\n    end\n  end\n\n  def vortex_and_centrifuge_helper(sample_identifier,\n                                   sample_labels,\n                                   vortex_time, spin_time,\n                                   vortex_reason, spin_reason, mynote = nil)\n    num = sample_labels.length\n    show do\n      title \"Vortex and #{CENTRIFUGE_VERB} #{sample_identifier.pluralize(num)}\"\n      if not mynote.nil?\n        note mynote\n      end\n      warning \"Close #{pluralizer(\"tube cap\", sample_labels.length)}.\"\n      # note \"Using #{sample_identifier.pluralize(num)} #{sample_labels.join(', ').bold}:\"\n      raw vortex_proc(sample_identifier, sample_labels, vortex_time, vortex_reason)\n      raw centrifuge_proc(sample_identifier, sample_labels, spin_time, spin_reason)\n      check \"Place the tubes back on rack\"\n    end\n  end\n\n  def add_to_thermocycler(sample_identifier, sample_labels, program_name, program_table, name)\n    if sample_labels.is_a?(Array)\n      len = sample_labels.length\n    else\n      len = sample_labels\n    end\n\n    show do\n      title \"Run #{name}\"\n      check \"Add #{pluralizer(sample_identifier, len)} to #{THERMOCYCLER}\"\n      check \"Close and tighten the lid.\"\n      check \"Select the program named #{program_name.bold} under the \u003cb\u003eOS\u003c/b\u003e\"\n      check \"Hit \u003cb\u003e\\\"Run\\\"\u003c/b\u003e and click \u003cb\u003e\\\"OK\\\"\u003c/b\u003e\"\n      table program_table\n    end\n  end\n\n  def clean_area which_area\n    show do\n      disinfectant = \"10% bleach\"\n      title \"Wipe down #{which_area.bold} with #{disinfectant.bold}.\"\n      note \"Now you will wipe down your #{BENCH} and equipment with #{disinfectant.bold}.\"\n      check \"Spray #{disinfectant.bold} onto a #{WIPE} and clean off pipettes and pipette tip boxes.\"\n      check \"Spray a small amount of #{disinfectant.bold} on the bench surface. Clean bench with #{WIPE}.\"\n      # check \"Spray some #{disinfectant.bold} on a #{WIPE}, gently wipe down keyboard and mouse of this computer/tablet.\"\n      warning \"Do not spray #{disinfectant.bold} onto tablet or computer!\"\n      check \"Finally, spray outside of gloves with #{disinfectant.bold}.\"\n    end\n\n    show do\n      disinfectant = \"70% ethanol\"\n      title \"Wipe down #{which_area.bold} with #{disinfectant.bold}.\"\n      note \"Now you will wipe down your #{BENCH} and equipment with #{disinfectant.bold}.\"\n      check \"Spray #{disinfectant.bold} onto a #{WIPE} and clean off pipettes and pipette tip boxes.\"\n      check \"Spray a small amount of #{disinfectant.bold} on the bench surface. Clean bench with #{WIPE}.\"\n      #   check \"Spray a #{\"small\".bold} amount of #{disinfectant.bold} on a #{WIPE}. Gently wipe down keyboard and mouse of this computer/tablet.\"\n      warning \"Do not spray #{disinfectant.bold} onto tablet or computer!\"\n      check \"Finally, spray outside of gloves with #{disinfectant.bold}.\"\n    end\n  end\n\n  def area_setup area, materials, other_area = nil\n    area_preparation area, materials, other_area\n    put_on_ppe area\n    clean_area area\n  end\n\n\n####################################\n# Displaying Images\n######################################\n  def extract_basename filename\n    ext = File.extname(filename)\n    basename = File.basename(filename, ext)\n    basename\n  end\n\n  def show_with_expected_uploads(op, filename, save_key = nil, num_tries = 5)\n    upload_hashes = []\n    warning_msg = nil\n    num_tries.times.each do |i|\n      if upload_hashes.empty?\n        # ask for uploads\n        result = show do\n          warning warning_msg unless warning_msg.nil?\n          extra = ShowBlock.new(self).run(\u0026Proc.new) if block_given?\n          raw extra unless extra.nil?\n          upload var: :files\n        end\n        upload_hashes = result[:files] || []\n\n        if debug and i \u003e= 1\n          n = \"default_filename.txt\"\n          if i \u003e= 2\n            n = filename\n          end\n          upload_hashes.push({:id =\u003e 12345, :name =\u003e n})\n        end\n\n        # try again if not files were uploaded\n        if upload_hashes.empty?\n          warning_msg = \"You did not upload any files! Please try again.\"\n        end\n\n        unless upload_hashes.empty?\n          # get name to id hash\n          name_to_id_hash = upload_hashes.map {|u| [extract_basename(u[:name]), u[:id]]}.to_h\n\n          # get the file even if technician uploaded multiple files\n          if name_to_id_hash.keys.include?(extract_basename(filename))\n            upload_hashes = [{name: filename, id: name_to_id_hash[filename]}]\n          else\n            warning_msg = \"File #{filename} not uploaded. Please find file \u003cb\u003e\\\"#{filename}\\\"\u003c/b\u003e. You uploaded files #{name_to_id_hash.keys.join(', ')}\"\n            upload_hashes = []\n          end\n        end\n      end\n    end\n    raise \"Expected file uploads, but there were none!\" if upload_hashes.empty?\n\n    upload_ids = upload_hashes.map {|uhash| uhash[:id]}\n    uploads = []\n    if debug\n      random_uploads = Upload.includes(:job)\n      uploads = upload_ids.map {|u| random_uploads.sample}\n    else\n      uploads = upload_ids.map {|u_id| Upload.find(u_id)}\n    end\n    upload = uploads.first\n    op.temporary[save_key] = upload unless save_key.nil?\n    op.temporary[\"#{save_key}_id\".to_sym] = upload.id unless save_key.nil?\n    return upload\n  end\n\n  def display_upload(upload, size = \"100%\")\n    p = Proc.new do\n      note \"\u003cimg src=\\\"#{upload.expiring_url}\\\" width=\\\"#{size}\\\"\u003e\u003c/img\u003e\"\n    end\n    ShowBlock.new(self).run(\u0026p)\n  end\n\n    def display_strip_section(upload, display_section, num_sections, size)\n      p = Proc.new do\n          x = 100.0/num_sections\n          styles = []\n          num_sections.times.each do |section|\n              x1 = 100 - (x * (section+1)).to_i\n              x2 = (x*(section)).to_i\n              styles.push(\".clipimg#{section} { clip-path: inset(0% #{x1}% 0% #{x2}%); }\")\n          end\n          style = \"\u003chead\u003e\u003cstyle\u003e#{styles.join(' ')}\u003c/style\u003e\u003c/head\u003e\"\n          note style\n          note \"\u003cimg class=\\\"clipimg#{display_section}\\\" src=\\\"#{upload.expiring_url}\\\" width=\\\"#{size}\\\"\u003e\u003c/img\u003e\" \n      end\n      ShowBlock.new(self).run(\u0026p)\n  end\n\nend"}},{"library":{"name":"SVGGraphics","category":"OLASimple","code_source":"############################################\n#\n# Generic SVG Graphics for lab work\n#\n############################################\n\nrequire 'matrix'\n\nmodule Graphics\n\n  class Tag\n    # an HTML/XML like tag\n    #\n    def initialize(tag_name, value: nil, properties: nil)\n      if properties.nil?\n        properties = {}\n      end\n      if value.nil?\n        value = \"\"\n      end\n      @tag_name = tag_name\n      @properties = properties\n      @value = value\n    end\n\n    def Tag.property(label, value)\n      return \"#{label}=\\\"#{value}\\\"\"\n    end\n\n    def value\n      @value\n    end\n\n    def update(props)\n      @properties = @properties.merge(props)\n    end\n\n    def properties\n      @properties.select {|_, v|\n        !v.nil? and v != \"\"}.map {|k, v|\n        Tag.property(k, v)\n      }.join(' ')\n    end\n\n    def formatter\n      REXML::Formatters::Pretty.new\n    end\n\n    def to_str\n      props = self.properties\n      if props != \"\"\n        props = \" \" + props\n      end\n      if self.value == \"\"\n        return \"\u003c#{@tag_name}#{props} /\u003e\"\n      end\n\n      mystr = \"\u003c#{@tag_name}#{props}\u003e#{self.value}\u003c/#{@tag_name}\u003e\"\n      return mystr\n      mydoc = REXML::Document.new(mystr)\n      self.formatter.write(mydoc.root, \"\")\n    end\n\n    def dump\n      {\n          properties: @properties,\n          value: @value,\n          tag_name: @tag_name\n      }\n    end\n\n    def self.load(props)\n      print(\"loading #{self}\")\n      return self.new(props[:tag_name], value: props[:value], properties: props[:properties])\n    end\n\n    def inst\n      self.class.load(self.dump)\n    end\n\n    # def inst\n    #   Marshal.load(Marshal.dump(self))\n    # end\n\n    def to_s\n      self.to_str\n    end\n  end\n\n  # A vector image, like an icon\n  class SVGElement \u003c Tag\n    attr_accessor :alignment, :value, :boundx, :boundy\n    attr_reader :x, :y, :yscale, :rot, :xposrot, :yposrot, :xscale, :yscale, :name, :classname, :transformations\n\n    @@debug = false\n\n    # A SVG element to display in an image\n    #\n    def initialize(children: nil,\n                   name: nil,\n                   classname: nil,\n                   x: 0,\n                   y: 0,\n                   boundx: 0,\n                   boundy: 0,\n                   alignment: 'top-left',\n                   xscale: 1,\n                   yscale: 1,\n                   rot: 0,\n                   xposrot: 0,\n                   yposrot: 0,\n                   properties: nil,\n                   transformations: nil,\n                   style: nil)\n      properties = properties || {}\n      classname = classname || \"\"\n      children = [children] unless children.is_a?(Array)\n      super(\"g\", properties: properties)\n      @name = name\n      @classname = classname\n      @boundx = boundx\n      @boundy = boundy\n      @children = children\n      @alignment = alignment\n      @style = style || \"\"\n      @transformations = transformations || []\n      self.update_coordinates!(x, y)\n      @xscale = xscale\n      @yscale = yscale\n      if @transformations.empty?\n        self.transform!(x: x, y: y, xscale: xscale, yscale: yscale, rot: rot, xposrot: xposrot, yposrot: yposrot)\n      end\n    end\n\n    def update_coordinates!(x, y)\n      @x = x\n      @y = y\n    end\n\n    def dump\n      tag_props = super\n      tag_props.reject! {|k, v| [\"tag_name\", \"value\"].include?(k.to_s)}\n      props = {\n          x: @x,\n          y: @y,\n          xscale: @xscale,\n          yscale: @yscale,\n          name: @name,\n          classname: @classname,\n          alignment: @alignment,\n          style: @style,\n          transformations: @transformations.dup.compact,\n          children: @children.dup.compact,\n          boundx: @boundx,\n          boundy: @boundy\n      }\n      props.merge(tag_props)\n    end\n\n    def self.load(props)\n      self.new(**props)\n    end\n\n    # sets the debug mode on or off\n    # debug mode will display bounding boxes and anchors\n    def self.debug onoroff\n      @@debug = onoroff\n    end\n\n    def value\n      # override the Tag value for converting SVGElement to a string\n      @value = \"\\n#{self.display}\"\n      super\n    end\n\n    def new_class(myclass)\n      inst = self.inst\n      inst.new_class!(myclass)\n    end\n\n    def new_name(myname)\n      inst = self.inst\n      inst.new_name!(myname)\n    end\n\n    def new_class!(myclass)\n      @classname = myclass\n      self\n    end\n\n    def new_name!(myname)\n      @name = myname\n      self\n    end\n\n    def svg_properties\n      # additional svg properties\n      props = {}\n      if @name != \"\"\n        props[\"id\"] = @name\n      end\n      if @classname != \"\"\n        props[\"class\"] = @classname\n      end\n      props[\"transform\"] = self.get_transform_attribute\n      props\n    end\n\n    def properties\n      # override the Tab properties to add additional svg-specific properties\n      # such as id=\"\" and transform\n      @properties = @properties.merge(self.svg_properties)\n      super\n    end\n\n    def origin\n      self.get_anchor(\"upper-left\")\n    end\n\n    def bounds\n      self.bounds_helper(0, 0)\n      # use min?\n    end\n\n    def align_with(other, other_anchor)\n      self.translate!(-@x, -@y)\n      v = other.get_abs_anchor(other_anchor)\n      v = v - other.abs_anchor_vector\n      # v = other.get_abs_anchor_vector(other_anchor)\n      #\n      self.translate!(*v)\n    end\n\n    def g id: nil, classname: nil\n      # return a external new group with svg element as a child\n      new_g = SVGElement.new(name: id, properties: {\"class\" =\u003e classname}, x: 0, y: 0)\n      new_g.update_coordinates!(@x, @y)\n      new_g.boundx = @boundx * @xscale\n      new_g.boundy = @boundy * @yscale\n      new_g.add_child(self)\n    end\n\n    # Sets the children array\n    def children=(g)\n      @children = g\n    end\n\n    # Returns the children array\n    def children\n      @children\n    end\n\n    def display\n      inst = self\n      if @@debug\n        inst = inst.display_with_anchors.bb\n      end\n      if inst.children.is_a?(Array)\n        inst.children.map do |child|\n          if child.is_a?(SVGElement)\n            \"#{child}\"\n          else\n            child\n          end\n        end.join(\"\\n\")\n      else\n        \"#{inst.children}\"\n      end\n    end\n\n    def add_child(child)\n      if child.is_a?(String)\n        @children.push(child)\n      else\n        @children.push(child.inst)\n      end\n      self\n    end\n\n    def group_children id: nil, classname: nil\n      # make an internal grouping of this elements children. Return that grouping\n      child_group = SVGElement.new(name: id, classname: classname)\n      child_group.children = self.children\n      self.children = [child_group]\n      return child_group\n    end\n\n    def cx\n      return (@x + @boundx) / 2.0\n    end\n\n    def cy\n      return (@y + @boundy) / 2.0\n    end\n\n    # ########################################################\n    # Transformation\n    # ########################################################\n\n    # scaling always happens last in SVG transform attribute to avoid unusual SVG behavior\n    def get_transform_attribute\n      # transformations = [self.apply_scale, self.apply_translate, self.apply_rotate]\n      transformations = []\n      transformations += @transformations.dup\n      transformations.push(\"scale(#{@xscale} #{@yscale})\")\n      transformations.push(self.anchor_translate)\n      attr = transformations.join(' ')\n      zero = \"(-){0,1}0(\\.0){0,1}\"\n      attr.gsub!(/translate\\((-){0,1}0(\\.0){0,1} (-){0,1}0(\\.0){0,1}\\)/, '')\n      attr.gsub!(/translate\\((-){0,1}0(\\.0){0,1}\\)/, '')\n      attr.gsub!(/rotate\\((-){0,1}0(\\.0){0,1} (-){0,1}0(\\.0){0,1} (-){0,1}0(\\.0){0,1}\\)\\s+/, \"\")\n      attr.gsub!(/scale\\(1\\)\\s+/, \"\")\n      attr.gsub!(/scale\\(1 1\\)\\s+/, \"\")\n      attr.strip.gsub(/\\s+/, \" \")\n    end\n\n    def align!(alignment)\n      self.alignment = alignment\n      self\n    end\n\n    def mirror_horizontal\n      child_group = self.group_children(id: \"mirror_horizontal\")\n      child_group.scale!(-1, 1).translate!(@boundx, 0)\n      return self\n    end\n\n    def mirror_vertical\n      child_group = self.group_children(id: \"mirror_vertical\")\n      child_group.scale!(1, -1).translate!(0, @boundy)\n      return self\n    end\n\n    def translate!(x, y = 0)\n      @x += x\n      y = y || 0\n      @y += y\n      if x != 0 or y != 0\n        @transformations.push self.translate_helper(x, y)\n      end\n      self\n    end\n\n    def rotate!(a, x = 0, y = 0)\n      if a != 0\n        @transformations.push self.rotate_helper(a, x, y)\n      end\n      self\n    end\n\n    # Scalings must always happen last to avoid unusual SVG behaviors\n    def scale!(x, y = nil)\n      if y.nil?\n        y = x\n      end\n      @xscale = x\n      @yscale = y\n      # if x != 1 and y != 1\n      #   @transformations.push self.scale_helper(x, y)\n      # end\n      self\n    end\n\n    def transform!(x: 0, y: 0, xscale: 1, yscale: 1, rot: 0, xposrot: 0, yposrot: 0)\n      # update the tranform values\n      self.translate!(x, y)\n          .rotate!(rot, xposrot, yposrot)\n          .scale!(xscale, yscale)\n    end\n\n    def translate(x, y = nil)\n      i = self.inst\n      i.translate!(x, y)\n    end\n\n    def rotate(a, x = 0, y = 0)\n      i = self.inst\n      i.rotate!(a, x, y)\n    end\n\n    def scale(x, y = nil)\n      i = self.inst\n      i.scale!(x, y)\n    end\n\n    def align(alignment)\n      inst = self.inst\n      inst.align!(alignment)\n    end\n\n    def transform(x: 0, y: 0, xscale: 1, yscale: 1, rot: 0, xposrot: 0, yposrot: 0)\n      # update the tranform values\n      inst = self.inst\n      inst.transform!(x: x, y: y, xscale: xscale, yscale: yscale, rot: rot, xposrot: xposrot, yposrot: yposrot)\n    end\n\n    def translate_helper(x, y = 0)\n      \"translate(#{x} #{y})\"\n    end\n\n    def rotate_helper(a, x = 0, y = 0)\n      # a: degrees\n      # x: rotate point\n      # y: rotate point\n      \"rotate(#{a} #{x} #{y})\"\n    end\n\n\n    def scale_helper(x, y = 1)\n      # a: degrees\n      # x: rotate point\n      # y: rotate point\n      \"scale(#{x} #{y})\"\n    end\n\n    def anchor_translate\n      x = self.anchor_vector\n      self.translate_helper(-x[-0], -x[1])\n    end\n\n    def apply_rotate\n      self.rotate_helper(@rot, @xposrot, @yposrot)\n    end\n\n    def apply_scale\n      self.scale_helper(@xscale, @yscale)\n    end\n\n    # ########################################################\n    # Anchors\n    # ########################################################\n\n    def get_anchor_vector(alignment)\n      anchor_matrix = self.parse_alignment alignment\n      cw = @boundx / 2.0\n      cy = @boundy / 2.0\n      Vector[(anchor_matrix[0] + 1) * cw, (anchor_matrix[1] + 1) * cy]\n    end\n\n    def anchor_vector\n      self.get_anchor_vector @alignment\n    end\n\n    def get_anchor alignment\n      p = Vector[@x, @y]\n      p + self.get_anchor_vector(alignment)\n    end\n\n    def anchor\n      p = Vector[@x, @y]\n      p + self.get_anchor_vector(@alignment)\n    end\n\n    def get_abs_anchor alignment\n      p = Vector[@x, @y]\n      p + self.get_abs_anchor_vector(alignment)\n    end\n\n    def abs_anchor\n      self.get_abs_anchor(@alignment)\n    end\n\n    # multiple the anchor vector by the scaling vector\n    def abs_anchor_vector\n      return self.get_abs_anchor_vector(@alignment)\n    end\n\n    def get_abs_anchor_vector alignment\n      a = self.get_anchor_vector(alignment)\n      return Vector[@xscale * a[0], @yscale * a[1]]\n    end\n\n    def display_with_anchors\n      if @name == 'debuganchor'\n        return self\n      end\n      cross = SVGElement.new(name: \"debuganchor\", boundx: 10, boundy: 10)\n      cross.add_child Tag.new('line', properties: {x1: 0, y1: 0, x2: 10, y2: 10, stroke: 'red', 'stroke-width' =\u003e 0.5})\n      cross.add_child Tag.new('line', properties: {x2: 0, y1: 0, x1: 10, y2: 10, stroke: 'red', 'stroke-width' =\u003e 0.5})\n      cross.add_child Tag.new('rect', properties: {x: 0, y: 0, width: 10, height: 10, stroke: 'red', fill: 'none', 'stroke-width' =\u003e 0.5})\n      cross.scale!(0.75)\n      cross.align!('center-center')\n      inst = self.inst\n      halign = ['left', 'center', 'right']\n      valign = ['top', 'center', 'bottom']\n      halign.each do |h|\n        valign.each do |v|\n          inst.add_child(cross.translate(*inst.get_anchor_vector(\"#{h}-#{v}\")))\n        end\n      end\n      inst\n    end\n\n    def bb\n      if @name == \"debuganchor\"\n        return self\n      end\n      inst = self.inst\n      ax, ay = self.anchor\n      bounding_box = Tag.new('rect', properties: {\n          x: 0,\n          y: 0,\n          width: @boundx,\n          height: @boundy,\n          \"stroke-width\" =\u003e 0.5,\n          stroke: 'red',\n          fill: 'none'\n      })\n      inst.add_child(bounding_box)\n    end\n\n    def parse_alignment(alignment)\n      # parses an alignment string like 'center-left'\n\n      tokens = alignment.split('-')\n      if tokens.length != 2\n        raise \"Property 'alignment=#{alignment}' is improperly formatted (e.g. use 'alignment=\\\"center-left\\\"')\"\n      end\n\n      if ['left', 'right'].include?(tokens[1])\n        tokens[0], tokens[1] = tokens[1], tokens[0]\n      end\n\n      if ['upper', 'bottom', 'top'].include?(tokens[0])\n        tokens[0], tokens[1] = tokens[1], tokens[0]\n      end\n\n      if ['left', 'right'].include?(tokens[1])\n        raise \"Property 'alignment' not understood. Cannot be aligned to both left and right. Found '#{alignment}'\"\n      end\n\n      if ['top', 'upper', 'bottom'].include?(tokens[0])\n        raise \"Property 'alignment' not understood. Cannot be aligned to both top and bottom. Found '#{alignment}'\"\n      end\n\n      anchor_dict = {\n          left: -1,\n          center: 0,\n          right: 1,\n          upper: -1,\n          top: -1,\n          bottom: 1\n      }\n      tokens.map {|t| anchor_dict[t.to_sym]}\n    end\n\n    # change relative coordinates to absolute coordinates\n    def v(x, y)\n      return Vector[x, y]\n    end\n\n    def abs_v(x, y)\n      return Vector[@xscale * x, @yscale * y]\n    end\n\n    def style(mystyle)\n      inst = self.inst\n      inst.style!(mystyle)\n    end\n\n    def style!(mystyle)\n      @style = Tag.new(\"style\", value: mystyle)\n    end\n\n    def svg(width=nil, height=nil, scale = 1.0)\n      width = width || @boundx * @xscale\n      height = height || @boundy * @yscale\n      Tag.new('svg',\n              value: [@style, self.g(id: \"svg\").to_str].join(''), properties: {\n              width: \"#{width * scale}px\",\n              height: \"#{height * scale}px\",\n              viewBox: \"0 0 #{width} #{height}\",\n              version: \"1.1\",\n              xmlns: \"http://www.w3.org/2000/svg\"\n          })\n    end\n  end\n\n  class Shape \u003c SVGElement\n    def initialize(x, y, shape, stroke = 'black', stroke_width = 1, shapevalue = nil, *args)\n\n      super(*args)\n      if @shape_properties.nil?\n        @shape_properties = {}\n      end\n      @shape = shape\n      @shapevalue = shapevalue\n      self.update({stroke: stroke, \"stroke-width\" =\u003e stroke_width})\n    end\n\n    def dump\n      elements_props = super\n      {\n          shape_properties: @shape_properties,\n          shape: @shape,\n          shapevalue: @shapevalue,\n          element_props: elements_props\n      }\n    end\n\n    def self.load(props)\n      new = self.new(0, 0, props[:shape], 'black', 1, props[:shapevalue], **props[:element_props])\n      new.update(props[:shape_properties])\n    end\n\n    def inst\n      self.class.load(self.dump)\n    end\n\n    # def inst\n    #   Marshal.load(Marshal.dump(self))\n    # end\n\n    def get_child\n      Tag.new(@shape, value: @shapevalue, properties: @shape_properties)\n    end\n\n    def update new_hash\n      @shape_properties.merge!(new_hash)\n      @children[0] = self.get_child\n      self\n    end\n  end\n\n  class Rect \u003c Shape\n    def initialize(x, y, width, height, *args)\n      @shape_properties = {width: width, height: height}\n      super(x, y, 'rect', *args)\n      @boundx = width\n      @boundy = height\n    end\n  end\n\n  class Circle \u003c Shape\n    def initialize(x, y, r, *args)\n      @shape_properties = {r: r, cx: 0, cy: 0}\n      super(x, y, 'circle', *args)\n    end\n  end\n\n  class Line \u003c Shape\n    def initialize(x1, y1, x2, y2, *args)\n      @shape_properties = {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2}\n      super(0, 0, 'line', *args)\n    end\n  end\n\n  class VectorLine \u003c Shape\n    def initialize(x, y, dx, dy, *args)\n      @shape_properties = {x1: 0, y1: 0, x2: dx, y2: dy}\n      super(x, y, 'line', *args)\n    end\n  end\n\n  def label(text, properties = nil)\n    properties = properties || {}\n    font_size = properties[:font_size] || 12\n    boundx = font_size * text.length * 0.5\n    boundy = font_size\n    mylabel = SVGElement.new(boundx: boundx, boundy: boundy)\n    a = mylabel.get_anchor_vector('center-center')\n    properties[:x] = a[0]\n    properties[:y] = a[1]\n    properties[\"alignment-baseline\".to_sym] = 'middle'\n    properties[\"text-anchor\".to_sym] = 'middle'\n    properties['font-family'.to_sym] = \"Verdana\"\n    mylabel.add_child(\n        Tag.new(\"text\", value: text, properties: properties)\n    )\n  end\n\n  # class Label \u003c Shape\n  #   def initialize(label, font_size, x = 0, y = 0, font_family = \"Arial\", stroke='black', stroke_width=0, *args)\n  #     @shape_properties = {\n  #         x: 0, y: 0,\n  #         \"font-size\" =\u003e font_size,\n  #         \"font-family\" =\u003e font_family,\n  #         'alignment-baseline' =\u003e 'middle',\n  #         'text-anchor' =\u003e 'middle'}\n  #     label = label || \"\"\n  #     super(x, y, 'text', stroke, stroke_width, @shapevalue, *args)\n  #     @shapevalue = label\n  #     @boundy = font_size\n  #     @boundx = @shapevalue.length * font_size\n  #     self.update({})\n  #   end\n  #\n  #   def self.load(props)\n  #     new = self.new(props[:shapevalue], 0, 0, 0, \"Arial\", \"black\", 0, props[:element_props])\n  #     new.update(props[:shape_properties])\n  #   end\n  #\n  #   # Override x, y position so that label aligns with anchor\n  #   def get_child\n  #     s = @shape_properties.dup\n  #     av = self.get_anchor_vector('center-center')\n  #     s[:x] = av[0]\n  #     s[:y] = av[1]\n  #     Tag.new(@shape, value: @shapevalue, properties: s)\n  #   end\n  #\n  #   # auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | inherit\n  #   def vertical_alignment(alignment)\n  #     self.update('alignment-baseline' =\u003e alignment)\n  #   end\n  #\n  #   # start | middle | end | inherit\n  #   def text_anchor(alignment)\n  #     self.update('text-anchor' =\u003e alignment)\n  #   end\n  # end\n\n  # Organizes SVGElements on a grid of your choosing.\n  # Makes it easier to position elements\n  class SVGGrid \u003c SVGElement\n    attr_accessor :elements\n\n    def initialize(xnum, ynum, xspacing, yspacing, *args)\n      super(*args)\n      if @name == \"\"\n        @name = \"grid\"\n      end\n      @xnum = xnum\n      @ynum = ynum\n      @xspacing = xspacing\n      @yspacing = yspacing\n      @boundx = self.boundx\n      @boundy = self.boundy\n      @elements = Array.new(xnum) {Array.new(ynum) {[]}} # 3d array for displaying some elements on a 2D grid\n    end\n\n    def dump\n      element_props = super\n      {\n          xspacing: @xspacing,\n          yspacing: @yspacing,\n          xnum: @xnum,\n          ynum: @ynum,\n          element_props: element_props,\n          elements: @elements\n      }\n    end\n\n    def self.load(props)\n      newgrid = SVGGrid.new(props[:xnum], props[:ynum], props[:xspacing], props[:yspacing], props[:element_props])\n      newgrid.update_elements(props[:elements])\n      newgrid\n    end\n\n    def update_elements elements\n      if elements.length != @xnum\n        raise \"Cannot update_elements. Number of rows must equal #{xnum} but was #{elements.length}\"\n      end\n\n      col_lengths = elements.map {|row| row.length}.uniq\n\n      if col_lengths.length != 1\n        raise \"Cannot update_elements. Rows have different number of columns.\"\n      end\n\n      if elements[0].length != @ynum\n        raise \"Cannot update_elements. Number of columns must equal #{@ynum} but was #{elements[0].length}\"\n      end\n\n      @elements = elements\n    end\n\n    def inst\n      self.class.load(self.dump)\n    end\n\n    # def inst\n    #   Marshal.load(Marshal.dump(self))\n    # end\n\n\n    def pos(r, c)\n      return Vector[r * @xspacing, c * @yspacing]\n    end\n\n    def abs_pos_vector(r, c)\n      v = self.pos(r, c)\n      return Vector[@xscale * v[0], @yscale * v[1]]\n    end\n\n    def grid_coor(r, c, x, y)\n      px, py = self.pos(r, c)\n      return [px + x, py + y]\n    end\n\n    def grid_elements\n      @elements.map.with_index do |row, r|\n        x = self.pos(r, 0)[0]\n        row_element = SVGElement.new(name: \"gridrow#{r}\").translate(x, 0)\n        row.each.with_index do |element, c|\n          y = pos(0, c)[1]\n          col_element = SVGElement.new(name: \"gridcol#{c}\").translate(0, y)\n          col_element.children = element\n\n          # don't add empty columns\n          if not element.nil? and not element == \"\" and not element == []\n            row_element.add_child(col_element)\n          end\n        end\n\n        # don't add empty rows\n        row_element unless row_element.children.empty?\n      end.compact\n    end\n\n    def children\n      children = @children.dup\n      grid_elements = self.grid_elements\n      grid_elements + children\n    end\n\n    def group_children id: nil, classname: nil\n      raise \"Cannot group children of a SVGGrid. Group using '.g' before grouping children\"\n    end\n\n    def add(element, x, y)\n      xfloor = x.floor\n      xrem = (x - xfloor).round(1)\n      yfloor = y.floor\n      yrem = (y - yfloor).round(1)\n\n      if xrem \u003e 0 or yrem \u003e 0\n        element = element.g(id: \"gridshift\").translate(xrem * @xspacing, yrem * @yspacing)\n      end\n      ele = @elements[xfloor][yfloor]\n      if ele.nil?\n        ele = []\n      end\n      ele.push(element)\n      @elements[xfloor][yfloor] = ele\n    end\n\n    # TODO: maximum width from individual elements bounding boxes...\n    def boundx\n      @xnum * @xspacing\n    end\n\n    # TODO: maximum height from individual elements bounding boxes...\n    def boundy\n      @ynum * @yspacing\n    end\n\n    # Applies the block through each element in the grid\n    def each\n      raise \"#{self.class.name}.each needs a selection block\" unless block_given?\n      @elements.each.with_index do |row, r|\n        row.each.with_index do |col, c|\n          col.each do |element|\n            Proc.new.call(element)\n          end\n        end\n      end\n    end\n\n    # Applies the block through each row, col in the grid\n    def each_pos\n      raise \"#{self.class.name}.each_pos needs a selection block\" unless block_given?\n      @elements.each.with_index do |row, r|\n        row.each.with_index do |col, c|\n          Proc.new.call(r, c)\n        end\n      end\n    end\n\n    def elements_at(r, c)\n      @elements[r][c]\n    end\n\n    def select\n      raise \"#{self.class.name}.select needs a selection block\" unless block_given?\n      selected = []\n      @elements.each.with_index do |row, r|\n        row.each.with_index do |col, c|\n          if Proc.new.call(r, c)\n            selected.push(col)\n          end\n        end\n      end\n      return selected\n    end\n\n    # def add_each_pos\n    #   raise \"#{self.class.name}.add_each_pos needs a selection block\" unless block_given?\n    #   @elements.each.with_index do |row, r|\n    #     row.each.with_index do |col, c|\n    #       new_element = Proc.new.call(r, c)\n    #       self.add(new_element, r, c)\n    #     end\n    #   end\n    # end\n\n    # return a copy of this grid with grid dots\n    def griddots\n      dot = Tag.new('circle', properties: {r: 3})\n      inst = self.inst\n      inst.each_pos do |r, c|\n        inst.add(dot, r, c)\n      end\n      inst\n    end\n  end\n\n  module MyGraphics\n    attr_reader :tube, :openlid, :closedlid, :closedtube, :opentube, :detection_strip, :strip, :striplabel\n\n    # bounding box for tube elements\n    @@tubebb = SVGElement.new(boundx: 78.35, boundy: 242.95)\n\n    def rarrow\n      arrow = SVGElement.new(boundx: 33.48, boundy: 38.65)\n      arrow.new_class!(\"rarrow\")\n      arrow.add_child('\u003cpolygon points=\"0,0 33.477,19.328 0,38.655 \"/\u003e')\n    end\n\n    def larrow\n      self.rarrow.mirror_horizontal.new_class(\"larrow\")\n    end\n\n    def uparrow\n      arrow = SVGElement.new(boundx: 38.65, boundy: 33.48)\n      arrow.new_class!(\"uparrow\")\n      arrow.add_child('\u003cpolygon points=\"0,33.477 19.328,0 38.655,33.477 \"/\u003e')\n    end\n\n    def downarrow\n      self.uparrow.mirror_vertical.new_class(\"downarrow\")\n    end\n\n    def tube\n      _tube = @@tubebb.inst\n      _tube.new_class!(\"tube\")\n      _tube.add_child(\u003c\u003cEOF\n      \u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M4.75,99.697v45.309l14.998,90.066\n        c0,4.35,5.036,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V99.697H4.75z\"/\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M61.998,95.697c0,2.199-1.799,4-4,4h-54c-2.2,0-4-1.801-4-4v-1.875c0-2.201,1.8-4,4-4h54\n          c2.201,0,4,1.799,4,4V95.697z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M61.998,95.697c0,2.199-1.799,4-4,4h-54c-2.2,0-4-1.801-4-4v-1.875\n          c0-2.201,1.8-4,4-4h54c2.201,0,4,1.799,4,4V95.697z\"/\u003e\n      \u003c/g\u003e\nEOF\n      )\n      # \u003cline fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"7.721\" y1=\"123.572\" x2=\"53.387\" y2=\"123.572\"/\u003e\n      _tube.inst\n    end\n\n    def tube2mL\n      _tube = @@tubebb.inst\n      _tube.new_class!(\"tube\")\n      _tube.add_child(\u003c\u003cEOF\n        \t\u003cg id=\"2mLTube\"\u003e\n\t\t\u003cpath id=\"_x32_mLTube\" fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M57,96.698H4.503v42.581l0.479,2.704\n\t\tc-0.311,1.553-0.479,3.153-0.479,4.792v70.798c0,13.955,11.812,25.374,26.249,25.374c14.436,0,26.248-11.419,26.248-25.374v-70.798\n\t\tc0-1.639-0.17-3.239-0.48-4.792l0.48-2.704V96.698z\"/\u003e\u003c/g\u003e\nEOF\n      )\n      _tube\n    end\n\n    def closedlid\n      _closedlid = @@tubebb.inst\n      _closedlid.new_class!(\"closedlid\")\n      _closedlid.add_child(\u003c\u003cEOF\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M55.854,80.713c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n          C55.854,83.092,55.854,81.902,55.854,80.713z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M55.854,80.713c22.801,0,22.801,18.312,0,18.312\n          c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C55.854,83.092,55.854,81.902,55.854,80.713z\"/\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M10.375,101.744c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.1-0.535-2-1.188-2\n          c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.9-1.188,2\n          V101.744z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M10.375,101.744c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n          c0-1.1-0.535-2-1.188-2c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n          s-1.188,0.9-1.188,2V101.744z\"/\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M1,81.851c-0.55-0.952-0.101-1.731,1-1.731h55.473c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121\n          c0.381,1.032-0.209,1.877-1.309,1.877H5.972c-1.1,0-2.45-0.779-3-1.731L1,81.851z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M1,81.851c-0.55-0.952-0.101-1.731,1-1.731h55.473\n          c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121c0.381,1.032-0.209,1.877-1.309,1.877H5.972c-1.1,0-2.45-0.779-3-1.731L1,81.851z\"/\u003e\n      \u003c/g\u003e\n      \u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"72.809\" y1=\"92.338\" x2=\"73.953\" y2=\"92.338\"/\u003e\nEOF\n      )\n      _closedlid.inst\n    end\n\n    def openlid\n      _openlid = @@tubebb.inst\n      _openlid.new_class!(\"openlid\")\n      _openlid.add_child(\u003c\u003cEOF\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M72.42,77.695c-3.271,7.512-10.102,12.477-16.996,13.795c0.375,1.254,0.75,2.506,1.125,3.76\n          c17.402-5.207,26.029-24.734,18.164-41.105c-1.178,0.566-2.357,1.133-3.537,1.699C74.844,61.828,75.77,70.221,72.42,77.695z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M72.42,77.695c-3.271,7.512-10.102,12.477-16.996,13.795\n          c0.375,1.254,0.75,2.506,1.125,3.76c17.402-5.207,26.029-24.734,18.164-41.105c-1.178,0.566-2.357,1.133-3.537,1.699\n          C74.844,61.828,75.77,70.221,72.42,77.695z\"/\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M56.721,10.375c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688c1.1,0,2-0.534,2-1.188s0.9-1.188,2-1.188\n          h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188s-0.9-1.188-2-1.188H56.721z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M56.721,10.375c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688\n          c1.1,0,2-0.534,2-1.188s0.9-1.188,2-1.188h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188\n          s-0.9-1.188-2-1.188H56.721z\"/\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M76.613,1c0.953-0.55,1.732-0.1,1.732,1v55.471c0,1.1-0.846,2.311-1.877,2.69l-3.121,1.148\n          c-1.033,0.38-1.877-0.21-1.877-1.31V5.971c0-1.1,0.779-2.45,1.73-3L76.613,1z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M76.613,1c0.953-0.55,1.732-0.1,1.732,1v55.471\n          c0,1.1-0.846,2.311-1.877,2.69l-3.121,1.148c-1.033,0.38-1.877-0.21-1.877-1.31V5.971c0-1.1,0.779-2.45,1.73-3L76.613,1z\"/\u003e\n      \u003c/g\u003e\n      \u003cline fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"60.408\" y1=\"47.721\" x2=\"60.408\" y2=\"14.471\"/\u003e\nEOF\n      )\n      _openlid.inst\n    end\n\n    def opentube\n      _opentube = @@tubebb.inst\n      _opentube.new_name!(\"opentube\")\n      _opentube.add_child(self.openlid)\n      _opentube.add_child(self.tube).inst\n    end\n\n    def closedtube\n      _closedtube = @@tubebb.inst\n      _closedtube.new_name!(\"closedtube\")\n      _closedtube.add_child(self.closedlid)\n      _closedtube.add_child(self.tube).inst\n    end\n\n    def strip\n      mystrip = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      mystrip.add_child(\u003c\u003cEOF\n\u003cg id=\"Strip\"\u003e\n\t\u003cg\u003e\n\t\t\u003crect x=\"4.75\" fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"78.346\" height=\"242.948\"/\u003e\n\t\t\u003cline fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"0\" y1=\"247.448\" x2=\"4.75\" y2=\"242.948\"/\u003e\n\t\t\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"-0.067,4.777 4.75,0.001 4.75,242.948 0,247.448 \t\t\"/\u003e\n\t\t\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"74.917,247.448 0,247.448 4.75,242.948 83.096,242.948 \n\t\t\t\t\t\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003crect x=\"19.583\" y=\"49.433\" fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"46.667\" height=\"80\"/\u003e\n\t\t\u003crect x=\"27.083\" y=\"57.433\" fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"31.667\" height=\"64\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"121.433\" x2=\"19.583\" y2=\"129.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"58.75\" y1=\"121.433\" x2=\"66.25\" y2=\"129.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"58.75\" y1=\"57.433\" x2=\"66.25\" y2=\"49.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"57.433\" x2=\"19.583\" y2=\"49.433\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M57.524,216.515c0,4.385-3.693,7.938-8.249,7.938H36.557\n\t\t\tc-4.556,0-8.249-3.554-8.249-7.938v-22.164c0-4.385,3.693-7.939,8.249-7.939h12.718c4.556,0,8.249,3.554,8.249,7.939V216.515z\"/\u003e\n\t\t\u003cpath fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M52.917,213.019c0,3.002-2.528,5.435-5.647,5.435h-8.706\n\t\t\tc-3.119,0-5.647-2.433-5.647-5.435v-15.172c0-3.001,2.528-5.435,5.647-5.435h8.706c3.119,0,5.647,2.433,5.647,5.435V213.019z\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"34.01\" y1=\"216.224\" x2=\"30.27\" y2=\"221.647\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"51.823\" y1=\"216.224\" x2=\"55.562\" y2=\"221.647\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"51.823\" y1=\"194.642\" x2=\"55.023\" y2=\"188.663\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"34.01\" y1=\"194.195\" x2=\"30.27\" y2=\"189.666\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"32.917\" y1=\"205.433\" x2=\"28.308\" y2=\"205.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"52.917\" y1=\"205.433\" x2=\"57.524\" y2=\"205.433\"/\u003e\n\t\u003c/g\u003e\n\n\u003c/g\u003e\nEOF\n      )\n    end\n\n    def fluid_small\n      fluid = @@tubebb.inst\n      fluid.new_class!(\"fluid\")\n      fluid.new_name!(\"small_fluid\")\n      fluid.add_child(\u003c\u003cEOF\n      \u003cpath id=\"FluidSmall\" fill=\"#00AEEF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M44.565,216.853\n\tc-12.031,0-12.031,8.833-24.062,8.833c-0.825,0-1.589-0.045-2.309-0.122l1.584,9.509c0,4.35,5.036,7.875,11.249,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l3.031-18.202C45.063,216.862,44.821,216.853,44.565,216.853z\"/\u003e\nEOF\n      )\n    end\n\n    def fluid_medium\n      fluid = @@tubebb.inst\n      fluid.new_class!(\"fluid\")\n      fluid.new_name!(\"med_fluid\")\n      fluid.add_child(\u003c\u003cEOF\n\u003cpath id=\"FluidMedium\" fill=\"#00AEEF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M44.315,166.187\n\tc-12.031,0-12.031,8.833-24.062,8.833c-5.585,0-8.576-1.904-11.383-3.944l10.657,63.997c0,4.35,5.036,7.875,11.249,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l11.101-66.649C50.918,167.142,48.268,166.187,44.315,166.187z\"/\u003e\nEOF\n      )\n    end\n\n    def fluid_large\n      fluid = @@tubebb.inst\n      fluid.new_class!(\"fluid\")\n      fluid.new_name!(\"small_fluid\")\n      fluid.add_child(\u003c\u003cEOF\n\u003cpath id=\"FluidLarge\" fill=\"#BCE6FB\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M43.202,110.52\n\tc-12.031,0-12.031,8.833-24.062,8.833c-7.554,0-10.365-3.483-14.39-6.075v31.729l14.998,90.066c0,4.35,5.036,7.875,11.249,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l15-90.066v-28.64C53.402,113.803,50.538,110.52,43.202,110.52z\"/\u003e\nEOF\n      )\n    end\n\n    def powder\n      powder = @@tubebb.inst\n      powder.new_class!(\"powder\")\n      powder.new_name!(\"powder\")\n      powder.add_child(\u003c\u003cEOF\n         \u003cpath id=\"Powder\" fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M27.784,234.289c-0.647-2.643,1.036-2.308,2.842-2.495\n\tc1.183-0.124,3.538-0.179,4.792,0.55c0.33,0.957,1.645,1.147,1.775,1.945c0.106,0.649-1.18,1.446-1.407,1.983\n\tc-0.399,0.946,0.521,1.041-0.603,2.289c-0.534,0.593-2.338,1.107-3.088,1.463c-0.073,0.265-0.021,0.495-0.09,0.763\n\tc-1.498,0.401-7.79-0.416-4.875-2.518c-1.888-1.042-0.182-4.734,1.506-4.551\"/\u003e\nEOF\n      )\n    end\n\n    def striplabel\n      mylabel = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      mylabel.add_child(\u003c\u003cEOF\n\u003cg id=\"StripLabel\" class=\"fluid\"\u003e\n\t\u003crect x=\"4.75\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"78.346\" height=\"46.433\"/\u003e\n\u003c/g\u003e\nEOF\n      )\n    end\n\n    def detection_strip\n      mystrip = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      mystrip.add_child(self.strip)\n      mystrip.add_child(self.striplabel)\n    end\n\n    def control_band\n      band = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      band.add_child(\u003c\u003cEOF\n\u003cline id=\"ControlBand\" fill=\"none\" stroke=\"#F7A7AB\" stroke-width=\"6\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"68.432\" x2=\"58.75\" y2=\"68.432\"/\u003e\nEOF\n      )\n    end\n\n    def wt_band\n      band = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      band.add_child(\u003c\u003cEOF\n\u003cline id=\"WTBand\" fill=\"none\" stroke=\"#F7A7AB\" stroke-width=\"6\" stroke-miterlimit=\"10\" x1=\"27.089\" y1=\"89.433\" x2=\"58.756\" y2=\"89.433\"/\u003e\nEOF\n      )\n    end\n\n    def mut_band\n      band = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      band.add_child(\u003c\u003cEOF\n\u003cline id=\"MutantBand\" fill=\"none\" stroke=\"#F7A7AB\" stroke-width=\"6\" stroke-miterlimit=\"10\" x1=\"27.089\" y1=\"111.099\" x2=\"58.756\" y2=\"111.099\"/\u003e\nEOF\n      )\n    end\n  end\n\n  ########################################################################\n  # ####\n  # ####\n  # #### GRAPHICS TESTING\n  # ####\n  # ####\n  ########################################################################\n\n\n  def save_svg(filename, svg)\n    File.write(filename, svg.to_str)\n  end\nend\n\n\n"}},{"sample_types":[{"id":72,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","field_types":[{"id":2750,"parent_id":72,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2751,"parent_id":72,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":776,"name":"OLASimple Synthetic DNA","description":"OLASimple Synthetic DNA","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-04-03T01:19:19.000-07:00","updated_at":"2019-01-04T12:30:53.000-08:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":72,"image":"","prefix":"M20OLA","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"}],"operation_type":{"name":"Assign Synthetic DNA for Kit","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"output","name":"Sample 1","sample_types":["OLASimple Sample"],"object_types":["OLASimple Synthetic DNA"],"part":false,"array":false,"routing":"S","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"number","role":"input","name":"Kit Number","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Sample 2","sample_types":["OLASimple Sample"],"object_types":["OLASimple Synthetic DNA"],"part":false,"array":false,"routing":"S","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"needs \"OLASimple/OLAConstants\"\n\nclass Protocol\n  include OLAConstants\n  \n  def main\n      \n    show do\n        title \"This protocol assigns creates two samples and assigns a kit number \" \\\n        \"for the rest of the OLASimple protocol.\"\n    end\n    \n    # do pre workflow checks\n    if operations.length \u003e 1\n        raise \"Batch size greater than 2 not supported. Please have supervisor rebatch.\" \n    end\n\n    kit_nums = operations.map { |op| op.input(\"Kit Number\").value }\n    if kit_nums.length \u003e 1\n        raise \"Multiple kits found. Please replan.\" \n    end\n    kit_num = kit_nums.first\n    \n    \n    operations.retrieve.make\n    \n    # assign pre-labels to output tubes\n    operations.running.each do |op|\n        s1 = op.output(\"Sample 1\").item\n        s1.associate(KIT_KEY, kit_num)\n        s1.associate(UNIT_KEY, \"\")\n        s1.associate(COMPONENT_KEY, \"A\")\n        s1.associate(SAMPLE_KEY, \"A\")\n        s2 = op.output(\"Sample 2\").item\n        s2.associate(KIT_KEY, kit_num)\n        s2.associate(UNIT_KEY, \"\")\n        s2.associate(COMPONENT_KEY, \"A\")\n        s2.associate(SAMPLE_KEY, \"B\")\n    end\n    \n    show do\n        title \"The next protocol is \\\"OLASimple PCR\\\".\"\n        title \"Please assign a technician to run kit #{kit_num}.\"\n        warning \"Remember, only one technician can run a kit.\"\n    end\n    \n    return {}\n    \n  end\n\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":72,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","field_types":[{"id":2750,"parent_id":72,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2751,"parent_id":72,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":763,"name":"OLA lysed blood","description":"OLA lysed blood","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":null},{"id":769,"name":"OLA Whole Blood","description":"OLA blood","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-29T09:10:02.000-07:00","updated_at":"2018-03-29T09:10:02.000-07:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":null}],"operation_type":{"name":"OLASimple Cell Lysis","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"output","name":"Lysed blood","sample_types":["OLASimple Sample"],"object_types":["OLA lysed blood"],"part":false,"array":false,"routing":"C","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"input","name":"Whole Blood","sample_types":["OLASimple Sample"],"object_types":["OLA Whole Blood"],"part":false,"array":false,"routing":"C","preferred_operation_type_id":1212,"preferred_field_type_id":10967,"choices":null},{"ftype":"number","role":"input","name":"Kit Number","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"##########################################\n#\n#\n# OLASimple EasySep\n# author: Justin Vrana\n# date: March 2018\n#\n#\n##########################################\n\nneeds \"OLASimple/OLAConstants\"\nneeds \"OLASimple/OLALib\"\nneeds \"OLASimple/OLAGraphics\"\n\n# TODO: There should be NO calculations in the show blocks\n\nclass Protocol\n  include OLAConstants\n  include OLALib\n  include OLAGraphics\n\n  ##########################################\n  # INPUT/OUTPUT\n  ##########################################\n\n  INPUT = \"Whole Blood\"\n  OUTPUT = \"Lysed blood\"\n  KIT_NUM = \"Kit Number\"\n  BLOOD_SAMPLE = \"blood sample\"\n\n  ##########################################\n  # COMPONENTS\n  ##########################################\n\n\n  BSC = \"BSC\"\n  THIS_UNIT = \"A\"\n  MAGNETIC_BEADS_COMPONENT = \"A\"\n  ANTIBODIES_COMPONENT = \"B\"\n  PBS_COMPONENT1 = \"C\"\n  RBC_COMPONENT = \"D\"\n  PBS_COMPONENT2 = \"E\"\n  CD4_LYSIS = \"F\"\n  TUBE1 = \"G\"\n  TUBE2 = \"H\"\n  TUBE3 = \"J\"\n  TUBE4 = \"K\"\n\n  PACK_HASH = {\n      \"Unit Name\" =\u003e \"A\",\n      \"Components\" =\u003e {\n          \"magnetic beads\" =\u003e \"A\",\n          \"antibodies\" =\u003e \"B\",\n          \"1X PBS 1\" =\u003e \"C\",\n          \"RBC lysis buffer\" =\u003e \"D\",\n          \"1X PBS 2\" =\u003e \"E\",\n          \"CD4 lysis buffer\" =\u003e \"F\",\n          \"sample tube 1\" =\u003e \"G\",\n          \"sample tube 2\" =\u003e \"H\",\n          \"sample tube 3\" =\u003e \"J\",\n          \"sample tube 4\" =\u003e \"K\"\n      }\n  }\n\n  def main\n    if operations.length \u003e 2\n      raise \"Batch size \u003e 2 is not supported for this protocol. Please rebatch.\"\n    end\n    operations.retrieve interactive: false\n    save_user operations\n    \n        \n    if debug\n        kit_num = rand(1..30)\n        operations.each do |op|\n            op.set_input(KIT_NUM, kit_num)\n        end\n    end\n\n    operations.each.with_index do |op, i|\n      op.temporary[:input_kit] = op.input(KIT_NUM).val.to_int\n      if op.temporary[:input_kit].nil?\n        raise \"Input kit number cannot be nil\"\n      end\n      op.temporary[:input_sample] = i + 1\n    end\n\n    operations.each do |op|\n      op.temporary[:pack_hash] = PACK_HASH\n    end\n\n    save_temporary_output_values(operations.running)\n    packages = group_packages(operations.running)\n    this_package = packages.keys.first\n    if packages.length \u003e 1\n        raise \"More than one kit is not supported by this protocol. Please rebatch.\" \n    end\n    \n    # need to save :input_kit and :input_sample\n\n    introduction\n    safety_warning\n    required_equipment\n    additional_supplies\n\n    show do\n      title \"Take package #{this_package.bold} from the #{FRIDGE} and place on the #{BENCH} in the #{BSC}\"\n    end\n\n    show do\n      title \"Open package #{this_package}\"\n      note \"There are two sub packages. Open sub packages.\"\n      note \"Arrange tubes on a plastic rack.\"\n    end\n\n    show do\n      title \"Spin down tubes\"\n      note \"There should be 9 tubes with liquid and 8 empty tubes.\"\n      note \"Centrifuge the 9 tubes with liquid for \u003cb\u003e5 seconds\u003c/b\u003e to pull down any fluid.\"\n      note \"Put tubes back on a plastic rack.\"\n    end\n\n    operations.running.each do |op|\n      op.make_item_and_alias(OUTPUT, \"sample tube 4\", INPUT)\n    end\n\n    operations.running.each do |op|\n      op.temporary[:blood_ref] = \"#{op.temporary[:input_sample]}\"\n    end\n\n    operations.running.each do |op|\n      from = \"#{op.temporary[:blood_ref]}\"\n      vol = 500\n      show do\n        title \"Add #{vol.bold}uL of whole blood to empty tube #{op.ref(\"sample tube 1\", true).bold}\"\n        note \"Close both tubes after adding.\"\n        tubeB = make_tube(opentube, \"Blood\", \"#{from}\", fluid = \"medium\", fluidclass: \"redfluid\")\n        tubeE = make_tube(opentube, [\"Empty\", \"tube\"], op.tube_label(\"sample tube 1\", true))\n        img = make_transfer(tubeB, tubeE, 250, \"#{vol}uL\", \"(#{P1000} pipette)\")\n        img.translate!(25)\n        note display_svg(img, 0.75)\n      end\n    end\n\n    show do\n      title \"Throw away blood samples\"\n      note \"Dispose of blood samples #{operations.running.map {|op| op.temporary[:blood_ref].bold}.join(', ')} into biohazard waste.\"\n    end\n\n\n    operations.running.each do |op|\n      vol = 25\n      show do\n        title \"Add #{vol.bold}uL antibodies to tube #{op.ref(\"sample tube 1\", true).bold}\"\n        note \"Close both tubes after adding.\"\n        tubeA = make_tube(opentube, \"Antibodies\", op.tube_label(\"antibodies\"), fluid = \"medium\")\n        tubeS = make_tube(opentube, [\"Sample\", \"tube\"], op.tube_label(\"sample tube 1\", true), fluid = \"medium\", fluidclass: \"redfluid\")\n        img = make_transfer(tubeA, tubeS, 250, \"#{vol}uL\", \"(#{P200} pipette)\")\n        img.translate!(25)\n        note display_svg(img, 0.75)\n      end\n    end\n    \n    show do\n        title \"Vortex magnetic beads #{operations.running.map { |op| op.ref(\"magnetic beads\").bold }.uniq.join(', ') } for 30 seconds as max speed\"\n    end\n\n    operations.running.each do |op|\n      vol = 25\n      show do\n        title \"Add #{vol.bold}uL magnetic beads to tube #{op.ref(\"sample tube 1\", true).bold}\"\n        note \"Close both tubes after adding.\"\n        tubeB = make_tube(opentube, [\"Magnetic\", \"beads\"], op.tube_label(\"magnetic beads\"), fluid = \"small\", fluidclass: \"brownfluid\")\n        tubeS = make_tube(opentube, [\"Sample\", \"tube\"], op.tube_label(\"sample tube 1\", true), fluid = \"medium\", fluidclass: \"redfluid\")\n        img = make_transfer(tubeB, tubeS, 250, \"#{vol}uL\", \"(#{P200} pipette)\")\n        img.translate!(25)\n        note display_svg(img, 0.75)\n      end\n    end\n\n    show do\n      title \"Mix blood\"\n      note \"Close tubes\"\n      note \"mix blood, antibody and magnetic bead mixture by gently pulse vortexing three times at low speed to avoid forming bubbles\"\n    end\n\n    show do\n      title \"Incubate 5 min at room temperature in plastic rack\"\n      note \"Set a 5 minute timer.\"\n      note \"Wait for 5 minute timer before continuing.\"\n    end\n\n    operations.running.each do |op|\n      vol = 1000\n      show do\n        title \"Add #{1000}uL 1X PBS to sample tube #{op.ref(\"sample tube 1\", true).bold}\"\n        warning \"Carefully mix by pipetting slowly up and down. Be careful not to overflow tube.\"\n        note \"Close both tubes after adding.\"\n        tubeP = make_tube(opentube, \"1X PBS\", op.tube_label(\"1X PBS 1\", true), fluid = \"medium\")\n        tubeS = make_tube(opentube, [\"Sample\", \"tube\"], op.tube_label(\"sample tube 1\", true), fluid = \"medium\", fluidclass: \"redfluid\")\n        img = make_transfer(tubeP, tubeS, 250, \"#{vol}uL\", \"(#{P1000} pipette)\")\n        img.translate!(25)\n        note display_svg(img, 0.75)\n        # transfer image\n      end\n    end\n\n############################################\n    # FIRST SEPARATION\n############################################\n\n    show do\n      title \"Magnetize samples\"\n\n      note \"Move tube to the magnetic rack\"\n      note \"Open tube caps\"\n      note \"Set a timer for 5 minutes\"\n      note \"Leave tubes to magnetize for 5 min at room temperature.\"\n      bullet \"Stagger the tubes so that the caps are not touching.\"\n      warning \"Image of tubes look like in a rack.\"\n    end\n\n    show do\n      title \"When timer expires, you will see dark material gathered on the side of the tube.\"\n      # annotate this in image note \"CD4+ cells are the light reddish-yellow liquid portion\"\n      warning \"before and after IMAGES\"\n    end\n\n    tubes = operations.running.map {|op| op.ref(\"sample tube 2\", true)}\n\n    show do\n      title \"Setup empty tubes #{tubes.join(', ').bold} on rack\"\n      note \"Open tubes\"\n    end\n\n    # show do\n    #   title \"Review the video below\"\n    #   note \"In the next step, you will be transfering clear fluid to empty tube TUBE #2\"\n    #   note \"You will hold the rack carefully without tilting rack\"\n    #   warning \"You must pipette slowly and away from dark portion.\"\n    #   warning \"As liquid level decreases, the dark portion will \\\"droop\\\" and settle in the bottom of the tube.\"\n    #   warning \"VIDEO\"\n    # end\n\n    operations.running.each do |op|\n      show do\n        title \"Collect clear fluid from #{op.ref(\"sample tube 1\", true)} and add to empty tube #{op.ref(\"sample tube 2\", true).bold}\"\n        note \"Use P1000 pipette set to 900uL\"\n        note \"Point tip away from the dark portion and pipette up slowly.\"\n        warning \"Do not tilt the magnetic rack.\"\n        tube = make_tube(opentube, [\"empty\", \"tube\"], op.tube_label(\"sample tube 2\", true))\n        img = make_transfer(sep_1_diagram, tube, 250, \"900uL\", \"(P1000 pipette)\")\n        img.translate!(0, -100)\n        note display_svg(img, 0.75)\n        # warning \"VIDEO HERE\"\n      end\n    end\n\n    # note \"Use pipette to transfer clear fluid to empty TUBE #2\"\n\n    # title \"Collect the clear fluid with P1000 set to 900l and transfer cell suspension to a new 2.0ml microfuge tube (TUBE #2).\"\n    # show do\n    #   warning \"IMAGE HERE\"\n    #   bullet \"Pipet slowly pointing the tip to the wall away from the magnetized red cell portion\"\n    #   bullet \"set the pipette tip just under the surface of the cell suspension (* in the image), and slowly begin to draw the liquid up, keeping the distance \"\n    #   # \"between the pipette tip and the top of the liquid constant as you draw the liquid up by slowly lowering as you draw up more volume [video 2]\"\n    #   warning \"As liquid level decreases, the dark red portion will begin to \\\"droop\\\" and settle in the bottom of the tube.\"\n    #   note \"If any clear liquid left behind, use the same pipette tip to draw as much of the non-red material as possible.\"\n    #   warning \"when drawing up the cell suspension, stop immediately if a flash of bright red appears in your pipette tip\"\n    #   warning \"image of TUBE #1 after cell suspension has been collected [image 4]\"\n    # end\n\n    # batch all steps by sample\n    \n############################################\n    # SECOND SEPARATION\n############################################\n\n    operations.running.each do |op|\n      vol = 25\n      show do\n        title \"Add #{vol.bold}uL magnetic beads to cell suspension #{op.ref(\"sample tube 2\", true).bold}\"\n        note \"Quickly vortex magnetic beads before adding.\"\n        note \"Close both tubes after adding.\"\n        note \"Pulse vortex at low speed for 3 seconds to mix.\"\n        tubeB = make_tube(opentube, [\"Magnetic\", \"beads\"], op.tube_label(\"magnetic beads\"), fluid = \"small\", fluidclass: \"brownfluid\")\n        tubeS = make_tube(opentube, [\"Sample\", \"tube\"], op.tube_label(\"sample tube 2\", true), fluid = \"large\", fluidclass: \"palefluid\")\n        img = make_transfer(tubeB, tubeS, 250, \"#{vol}uL\", \"(#{P200} pipette)\")\n        img.translate!(25)\n        note display_svg(img, 0.75)\n      end\n    end\n\n    tubes = operations.running.map {|op| op.ref(\"sample tube 2\", true)}\n    remove_tubes = operations.running.map {|op| op.ref(\"sample tube 1\", true)}\n    show do\n      title \"Incubate cell and bead mixtures for 5 min at room temperature on plastic tube rack\"\n      warning \"Do not add tubes #{tubes.join(', ')} to magnetic rack yet.\"\n      note \"Cap old tubes #{remove_tubes.join(', ').bold}, remove from magnetic rack and discard.\"\n      note \"Set timer for 5 minutes.\"\n      # timer initialize: {timer: 5}\n    end\n\n    show do\n      title \"After 5 minute incubation, add cell suspensions #{tubes.join(', ')} to magnetic rack\"\n      note \"Open caps of tubes.\"\n      note \"Magnetize for 5 min at room temperature.\"\n      note \"Set timer for 5 minutes\"\n    end\n    # [image 5] [image 6] [video 4]\n\n    operations.running.each do |op|\n      show do\n        title \"After 5 minutes, collect clear fluid from #{op.ref(\"sample tube 2\", true)} and add to empty tube #{op.ref(\"sample tube 3\", true).bold}\"\n        note \"Use P1000 pipette set to 900uL\"\n        note \"Point tip away from the dark portion and pipette up slowly.\"\n        warning \"Do not tilt the magnetic rack.\"\n        tube = make_tube(opentube, [\"empty\", \"tube\"], op.tube_label(\"sample tube 3\", true))\n        img = make_transfer(sep_2_diagram, tube, 250, \"900uL\", \"(P1000 pipette)\")\n        img.translate!(0, -100)\n        note display_svg(img, 0.75)\n        # warning \"VIDEO HERE\"\n      end\n    end\n\n############################################\n    # THIRD (FINAL) SEPARATION\n############################################\n\n\n    # show do\n    #     title \"Transfer cell suspension from 2.0ml TUBE #2 on the magnetic rack to a new 1.5ml microfuge tube (1.5ml TUBE #3) using a P1000 set to 1000l of\"\n    #     note \"use same pipet tip to collect any remaining liquid without disturbing magnetized fraction\"\n    #     bullet \"pipette along the inside of the tube farthest from the magnet\"\n    #     bullet \"magnetized material should be significantly smaller this time which means should be able to collect all liquid without disturbing magnetized portion\"\n    #     #\tvideo of collecting cell suspension [video 5]\n    # end\n    \n    operations.running.each do |op|\n      vol = 25\n      show do\n        title \"Add #{vol.bold}uL magnetic beads to cell suspension #{op.ref(\"sample tube 3\", true).bold}\"\n        note \"Quickly vortex magnetic beads before adding.\"\n        note \"Close both tubes after adding.\"\n        note \"Pulse vortex at low speed for 3 seconds to mix.\"\n        tubeB = make_tube(opentube, [\"Magnetic\", \"beads\"], op.tube_label(\"magnetic beads\"), fluid = \"small\", fluidclass: \"brownfluid\")\n        tubeS = make_tube(opentube, [\"Sample\", \"tube\"], op.tube_label(\"sample tube 3\", true), fluid = \"large\", fluidclass: \"palefluid\")\n        img = make_transfer(tubeB, tubeS, 250, \"#{vol}uL\", \"(#{P200} pipette)\")\n        img.translate!(25)\n        note display_svg(img, 0.75)\n      end\n    end\n    \n    tubes = operations.running.map {|op| op.ref(\"sample tube 3\", true)}\n    remove_tubes = operations.running.map {|op| op.ref(\"sample tube 2\", true)}\n    show do\n      title \"Incubate cell and bead mixtures for 5 min at room temperature on plastic tube rack\"\n      warning \"Do not add tubes #{tubes.join(', ')} to magnetic rack yet.\"\n      note \"Cap old tubes #{remove_tubes.join(', ').bold}, remove from magnetic rack and discard.\"\n      note \"Set timer for 5 minutes.\"\n      # timer initialize: {timer: 5}\n    end\n\n    show do\n      title \"After 5 minute incubation, add cell suspensions #{tubes.join(', ')} to magnetic rack\"\n      bullet \"This is the final separation. There should be very little cells left to separate.\"\n      note \"Open caps of tubes.\"\n      note \"Magnetize for 5 min at room temperature.\"\n      note \"Set timer for 5 minutes\"\n    end\n\n    operations.running.each do |op|\n      show do\n        title \"After 5 minutes, add all remaining fluid from #{op.ref(\"sample tube 3\", true)} and add to empty tube #{op.output_ref(OUTPUT).bold}\"\n        note \"Use P1000 pipette set to 900uL\"\n        bullet \"pipette along the inside of the tube farthest from the magnet\"\n        bullet \"magnetized material should be significantly smaller this time which means should be able to collect all liquid without disturbing magnetized portion\"\n        tube = make_tube(opentube, [\"empty\", \"tube\"], op.output_tube_label(OUTPUT))\n        img = make_transfer(sep_3_diagram, tube, 250, \"all remaining fluid\", \"(P1000 pipette)\")\n        img.translate!(0, -100)\n        note display_svg(img, 0.75)\n        # warning \"VIDEO HERE\"\n      end\n    end\n\n    # show do\n    #     title \"Transfer all remaining liquid to new 1.5ml tube (1.5ml TUBE #4) using P1000 [video 6]\"\n    #     bullet \"pipette along the inside of 1.5ml TUBE #3 farthest from the magnet\"\n    #     bullet \"1.5ml TUBE #4 now contains your final cell suspension\"\n    #     bullet \"cap and discard 1.5ml TUBE #3\"\n    # end\n\n    output_samples = operations.running.map { |op| op.output_ref(OUTPUT) }\n\n    show do\n      title \"Centrifuge #{output_samples.join(', ').bold} in a microcentrifuge to pellet cells\"\n      warning \"Remember samples are still infectious!\"\n      note \"Add samples #{output_samples.join(', ').bold} centrifuge\"\n      note \"Set centrifuge \u003cb\u003e10,000 RPM\u003c/b\u003e\"\n      note \"Centrifuge for \u003cb\u003e1.5 minutes\u003c/b\u003e\"\n      warning \"Balance tubes on opposite sides of the centrifuge\"\n      # note to say balance\n    end\n    \n    show do\n        title \"Return samples from centrifuge to BSC\"\n        warning \"Remember samples are still infectious!\"\n    end\n\n    show do\n      title \"In the BSC, remove fluid from cell pellets carefully discard supernatant fluid.\"\n      note \"Visually confirm there are cell pellets for the tubes.\"\n      bullet \"These pellets contain CD4+ cells and red blood cells\"\n      warning \"Try not to disturb cell pellet\"\n      note \"Remove the fluid from the cell pellet. Discard fluid into bleach.\"\n      warning \"Change pipette tip between samples.\"\n    end\n    \n    operations.running.each do |op|\n      vol = 1000\n      show do\n        title \"Add #{vol.bold}uL RBC lysis buffer to tube #{op.output_ref(OUTPUT).bold}\"\n        note \"Close both tubes after adding.\"\n        note \"Gently pulse vortex at low speed to resuspend the cell pellet.\"\n        tubeA = make_tube(opentube, [\"Lysis\", \"buffer\"], op.tube_label(\"RBC lysis buffer\", true), fluid = \"medium\")\n        tubeS = make_tube(opentube, [\"Red blood\", \"cell pellet\"], op.output_tube_label(OUTPUT), fluid = \"powder\", fluidclass: \"palefluid\")\n        img = make_transfer(tubeA, tubeS, 250, \"#{vol}uL\", \"(#{P1000} pipette)\")\n        img.translate!(25)\n        note display_svg(img, 0.75)\n      end\n    end\n\n    show do\n      title \"Incubate samples on a plastic rack for 3 min at room temperature to lyse red blood cells\"\n      note \"The lysis buffer will kill off red blood cells, leaving the CD4+ cells\"\n      note \"Set a timer for 3 minutes.\"\n    end\n\n    show do\n      title \"Centrifuge #{output_samples.join(', ').bold} in a microcentrifuge to pellet CD4+ cells\"\n      warning \"Remember samples are still infectious!\"\n      note \"Add samples #{output_samples.join(', ').bold} centrifuge\"\n      warning \"Balance tubes on opposite sides of the centrifuge\"\n      note \"Set centrifuge \u003cb\u003e10,000 RPM\u003c/b\u003e\"\n      note \"Centrifuge for \u003cb\u003e1.5 minutes\u003c/b\u003e\"\n    end\n    \n    show do\n        title \"Return samples to BSC and remove fluid\"\n        note \"Using #{P1000} pipette set to 900uL, remove fluid from cell pellet.\"\n        note \"Discard fluid into bleach\"\n        warning \"Change pipette tip between samples.\"\n    end\n\n    operations.running.each do |op|\n      vol = 1000\n      show do\n        title \"Add #{1000}uL 1X PBS to tube #{op.output_ref(OUTPUT).bold} to wash cells\"\n        warning \"Carefully mix by pipetting slowly up and down. Be careful not to overflow tube.\"\n        note \"Close both tubes after adding.\"\n        note \"Gently pulse vortex at low speed to resuspend cells.\"\n        tubeP = make_tube(opentube, \"1X PBS\", op.tube_label(\"1X PBS 2\", true), fluid = \"medium\")\n        tubeS = make_tube(opentube, [\"Sample\", \"tube\"], op.output_tube_label(OUTPUT), fluid = \"powder\", fluidclass: \"palefluid\")\n        img = make_transfer(tubeP, tubeS, 250, \"#{vol}uL\", \"(#{P1000} pipette)\")\n        img.translate!(25)\n        note display_svg(img, 0.75)\n        # transfer image\n      end\n    end\n\n    show do\n      title \"Centrifuge #{output_samples.join(', ').bold} in a microcentrifuge to pellet CD4+ cells\"\n      warning \"Remember samples are still infectious!\"\n      note \"Add samples #{output_samples.join(', ').bold} centrifuge\"\n      warning \"Balance tubes on opposite sides of the centrifuge\"\n      note \"Set centrifuge \u003cb\u003e10,000 RPM\u003c/b\u003e\"\n      note \"Centrifuge for \u003cb\u003e1.5 minutes\u003c/b\u003e\"\n    end\n\n    show do\n      title \"Return samples to BSC and remove all residual fluid.\"\n      note \"Use a P1000 set to 950ul to slowly draw up PBS superntant without disturbing the cell pellet.\"\n      note \"Use a P200 carefully remove all residual fluid making sure you don't touch the cells.\"\n      note \"Discard all fluid into bleach.\"\n      warning \"Cell pellet may be difficult to see, so pipette slowly to avoid disturbing cells\"\n      # warning \"video of PBS removal after 1 min at 10,000 rpm spin [video 9]\"\n    end\n\n    show do\n      title \"Contact #{SUPERVISOR} once you have reached this step.\"\n      note \"Make sure #{SUPERVISOR} adds proteinaseK to your tubes #{output_samples.join(', ').bold}.\"\n    end\n\n    show do\n      title \"Add 30l of lysis buffer/proteinaseK to tubes #{output_samples.join(', ').bold}\"\n      note \"CLose tube and gently pulse vortex three times at low speed to resuspend the cell pellet\"\n      warning \"Try not to introduce air bubbles.\"\n    end\n\n    show do\n      title \"Incubate samples for 10 min at 56C to lyse cells \"\n      note \"Add samples #{output_samples.join(', ').bold} to 56C heat block.\"\n      note \"Set a timer for 10 minutes and wait.\"\n    end\n\n    show do\n      title \"Incubate for 5 min at 95C to heat deactivate proteinase K\"\n      note \"Before adding samples, quick spin samples for 5 seconds.\"\n      note \"Add samples #{output_samples.join(', ').bold} to 95C heat block.\"\n      note \"Set a timer for 5 minutes and wait.\"\n    end\n\n    show do\n      title \"Quick spin the tubes\"\n      note \"Spin samples for a few seconds to collect lysate and any condensation at the bottom of the tube\"\n      note \"Let tube cool to room temperature and give to #{SUPERVISOR}.\"\n      # note \"Let tube cool to room temperature and proceed with PCR, or store lysate at -20C for later use.\"\n    end\n\n    show do\n      title \"Clean up Waste\"\n      bullet \"Dispose of liquid waste in bleach down the sink with running water.\"\n      bullet \"Dispose of remaining tubes into biohazard waste.\"\n    end\n\n    show do\n      title \"Clean Biosafety Cabinet\"\n      note \"Place items in the BSC off to the side.\"\n      note \"Spray down surface of BSC with 10% bleach. Wipe clean using paper towel.\"\n      note \"Spray down surface of BSC with 70% ethanol. Wipe clean using paper towel.\"\n      note \"After cleaning, dispose of gloves in biohazard waste.\"\n    end\n\n\n    # put down clean_area method here\n    # after cleaning dispose of gloves into biohazard\n    return {}\n\n  end\n\n  def save_user ops\n    ops.each do |op|\n      username = get_technician_name(self.jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def introduction\n    show do\n      title \"Welcome to OLASimple Cell Lysis\"\n\n      note \"In this protocol Blood CD4+ cells will be negatively selected and lysed. \"\n      note \"You will use magnetic beads and antibodies to separate unwanted cells using a magnet. \" \\\n          \"You will repeat the magnetic separation for a total of 3 passes until all red material is removed.\"\n      note \"The separation leaves CD4+ and red blood cells (RBC) in the suspension.\"\n      note display_svg(negative_selection_diagram, 1.0)\n    end\n\n    show do\n      title \"Welcome to OLASimple Cell Lysis\"\n      note \"After separation, target CD4+ cells containing the HIV DNA will be in the clear fluid.\"\n      note \"Unwanted red blood cells will be lysed, leaving CD+ cells.\"\n      note \"Finally, CD+ cells will be lysed to release the DNA.\"\n      note \"This DNA will be used to detect HIV mutations.\"\n    end\n  end\n\n  # TODO: add goggles?\n  def safety_warning\n    show do\n      title \"Review the safety warnings\"\n      warning \"You will be working with infectious materials.\"\n      note \"Do \u003cb\u003eALL\u003c/b\u003e work in a biosafety cabinet (#{BSC.bold})\"\n      note \"Always wear a lab coat and gloves for this protocol.\"\n      check \"Put on a lab coat and gloves now.\"\n    end\n  end\n\n  def required_equipment\n    show do\n      title \"Get required equipment\"\n      note \"You will need the following equipment in the #{BSC.bold}\"\n      materials = [\n          \"P1000 pipette and filter tips\",\n          \"P200 pipette and filter tips\",\n          \"P20 pipette and filter tips\",\n          \"magnetic rack\",\n          \"vortex mixer\",\n          \"tube rack\",\n          \"timer\",\n          \"bleach in a beaker\",\n          \"70% v/v ethanol\"\n      ]\n      materials.each do |m|\n        check m\n      end\n    end\n  end\n\n  def additional_supplies\n    show do\n      title \"Make sure heat blocks are set to 56C and 95C\"\n    end\n  end\n\n  def get_package myops\n    show do\n      title \"Get package\"\n      warning \"This step will ask tech to get the appropriate package.\"\n    end\n  end\n\n  def open_package myops\n    show do\n      title \"Open package\"\n      warning \"This step will show a picture of the materials and ask tech to verify there are the right tubes.\"\n    end\n  end\n\n  def sep_1_diagram\n    img = SVGElement.new(boundx: 113, boundy: 394)\n    img.add_child(\u003c\u003cEOF\n      \u003cg id=\"OpenLid\"\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M81.992,179.294c-3.271,7.512-10.103,12.477-16.997,13.795c0.375,1.254,0.75,2.506,1.125,3.76\n\t\t\tc17.403-5.207,26.03-24.734,18.165-41.105c-1.178,0.566-2.357,1.133-3.537,1.699C84.416,163.427,85.342,171.819,81.992,179.294z\"\n\t\t\t/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M81.992,179.294c-3.271,7.512-10.103,12.477-16.997,13.795\n\t\t\tc0.375,1.254,0.75,2.506,1.125,3.76c17.403-5.207,26.03-24.734,18.165-41.105c-1.178,0.566-2.357,1.133-3.537,1.699\n\t\t\tC84.416,163.427,85.342,171.819,81.992,179.294z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M66.292,111.973c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688c1.1,0,2-0.535,2-1.188\n\t\t\tc0-0.654,0.9-1.188,2-1.188h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188s-0.9-1.188-2-1.188\n\t\t\tH66.292z\"/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M66.292,111.973c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688\n\t\t\tc1.1,0,2-0.535,2-1.188c0-0.654,0.9-1.188,2-1.188h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188\n\t\t\ts-0.9-1.188-2-1.188H66.292z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M86.186,102.598c0.953-0.55,1.732-0.1,1.732,1v55.471c0,1.1-0.846,2.311-1.877,2.689l-3.121,1.148\n\t\t\tc-1.033,0.381-1.877-0.209-1.877-1.309v-54.03c0-1.1,0.779-2.45,1.73-3L86.186,102.598z\"/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M86.186,102.598c0.953-0.55,1.732-0.1,1.732,1v55.471\n\t\t\tc0,1.1-0.846,2.311-1.877,2.689l-3.121,1.148c-1.033,0.381-1.877-0.209-1.877-1.309v-54.03c0-1.1,0.779-2.45,1.73-3\n\t\t\tL86.186,102.598z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cline fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"69.979\" y1=\"149.319\" x2=\"69.979\" y2=\"116.069\"/\u003e\n\u003c/g\u003e\n\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M18.856,196.703v45.309l14.998,90.066c0,4.35,5.037,7.875,11.25,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l15-90.066v-45.309H18.856z\"/\u003e\n\u003crect x=\"74.021\" y=\"196.849\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M45.104,340.362c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tv-20.619c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C33.854,336.837,38.891,340.362,45.104,340.362z\"/\u003e\n\u003c/g\u003e\n\u003ctext transform=\"matrix(1 0 0 1 11.3271 382.2627)\" font-family=\"'MyriadPro-Regular'\" font-size=\"25\"\u003eAvoid\u003c/text\u003e\n\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"28.413,242.103 21.005,240.936 42.632,10.692 \n\t76.217,15.988 \"/\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F1F2F2\" d=\"M76.104,192.703c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875c0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V192.703z\n\t\t\"/\u003e\n\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M76.104,192.703c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875\n\t\tc0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V192.703z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath id=\"smallgoop_1_\" fill=\"#BE1E2D\" d=\"M58.038,318.527c-0.48,0.29-0.853,0.667-1.167,1.104\n\t\tc-0.286,0.446-0.544,0.889-0.791,1.329c-0.345,0.425-0.624,0.832-0.864,1.229c-0.991,1.92-1.5,3.797-3.802,6.113\n\t\tc-0.326,0.24-0.664,0.473-1.014,0.702c-1.255,0.63-3.409,1.163-3.962,1.811c-0.864,0.87,0.737,0.984,2.856,0.351\n\t\tc2.816-0.787,5.354-1.938,7.215-3.107c0.564-0.939,0.878-1.972,0.878-3.055l1.118-6.713\n\t\tC58.341,318.363,58.183,318.44,58.038,318.527z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath id=\"mediumgoop_1_\" fill=\"#BE1E2D\" d=\"M62.865,284.622c-1.722-0.176-2.978,0.252-3.904,1.139\n\t\tc-0.927,0.885-1.526,2.229-1.938,3.883c-0.338,1.717-0.611,3.434-0.859,5.154c-0.497,1.574-0.849,3.123-1.115,4.66\n\t\tc-0.877,7.564-0.631,15.314-4.343,23.576c-0.596,0.789-1.225,1.533-1.886,2.254c-2.521,1.754-7.274,2.385-8.095,4.764\n\t\tc-1.395,3.105,2.541,4.854,7.132,3.756c3.25-0.641,6.229-1.791,8.848-3.264c0.022-0.203,0.044-0.406,0.044-0.613l7.516-45.127\n\t\tC63.821,284.724,63.36,284.657,62.865,284.622z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\u003cpath id=\"largegoop_1_\" fill=\"#BE1E2D\" d=\"M70.233,227.925c-0.539-0.592-1.101-1.156-1.7-1.677\n\t\tc-2.18-1.891-4.767-3.295-7.818-4.106c-3.108-0.959-5.194-0.299-6.55,1.576c-1.355,1.877-1.983,4.971-2.176,8.881\n\t\tc-0.043,4.081,0.029,8.187,0.148,12.31c-0.371,3.683-0.492,7.357-0.467,11.022c0.897,18.184,3.846,37.165-0.056,56.177\n\t\tc-0.8,1.744-1.673,3.365-2.61,4.925c-3.899,3.502-12.119,3.583-12.802,9.137c-1.465,7.144,6.075,12.614,13.855,11.348\n\t\tc1.231-0.126,2.429-0.324,3.597-0.573c0.996-1.113,1.578-2.408,1.578-3.796l15-85.266V227.925z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpolygon stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"52.353,334.137 44.153,331.308 50.704,323.193 \t\"/\u003e\n\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"3\" stroke-miterlimit=\"10\" x1=\"48.61\" y1=\"331.569\" x2=\"41.199\" y2=\"361.209\"/\u003e\n\u003c/g\u003e\nEOF\n    )\n    img\n  end\n\n  def sep_2_diagram\n    img = SVGElement.new(boundx: 113, boundy: 394)\n    img.add_child(\u003c\u003cEOF\n      \u003cg id=\"OpenLid\"\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M81.992,179.294c-3.271,7.512-10.103,12.477-16.997,13.795c0.375,1.254,0.75,2.506,1.125,3.76\n\t\t\tc17.403-5.207,26.03-24.734,18.165-41.105c-1.178,0.566-2.357,1.133-3.537,1.699C84.416,163.427,85.342,171.819,81.992,179.294z\"\n\t\t\t/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M81.992,179.294c-3.271,7.512-10.103,12.477-16.997,13.795\n\t\t\tc0.375,1.254,0.75,2.506,1.125,3.76c17.403-5.207,26.03-24.734,18.165-41.105c-1.178,0.566-2.357,1.133-3.537,1.699\n\t\t\tC84.416,163.427,85.342,171.819,81.992,179.294z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M66.292,111.973c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688c1.1,0,2-0.535,2-1.188\n\t\t\tc0-0.654,0.9-1.188,2-1.188h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188s-0.9-1.188-2-1.188\n\t\t\tH66.292z\"/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M66.292,111.973c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688\n\t\t\tc1.1,0,2-0.535,2-1.188c0-0.654,0.9-1.188,2-1.188h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188\n\t\t\ts-0.9-1.188-2-1.188H66.292z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M86.186,102.598c0.953-0.55,1.732-0.1,1.732,1v55.471c0,1.1-0.846,2.311-1.877,2.689l-3.121,1.148\n\t\t\tc-1.033,0.381-1.877-0.209-1.877-1.309v-54.03c0-1.1,0.779-2.45,1.73-3L86.186,102.598z\"/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M86.186,102.598c0.953-0.55,1.732-0.1,1.732,1v55.471\n\t\t\tc0,1.1-0.846,2.311-1.877,2.689l-3.121,1.148c-1.033,0.381-1.877-0.209-1.877-1.309v-54.03c0-1.1,0.779-2.45,1.73-3\n\t\t\tL86.186,102.598z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cline fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"69.979\" y1=\"149.319\" x2=\"69.979\" y2=\"116.069\"/\u003e\n\u003c/g\u003e\n\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M18.856,196.703v45.309l14.998,90.066c0,4.35,5.037,7.875,11.25,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l15-90.066v-45.309H18.856z\"/\u003e\n\u003crect x=\"74.021\" y=\"196.849\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M45.104,340.362c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tv-20.619c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C33.854,336.837,38.891,340.362,45.104,340.362z\"/\u003e\n\u003c/g\u003e\n\u003ctext transform=\"matrix(1 0 0 1 11.3271 382.2627)\" font-family=\"'MyriadPro-Regular'\" font-size=\"25\"\u003eAvoid\u003c/text\u003e\n\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"28.413,242.103 21.005,240.936 42.632,10.692 \n\t76.217,15.988 \"/\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F1F2F2\" d=\"M76.104,192.703c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875c0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V192.703z\n\t\t\"/\u003e\n\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M76.104,192.703c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875\n\t\tc0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V192.703z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath id=\"mediumgoop_1_\" fill=\"#BE1E2D\" d=\"M62.865,284.622c-1.722-0.176-2.978,0.252-3.904,1.139\n\t\tc-0.927,0.885-1.526,2.229-1.938,3.883c-0.338,1.717-0.611,3.434-0.859,5.154c-0.497,1.574-0.849,3.123-1.115,4.66\n\t\tc-0.877,7.564-0.631,15.314-4.343,23.576c-0.596,0.789-1.225,1.533-1.886,2.254c-2.521,1.754-7.274,2.385-8.095,4.764\n\t\tc-1.395,3.105,2.541,4.854,7.132,3.756c3.25-0.641,6.229-1.791,8.848-3.264c0.022-0.203,0.044-0.406,0.044-0.613l7.516-45.127\n\t\tC63.821,284.724,63.36,284.657,62.865,284.622z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpolygon stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"52.353,334.137 44.153,331.308 50.704,323.193 \t\"/\u003e\n\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"3\" stroke-miterlimit=\"10\" x1=\"48.61\" y1=\"331.569\" x2=\"41.199\" y2=\"361.209\"/\u003e\n\u003c/g\u003e\nEOF\n    )\n    img\n  end\n\n  def sep_3_diagram\n    img = SVGElement.new(boundx: 113, boundy: 394)\n    img.add_child(\u003c\u003cEOF\n      \u003cg id=\"OpenLid\"\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M81.992,179.294c-3.271,7.512-10.103,12.477-16.997,13.795c0.375,1.254,0.75,2.506,1.125,3.76\n\t\t\tc17.403-5.207,26.03-24.734,18.165-41.105c-1.178,0.566-2.357,1.133-3.537,1.699C84.416,163.427,85.342,171.819,81.992,179.294z\"\n\t\t\t/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M81.992,179.294c-3.271,7.512-10.103,12.477-16.997,13.795\n\t\t\tc0.375,1.254,0.75,2.506,1.125,3.76c17.403-5.207,26.03-24.734,18.165-41.105c-1.178,0.566-2.357,1.133-3.537,1.699\n\t\t\tC84.416,163.427,85.342,171.819,81.992,179.294z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M66.292,111.973c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688c1.1,0,2-0.535,2-1.188\n\t\t\tc0-0.654,0.9-1.188,2-1.188h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188s-0.9-1.188-2-1.188\n\t\t\tH66.292z\"/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M66.292,111.973c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688\n\t\t\tc1.1,0,2-0.535,2-1.188c0-0.654,0.9-1.188,2-1.188h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188\n\t\t\ts-0.9-1.188-2-1.188H66.292z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" d=\"M86.186,102.598c0.953-0.55,1.732-0.1,1.732,1v55.471c0,1.1-0.846,2.311-1.877,2.689l-3.121,1.148\n\t\t\tc-1.033,0.381-1.877-0.209-1.877-1.309v-54.03c0-1.1,0.779-2.45,1.73-3L86.186,102.598z\"/\u003e\n\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M86.186,102.598c0.953-0.55,1.732-0.1,1.732,1v55.471\n\t\t\tc0,1.1-0.846,2.311-1.877,2.689l-3.121,1.148c-1.033,0.381-1.877-0.209-1.877-1.309v-54.03c0-1.1,0.779-2.45,1.73-3\n\t\t\tL86.186,102.598z\"/\u003e\n\t\u003c/g\u003e\n\t\u003cline fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"69.979\" y1=\"149.319\" x2=\"69.979\" y2=\"116.069\"/\u003e\n\u003c/g\u003e\n\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M18.856,196.703v45.309l14.998,90.066c0,4.35,5.037,7.875,11.25,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l15-90.066v-45.309H18.856z\"/\u003e\n\u003crect x=\"74.021\" y=\"196.849\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M45.104,340.362c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tv-20.619c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C33.854,336.837,38.891,340.362,45.104,340.362z\"/\u003e\n\u003c/g\u003e\n\u003ctext transform=\"matrix(1 0 0 1 11.3271 382.2627)\" font-family=\"'MyriadPro-Regular'\" font-size=\"25\"\u003eAvoid\u003c/text\u003e\n\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"28.413,242.103 21.005,240.936 42.632,10.692 \n\t76.217,15.988 \"/\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F1F2F2\" d=\"M76.104,192.703c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875c0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V192.703z\n\t\t\"/\u003e\n\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M76.104,192.703c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875\n\t\tc0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V192.703z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath id=\"smallgoop_1_\" fill=\"#BE1E2D\" d=\"M58.038,318.527c-0.48,0.29-0.853,0.667-1.167,1.104\n\t\tc-0.286,0.446-0.544,0.889-0.791,1.329c-0.345,0.425-0.624,0.832-0.864,1.229c-0.991,1.92-1.5,3.797-3.802,6.113\n\t\tc-0.326,0.24-0.664,0.473-1.014,0.702c-1.255,0.63-3.409,1.163-3.962,1.811c-0.864,0.87,0.737,0.984,2.856,0.351\n\t\tc2.816-0.787,5.354-1.938,7.215-3.107c0.564-0.939,0.878-1.972,0.878-3.055l1.118-6.713\n\t\tC58.341,318.363,58.183,318.44,58.038,318.527z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpolygon stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"52.353,334.137 44.153,331.308 50.704,323.193 \t\"/\u003e\n\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"3\" stroke-miterlimit=\"10\" x1=\"48.61\" y1=\"331.569\" x2=\"41.199\" y2=\"361.209\"/\u003e\n\u003c/g\u003e\nEOF\n    )\n    img\n  end\n\nend\n","precondition":"def precondition(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[],"object_types":[],"operation_type":{"name":"OLASimple Interactive Survey","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[],"protocol":"class Protocol\n\n  def main\n\n    show do\n        title \"Thank you for taking part in the OLASimple study!\"\n        \n        note \"Please continue to take part in an interactive survey\"\n        \n    end\n    choices = \"Strongly agree\", \"Agree\", \"Neutral\", \"Disagree\", \"Strongly disagree\"\n    \n    show do\n        title \"Section: Demographics\"\n        get \"text\", var: \"age\", label: \"What is your age?\", default: 50\n        select [\"male\", \"female\", \"none\"], var: \"gender\", label: \"What is your gender?\", default: 2\n        select [\"no schooling\", \"nursery to secondary\", \"some secondary, no diploma\", \"completed secondary school or equivalent\", \n                \"some university credit, no degree\", \"trade school\", \"associate degree\", \"Bachelor's\", \"Master's\", \"Professional\", \"Doctorate\"],\n                var: \"education\", label: \"What is your highest level of education?\", default: 0\n    end\n    \n    show do\n        title \"Section: Technician Experience\"\n        get \"text\", var: \"years\", label: \"How many years of experience do you have as a lab technician?\", default: 1\n        select [\"yes\", \"no\"], var: \"hours\", label: \"Have you worked with HIV before today?\", default: 0\n        select [\"yes\", \"no\"], var: \"hours\", label: \"Have you ever performed a PCR?\", default: 0\n        select [\"yes\", \"no\"], var: \"hours\", label: \"Have you ever used a thermocycler?\", default: 0\n    end\n    \n    show do\n        title \"Section: Self Evaluation\"\n        note \"\u003cb\u003eFor each section, select from the following choices:\u003c/b\u003e\"\n        select choices, var: \"question1\", label: \"I consider myself good at pipetting\", default: 2\n        select choices, var: \"question2\", label: \"I consider myself good at laboratory techniques\", default: 2\n        select choices, var: \"question3\", label: \"I enjoy lab work\", default: 2\n    end\n    \n    show do\n        title \"Section: Kit Evaluation\"\n        note \"\u003cb\u003eFor each section, select from the following choices:\u003c/b\u003e\"\n        select choices, var: \"question1\", label: \"I found the kit to be easy\", default: 2\n        select choices, var: \"question2\", label: \"I found the instructions were clear\", default: 2\n        select choices, var: \"question3\", label: \"I understood the purpose of the kit\", default: 2\n        select choices, var: \"question4\", label: \"I understood the purpose of the strips\", default: 2\n    end\n    \n    show do\n        title \"Section: Digital Guidance Evaluation\"\n        note \"\u003cb\u003eFor each section, select from the following choices:\u003c/b\u003e\"\n        select choices, var: \"question1\", label: \"I found the instructions clear\", default: 2\n        select choices, var: \"question2\", label: \"I thought the digital guidance was useful\", default: 2\n        select choices, var: \"question3\", label: \"I would have preferred a paper protocol over digital guidance\", default: 2\n    end\n    \n    show do\n        title \"Written Section 1\"\n        note \"\u003cb\u003eFor each section, answer the following questions\u003c/b\u003e\"\n         get \"text\", var: \"written11\", label: \"What did you like best about using this kit?\", default: \"\"\n         get \"text\", var: \"written12\", label: \"Which instruction(s) were not easy to follow? Please explain.\", default: \"\"\n         get \"text\", var: \"written13\", label: \"What advice do you have for us to make kit and instructions easier to use?\", default: \"\"\n    end\n    \n    show do\n        title \"Written Section 2\"\n        note \"\u003cb\u003eFor each section, answer the following questions\u003c/b\u003e\"\n         get \"text\", var: \"written21\", label: \"What did you like best about using the digital guidance?\", default: \"\"\n         get \"text\", var: \"written22\", label: \"Which parts of the guidance were not easy to follow?\", default: \"\"\n         get \"text\", var: \"written23\", label: \"What advice do you have for us to make the digital guidance easier to use?\", default: \"\"\n    end\n    \n    return {}\n    \n  end\n\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":72,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","field_types":[{"id":2750,"parent_id":72,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2751,"parent_id":72,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":770,"name":"OLA PCR","description":"OLA PCR","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-29T09:10:02.000-07:00","updated_at":"2019-01-04T12:34:35.000-08:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":72,"image":"","prefix":"","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"},{"id":773,"name":"OLA Ligation Stripwell","description":"OLA Ligation Stripwell","min":0,"max":1,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-29T09:10:02.000-07:00","updated_at":"2018-03-29T09:10:02.000-07:00","unit":"Well","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":1,"columns":12,"sample_type_name":null}],"operation_type":{"name":"OLASimple Ligation","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"PCR Product","sample_types":["OLASimple Sample"],"object_types":["OLA PCR"],"part":false,"array":false,"routing":"PP","preferred_operation_type_id":1251,"preferred_field_type_id":12463,"choices":null},{"ftype":"sample","role":"output","name":"Ligation Product","sample_types":["OLASimple Sample"],"object_types":["OLA Ligation Stripwell"],"part":false,"array":false,"routing":"PP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"##########################################\n#\n#\n# OLASimple Ligation\n# author: Justin Vrana\n# date: March 2018\n#\n#\n##########################################\n\n\nneeds \"OLASimple/OLAConstants\"\nneeds \"OLASimple/OLALib\"\nneeds \"OLASimple/OLAGraphics\"\n\nclass Protocol\n  include OLALib\n  include OLAGraphics\n  include OLAConstants\n\n  ##########################################\n  # INPUT/OUTPUT\n  ##########################################\n  INPUT = \"PCR Product\"\n  OUTPUT = \"Ligation Product\"\n  PACK = \"Ligation Pack\"\n  A = \"Diluent A\"\n\n\n  ##########################################\n  # TERMINOLOGY\n  ##########################################\n\n  ##########################################\n  # Protocol Specifics\n  ##########################################\n\n  AREA = POST_PCR\n\n  # for debugging\n  PREV_COMPONENT = \"B\"\n  PREV_UNIT = \"B\"\n\n  CENTRIFUGE_TIME = \"5 seconds\" # time to pulse centrifuge to pull down dried powder\n  VORTEX_TIME = \"5 seconds\" # time to pulse vortex to mix\n  TUBE_CAP_WARNING = \"Check to make sure tube caps are completely closed.\"\n\n  PACK_HASH = LIGATION_UNIT\n  LIGATION_VOLUME = PACK_HASH[\"Ligation Mix Rehydration Volume\"]  # volume to rehydrate ligation mix\n  SAMPLE_VOLUME = PACK_HASH[\"PCR to Ligation Mix Volume\"] # volume of pcr product to ligation mix\n  MATERIALS =  [\n      \"P200 pipette and filtered tips\",\n      \"P10 pipette and filtered tips\",\n      \"a spray bottle of 10% v/v bleach\",\n      \"a spray bottle of 70% v/v ethanol\",\n      \"a timer, practice how to use the timer\",\n      \"balancing tube (on rack)\",\n      \"a centrifuge\",\n      \"a vortex mixer\",\n  ]\n  COMPONENTS = PACK_HASH[\"Components\"][\"sample tubes\"]\n\n  ##########################################\n  # ##\n  # Input Restrictions:\n  # Input needs a kit, unit, components,\n  # and sample data associations to work properly\n  ##########################################\n\n  def main\n    operations.running.retrieve interactive: false\n    save_user operations\n    debug_setup(operations) if debug\n    save_temporary_input_values(operations, INPUT)\n    # save_pack_hash(operations, PACK)\n    operations.each do |op|\n      op.temporary[:pack_hash] = PACK_HASH\n    end\n    save_temporary_output_values(operations)\n    run_checks operations\n    introduction(operations.running)\n    area_preparation POST_PCR, MATERIALS, PRE_PCR\n    get_samples_from_thermocycler(operations.running)\n    get_ligation_packages(operations.running)\n    open_ligation_packages(operations.running)\n    check_for_tube_defects operations.running\n    centrifuge_samples sorted_ops.running\n    rehydrate_ligation_mix sorted_ops.running\n    vortex_and_centrifuge_samples sorted_ops.running\n    add_template sorted_ops.running\n    vortex_and_centrifuge_samples sorted_ops.running\n    cleanup sorted_ops\n    start_ligation sorted_ops.running\n    conclusion sorted_ops\n    return {}\n  end\n \n  def sorted_ops\n    operations.sort_by {|op| op.output_ref(OUTPUT)}.extend(OperationList)\n  end\n\n  def save_user ops\n    ops.each do |op|\n      username = get_technician_name(self.jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def debug_setup ops\n    # make an alias for the inputs\n    if debug\n      ops.each do |op|\n        kit_num = rand(1..60)\n        make_alias(op.input(INPUT).item, kit_num, PREV_UNIT, PREV_COMPONENT, 1)\n        # op.input(PACK).item.associate(KIT_KEY, kit_num)\n      end\n\n      if ops.length \u003e= 2\n        i = ops[-1].input(INPUT).item\n        alias_array = get_alias_array(i)\n        alias_array[3] = if (alias_array[3] == 1) then 2 else 1 end\n        make_alias(ops[0].input(INPUT).item, *alias_array)\n\n        # kit_num = ops[-1].input(PACK).item.get(KIT_KEY)\n        # ops[0].input(PACK).item.associate(KIT_KEY, kit_num)\n      end\n    end\n  end\n\n  def run_checks myops\n    if operations.running.empty?\n      show do\n        title \"All operations have errored\"\n        note \"Contact #{SUPERVISOR}\"\n        operations.each do |op|\n          note \"#{op.errors.map {|k, v| [k, v]}}\"\n        end\n      end\n      return {}\n    end\n  end\n\n  def introduction ops\n    kit_nums = ops.map {|op| op.input(INPUT).item.get(KIT_KEY)}.uniq\n    samples = \"#{ops.length} #{\"sample\".pluralize(ops.length)}\"\n    kits = \"#{kit_nums.length} #{\"kit\".pluralize(kit_nums.length)}\"\n    username = get_technician_name(self.jid).color(\"darkblue\")\n    show do\n      title \"Welcome #{username} to OLASimple Ligation\"\n      note \"You will be running the OLASimple Ligation protocol\"\n      note \"In this protocol you will be using PCR samples from the last protocol\" \\\n            \" and adding small pieces of DNA which will allow you to detect HIV mutations.\"\n      note \"You will be running #{samples} from #{kits}.\"\n      check \"OLA Ligation is highly sensitive. Small contamination can cause false positive. Before proceed, please check with your assigner if the space and pipettes have been wiped with 10% bleach and 70% ethanol.\"\n      check \"Put on tight gloves. Tight gloves help reduce contamination risk\"\n      note \"Click \u003cb\u003eOK\u003c/b\u003e in the upper right corner to start the protocol.\"\n    end\n  end\n\n  def get_ligation_packages myops\n    gops = myops.group_by { |op| op.temporary[:output_kit_and_unit] }\n    show do\n      title \"Take #{LIG_PKG_NAME.pluralize(gops.length)} from the R1 #{FRIDGE} \"\n      gops.each do |unit, ops|\n        check \"#{PACKAGE} #{unit.bold}\"\n      end\n      check \"Place #{pluralizer(PACKAGE, gops.length)} on the #{BENCH} in the #{AREA.bold}.\"\n      check \"Put on a new pair of gloves\"\n    end\n  end\n\n  def open_ligation_packages(myops)\n    grouped_by_unit = operations.running.group_by {|op| op.temporary[:output_kit_and_unit]}\n    grouped_by_unit.each do |kit_and_unit, ops|\n      ops.each do |op|\n        op.make_collection_and_alias(OUTPUT, \"sample tubes\", INPUT)\n      end\n\n      ops.each do |op|\n        op.temporary[:label_string] = \"#{op.output_refs(OUTPUT)[0]} through #{op.output_refs(OUTPUT)[-1]}\"\n      end\n\n\n      ##################################\n      # get output collection references\n      #################################\n\n\n      show_open_package(kit_and_unit, \"\", ops.first.temporary[:pack_hash][NUM_SUB_PACKAGES_FIELD_VALUE]) do\n          tube = make_tube(closedtube, \"\", ops.first.tube_label(\"diluent A\"), \"medium\")\n          num_samples = ops.first.temporary[:pack_hash][NUM_SAMPLES_FIELD_VALUE]\n          grid = SVGGrid.new(1, num_samples, 0, 100)\n          tokens = ops.first.output_tokens(OUTPUT)\n          num_samples.times.each do |i|\n            _tokens = tokens.dup\n            _tokens[-1] = i+1\n            ligation_tubes = display_ligation_tubes(*_tokens, COLORS)\n            stripwell = ligation_tubes.g\n            grid.add(stripwell, 0, i)\n          end\n          grid.align_with(tube, 'center-right')\n          grid.align!('center-left')\n          img = SVGElement.new(children: [tube, grid], boundx: 1000, boundy: 300).translate!(30, -50)\n        note \"Check that the following tubes are in the pack:\"\n        # check \"a 1.5mL tube of #{DILUENT_A} labeled #{ops.first.ref(\"diluent A\")}\"\n        # ops.each do |op|\n        #   check \"a strip of colored tubes labeled #{op.temporary[:label_string].bold}\"\n        # end\n        note display_svg(img, 0.75)\n      end\n\n      show do\n        title \"Place strips of tubes into a rack\"\n        check \"Take #{pluralizer(\"tube strip\", ops.length)} and place them in the plastic racks\"\n      end\n    end\n  end\n\n  def centrifuge_samples ops\n    labels = ops.map {|op| op.temporary[:label_string] }\n    diluentALabels = ops.map { |op| op.ref(\"diluent A\") }.uniq\n    show do\n        title \"Centrifuge samples for 5 seconds to pull down reagents\"\n        note \"Put the tag side of the rack toward the center of the centrifuge\"\n        image \"Actions/OLA/striptubes_in_centrifuge.JPG\"\n    end\n    # centrifuge_helper(\"tube set\", labels, CENTRIFUGE_TIME,\n    #                   \"to pull down dried powder.\",\n    #                   \"There may be dried powder on the inside of the tube #{\"lid\".pluralize(labels.length)}.\")\n    # centrifuge_helper(\"tube\", diluentALabels, CENTRIFUGE_TIME,\n    #                   \"to pull down liquid.\")\n  end\n  \n  def vortex_and_centrifuge_samples ops\n         labels = ops.map {|op| op.temporary[:label_string] }\n         vortex_and_centrifuge_helper(\"tube set\", labels, CENTRIFUGE_TIME, VORTEX_TIME,\n                      \"to mix.\", \"to pull down the fluid.\")\n    show do\n        title \"Check your tubes.\" \n        check \"Dried powder of reagents should be dissolved at this point. Look on the side of the tubes to check if you see any remaining powder. If you notice any powder remains on the side, rotate the tubes while vortexing for 5 seconds and centrifuge for 5 seconds.\"\n        check \"All the tubes should have similar fluid levels. Check again if you have any cracked tubes that could cause fluid leakage. If you have a cracked tube, notify the assigner. We will replace a new tube for you.\"\n    end\n  end\n  \n  def get_samples_from_thermocycler myops\n      show do\n          title \"Retrieve PCR samples from the #{THERMOCYCLER} or freezer\"\n          check \"If your samples were stored in the freezer, get samples from the M20 freezer, 4th shelf down in the red box.Thaw samples.\"\n          check \"Else, if your samples are in the #{THERMOCYCLER}, cancel the run if the machine says \\\"hold at 4C\\\", and get your samples.\"\n          check \"Vortex and centrifuge samples for 5 seconds.\"\n      end\n  end\n\n  def rehydrate_ligation_mix myops\n    gops = myops.group_by {|op| op.temporary[:input_kit_and_unit]}\n    gops.each do |unit, ops|\n      ops.each do |op|\n        # All 5 transfers at once...\n        #   show do\n        #     title \"Add #{DILUENT_A} #{ref(op.output(A).item)} to #{LIGATION_SAMPLE}\"\n        #     labels.map! {|l| \"\u003cb\u003e#{l}\u003c/b\u003e\"}\n        #     note \"In this step we will be adding #{vol}uL of #{DILUENT_A} into #{pluralizer(\"tube\", COMPONENTS.length)} \"\n        #     \"of the colored strip of tubes labeled \u003cb\u003e#{labels[0]} to #{labels[-1]}\u003c/b\u003e\"\n        #     note \"Using a P200 or P200 pipette, add #{vol}uL from #{DILUENT_A} #{bold_ref(op.output(A).item)} into each of the #{COMPONENTS.length} tubes.\"\n        #     warning \"Only open one of the ligation tubes at a time.\"\n        #     note op.temporary[:labels]\n\n        #     ligation_tubes = display_ligation_tubes(op.temporary[:input_kit], op.temporary[:output_unit], COMPONENTS, op.temporary[:input_sample])\n        #     diluent_A = opentube.mirror_horizontal\n\n        #     note display_svg(diluentA_to_ligation_tubes(\n        # op.temporary[:input_kit], op.temporary[:output_unit], COMPONENTS, op.temporary[:input_sample],\n        # ref(op.output(A).item), vol, [], \"(each tube)\"), 0.6)\n\n        #     # t = Table.new\n        #     # t.add_column(\"Tube\", labels)\n        #     # t.add_column(\"Color\", COMPONENTS_COLOR_CODE)\n        #     # table t\n        #   end\n\n        # each transfer\n        from = op.ref(\"diluent A\")\n        ligation_tubes = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS)\n        ligation_tubes.align!('bottom-left')\n        ligation_tubes.align_with(tube, 'bottom-right')\n        ligation_tubes.translate!(50)\n        tubeA = make_tube(closedtube, DILUENT_A, op.tube_label(\"diluent A\"), \"medium\")\n        image = SVGElement.new(children: [tubeA, ligation_tubes], boundx: 1000, boundy: tube.boundy)\n        image.translate!(50, -50)\n        show do\n          title \"Position #{DILUENT_A} #{from.bold} and colored tubes #{op.temporary[:label_string].bold} in front of you.\"\n          note \"In the next steps you will dissolve the powder in #{pluralizer(\"tube\", COMPONENTS.length)} using #{DILUENT_A}\"\n          note display_svg(image, 0.75)\n        end\n        ligation_tubes_svg = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS).translate!(0, -20)\n        img = display_svg(ligation_tubes_svg, 0.7)\n        # centrifuge_helper(LIGATION_SAMPLE, op.temporary[:labels], CENTRIFUGE_TIME, \"to pull down dried powder.\", img)\n\n        labels = op.output_refs(OUTPUT)\n        labels.each.with_index do |label, i|\n          show do\n            raw transfer_title_proc(LIGATION_VOLUME, from, label)\n            # title \"Add #{LIGATION_VOLUME}uL #{DILUENT_A} #{from.bold} to #{LIGATION_SAMPLE} #{label}\n            warning \"Change pipette tip between tubes\"\n            note \"Set a #{P200} pipette to [0 2 4].\" \n            note \"Add #{LIGATION_VOLUME}uL from #{from.bold} into tube #{label.bold}\"\n            note \"Close tube #{label.bold}\"\n            tubeA = make_tube(opentube, [DILUENT_A, from], \"\", \"medium\")\n            transfer_image = transfer_to_ligation_tubes_with_highlight(\n                tubeA, i, *op.output_tokens(OUTPUT), COLORS, LIGATION_VOLUME, \"(#{P200} pipette)\")\n            note display_svg(transfer_image, 0.6)\n          end\n        end\n        # vortex_and_centrifuge_helper(LIGATION_SAMPLE,\n        #                              op.temporary[:labels],\n        #                              VORTEX_TIME,\n        #                              CENTRIFUGE_TIME,\n        #                              \"to mix well.\",\n        #                              \"to pull down liquid.\",\n        #                              img)\n\n\n        # show do\n        #   title \"Mix ligation tubes #{op.temporary[:labels][0]} through #{op.temporary[:labels][-1]}\"\n        #   note display_svg(display_ligation_tubes(op.temporary[:input_kit], THIS_UNIT, COMPONENTS, op.temporary[:input_sample]), 0.5)\n        #   warning \"Make sure tubes are firmly closed before proceeding.\"\n        #   check \"Vortex #{pluralizer(\"tube\", COMPONENTS.length)} for 5 seconds to mix well.\"\n        #   warning \"Make sure all powder is dissolved. Vortex for 10 more seconds to dissolve powder.\"\n        #   check \"Centrifuge #{pluralizer(\"tube\", COMPONENTS.length)} for 5 seconds to pull down liquid.\"\n        #   check \"Place tubes back into the rack.\"\n        # end\n      end\n    end\n\n    # vortex_and_centrifuge_helper(\"tube set\",\n    #                              myops.map { |op| op.temporary[:label_string] },\n    #                              VORTEX_TIME,\n    #                              CENTRIFUGE_TIME,\n    #                              \"to mix well.\",\n    #                              \"to pull down liquid.\")\n  end\n\n  def add_template myops\n\n    show do\n      title \"Get #{PCR_SAMPLE.pluralize(myops.length)} from #{THERMOCYCLER}\"\n      note \"If thermocycler run is complete (infinite hold at 4°C), hit cancel followed by yes. Take #{PCR_SAMPLE.pluralize(myops.length)} #{myops.map { |op| ref(op.input(INPUT).item).bold}.join(', ')} from the #{THERMOCYCLER}\"\n      note \"If they have been stored, retrieve PCR samples from M20 4th shelf down red box and thaw\"\n      check \"Position #{PCR_SAMPLE.pluralize(myops.length)} on #{BENCH} in front of you.\"\n      centrifuge_proc(PCR_SAMPLE, myops.map { |op| ref(op.input(INPUT).item) }, \"3 seconds\", \"to pull down liquid.\", balance = false)\n    end\n\n    gops = myops.group_by {|op| op.temporary[:input_kit_and_unit]}\n    gops.each do |unit, ops|\n      ops.each do |op|\n        from = op.input_ref(INPUT)\n        show do\n          title \"Position #{PCR_SAMPLE} #{from.bold} and #{LIGATION_SAMPLE.pluralize(COMPONENTS.length)} #{op.temporary[:label_string].bold} in front of you.\"\n          note \"In the next steps you will add #{PCR_SAMPLE} to #{pluralizer(\"tube\", COMPONENTS.length)}\"\n          tube = make_tube(closedtube, [PCR_SAMPLE, from], \"\", \"small\")\n          ligation_tubes = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS)\n          ligation_tubes.align!('bottom-left')\n          ligation_tubes.align_with(tube, 'bottom-right')\n          ligation_tubes.translate!(50)\n          image = SVGElement.new(children: [tube, ligation_tubes], boundx: 1000, boundy: tube.boundy)\n          image.translate!(50, -30)\n          note display_svg(image, 0.75)\n        end\n        labels = op.output_refs(OUTPUT)\n        labels.each.with_index do |label, i|\n          show do\n            raw transfer_title_proc(SAMPLE_VOLUME, from, label)\n            # title \"Add #{PCR_SAMPLE} #{from.bold} to #{LIGATION_SAMPLE} #{label}\"\n            warning \"Change of pipette tip between tubes\"\n            note \"Using a #{\"P10\"} pipette set to [0 1 2], add #{SAMPLE_VOLUME}uL from #{from.bold} into tube #{label.bold}\"\n            note \"Close tube #{label.bold}\"\n            tube = make_tube(opentube, [\"PCR Sample\"], op.input_tube_label(INPUT), \"small\").scale(0.75)\n            img = transfer_to_ligation_tubes_with_highlight(tube, i, *op.output_tokens(OUTPUT), COLORS, SAMPLE_VOLUME, \"(#{P20} pipette)\")\n            note display_svg(img, 0.6)\n          end\n        end\n\n        # ligation_tubes_svg = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS)\n        # img = display_svg(ligation_tubes_svg, 0.7)\n        # vortex_and_centrifuge_helper(LIGATION_SAMPLE,\n        #                              op.output_refs(OUTPUT),\n        #                              VORTEX_TIME,\n        #                              CENTRIFUGE_TIME,\n        #                              \"to mix well.\",\n        #                              \"to pull down liquid.\",\n        #                              img)\n      end\n    end\n  end\n\n  def start_ligation myops\n    gops = myops.group_by {|op| op.temporary[:input_kit_and_unit]}\n    ops = gops.map {|unit, ops| ops}.flatten # organize by unit\n    # show do\n    #   title \"Place #{LIGATION_SAMPLE.pluralize(COMPONENTS.length)} into #{THERMOCYCLER}\"\n    #   check \"Place #{pluralizer(LIGATION_SAMPLE, ops.length * COMPONENTS.length)} (#{ops.length} #{\"set\".pluralize(ops.length)} of #{COMPONENTS.length})\" \\\n    #     \" in the #{THERMOCYCLER}\"\n    #   check \"Close and tighten the lid.\"\n    #   ops.each do |op|\n    #     note display_svg(display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS), 0.5)\n    #   end\n    # end\n\n    add_to_thermocycler(\"sample\", ops.length * COMPONENTS.length, LIG_CYCLE, ligation_cycle_table, \"Ligation\")\n\n    show do\n      title \"Set a timer for 45 minutes\"\n      #   check \"Return to the #{PRE_PCR}.\"\n      check \"Find a timer and set it for 45 minutes. Continue to next step.\"\n    end\n  end\n\n  def ligation_cycle_table\n    t = Table.new()\n    cycles_temp = \"\u003ctable style=\\\"width:100%\\\"\u003e\n                        \u003ctr\u003e\u003ctd\u003e95C\u003c/td\u003e\u003c/tr\u003e\n                        \u003ctr\u003e\u003ctd\u003e37C\u003c/td\u003e\u003c/tr\u003e\n          \u003c/table\u003e\"\n    cycles_time = \"\u003ctable style=\\\"width:100%\\\"\u003e\n                        \u003ctr\u003e\u003ctd\u003e30 sec\u003c/td\u003e\u003c/tr\u003e\n                        \u003ctr\u003e\u003ctd\u003e4 min\u003c/td\u003e\u003c/tr\u003e\n          \u003c/table\u003e\"\n    # t.add_column(\"STEP\", [\"Initial Melt\", \"10 cycles of\", \"Hold\"])\n    t.add_column(\"TEMP\", [\"95C\", cycles_temp, \"4C\"])\n    t.add_column(\"TIME\", [\"4 min\", cycles_time, \"forever\"])\n    t\n  end\n\n  def cleanup myops\n\n    items = [INPUT].map {|x| myops.map {|op| op.input(x)}}.flatten.uniq\n    item_refs = [INPUT].map {|x| myops.map {|op| op.input_ref(x)}}.flatten.uniq\n    if KIT_NAME == \"uw kit\"\n        item_refs = [] \n    end\n    temp_items = [\"diluent A\"].map {|x| myops.map {|op| op.ref(x)}}.flatten.uniq\n\n    all_refs = temp_items + item_refs\n\n    show do\n      title \"Throw items into the #{WASTE}\"\n\n      note \"Throw the following items into the #{WASTE} in the #{AREA}\"\n      t = Table.new\n      t.add_column(\"Tube\", all_refs)\n      table t\n    end\n    # clean_area AREA\n  end\n\n  def conclusion myops\n    if KIT_NAME == \"uw kit\"\n        show do\n            title \"Please return PCR products\"\n            check \"Place #{\"sample\".pluralize(myops.length)} #{myops.map { |op| op.input_ref(INPUT) }.join(', ')} in the M20 4th shelf down in the corresponding red box labeled #{\"STORED USED 1B - 24B\".quote.bold} or #{\"STORE USED 25B - 48B\".quote.bold}.\"\n            image \"Actions/OLA/map_Klavins.svg \"\n        end\n    end\n    show do\n      title \"Thank you!\"\n      warning \"\u003ch2\u003eYou must click #{\"OK\".quote.bold} to complete the protocol\u003c/h2\u003e\"\n      check \" After clicking #{\"OK\".quote.bold}, discard your gloves and wash your hands with soap. \"\n      note \"The #{THERMOCYCLER} will be done in 50 minutes.\"\n    end\n\n  end\nend","precondition":"def precondition(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 7.5, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":72,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","field_types":[{"id":2750,"parent_id":72,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2751,"parent_id":72,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":776,"name":"OLASimple Synthetic DNA","description":"OLASimple Synthetic DNA","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-04-03T01:19:19.000-07:00","updated_at":"2019-01-04T12:30:53.000-08:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":72,"image":"","prefix":"M20OLA","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"},{"id":770,"name":"OLA PCR","description":"OLA PCR","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-29T09:10:02.000-07:00","updated_at":"2019-01-04T12:34:35.000-08:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":72,"image":"","prefix":"","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"}],"operation_type":{"name":"OLASimple PCR","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Patient Sample","sample_types":["OLASimple Sample"],"object_types":["OLASimple Synthetic DNA"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":731,"preferred_field_type_id":2803,"choices":null},{"ftype":"sample","role":"output","name":"PCR Product","sample_types":["OLASimple Sample"],"object_types":["OLA PCR"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"##########################################\n#\n#\n# OLASimple PCR\n# author: Justin Vrana\n# date: March 2018\n#\n#\n##########################################\n\nneeds \"OLASimple/OLAConstants\"\nneeds \"OLASimple/OLALib\"\nneeds \"OLASimple/OLAGraphics\"\n\n# TODO: There should be NO calculations in the show blocks\n\nclass Protocol\n  include OLAConstants\n  include OLALib\n  include OLAGraphics\n\n  ##########################################\n  # INPUT/OUTPUT\n  ##########################################\n  INPUT = \"Patient Sample\"\n  OUTPUT = \"PCR Product\"\n  PACK = \"PCR Pack\"\n  A = \"Diluent A\"\n\n  ##########################################\n  # TERMINOLOGY\n  ##########################################\n\n  ##########################################\n  # Protocol Specifics\n  ##########################################\n\n\n  # TUBE LABELS ARE DIFF FOR NUTTADA\n  # Nuttada: Introduction NO CELL LYSATE OR MENTION BLOOD (USE NONINFECTION SYNTHETIC DNA)\n  # use only P200 pipette\n  # change to P20 pipette\n  # eliminate 10% bleach / 70% ethanol\n  # eliminate timer from materials list\n  # NUTTADA: R1 fridge, name pre-pcr bench\n  # \"Tear open package. There are two section. Tear open both \"\n  # throw error if two operations have same input item\n  # change transfer images to P200\n  # centrifuge sample after vortexing (after pcr rehydration)\n  # Nuttada: cell lysate \u003e DNA sample\n\n  # Manually put in pack hash...\n  PACK_HASH = {\n      \"Unit Name\" =\u003e \"B\",\n      \"Components\" =\u003e {\n          \"sample tube\" =\u003e \"A\",\n          \"diluent A\" =\u003e \"B\"\n      },\n      \"PCR Rehydration Volume\" =\u003e 40,\n      \"Number of Samples\" =\u003e 2,\n      \"Number of Sub Packages\" =\u003e 2,\n  }\n\n  AREA = PRE_PCR\n  SAMPLE_VOLUME = 10 # volume of sample to add to PCR mix\n  PCR_MIX_VOLUME = PACK_HASH[\"PCR Rehydration Volume\"] # volume of water to rehydrate PCR mix in\n  CENTRIFUGE_TIME = \"5 seconds\" # time to pulse centrifuge to pull down dried powder\n  VORTEX_TIME = \"5 seconds\" # time to pulse vortex to mix\n\n  # for debugging\n  PREV_COMPONENT = \"K\"\n  PREV_UNIT = \"A\"\n\n\n  TUBE_CAP_WARNING = \"Check to make sure tube caps are completely closed.\"\n\n  component_to_name_hash = {\n      \"diluent A\" =\u003e \"Diluent A\",\n      \"sample tube\" =\u003e \"PCR sample\"\n  }\n\n  MATERIALS = [\n      \"P200 pipette and filtered tips\",\n      \"P20 pipette and filtered tips\",\n      \"a timer\",\n      \"nitrile gloves (wear tight gloves to reduce contamination risk)\",\n      \"pre-PCR rack\",\n      \"a balancing tube (on rack)\",\n      \"biohazard waste (red bag)\",\n      \"vortex\",\n      \"centrifuge\",\n  ]\n  \n  \n  SAMPLE_ALIAS = if KIT_NAME == \"uw kit\" then \"DNA Sample\" else CELL_LYSATE end\n\n  ##########################################\n  # ##\n  # Input Restrictions:\n  # Input needs a kit, unit, components,\n  # and sample data associations to work properly\n  ##########################################\n\n\n  def main\n\n\n    operations.running.retrieve interactive: false\n    save_user operations\n    debug_setup(operations) if debug\n    \n    if KIT_NAME == \"uw kit\"\n        if debug\n            labels = \"ABCDEF\".split('')\n            operations.each.with_index do |op, i|\n                op.input(INPUT).item.associate(SAMPLE_KEY, labels[i])  \n                op.input(INPUT).item.associate(COMPONENT_KEY, \"\")  \n            end\n        end\n    end\n    \n    save_temporary_input_values(operations, INPUT)\n    operations.each do |op|\n      op.temporary[:pack_hash] = PACK_HASH\n    end\n    save_temporary_output_values(operations)\n    \n    # reassign labels to sample numbers if uw kit\n    if KIT_NAME == \"uw kit\"\n        operations.each do |op|\n            op.temporary[:output_sample] = {\"A\"=\u003e1, \"B\"=\u003e2}[op.temporary[:output_sample]]\n        end \n    end\n    \n    run_checks operations\n    if KIT_NAME == \"uw kit\"\n        uw_kit_introduction operations.running\n    else\n        kenya_kit_introduction operations.running\n    end\n    area_preparation \"pre-PCR\", MATERIALS, POST_PCR\n    get_pcr_packages operations.running\n    open_pcr_packages operations.running\n    debug_table operations.running\n    check_for_tube_defects sorted_ops.running\n    # nuttada thaw\n    # nuttada needs vortex + centrigure\n    centrifuge_samples sorted_ops.running\n    resuspend_pcr_mix sorted_ops.running\n    add_template_to_master_mix sorted_ops.running\n    cleanup sorted_ops\n    start_thermocycler sorted_ops.running\n    conclusion sorted_ops\n    return {}\n  end # main\n\n  # end of main\n\n\n  #######################################\n  # Utilities\n  #######################################\n  def save_user ops\n    ops.each do |op|\n      username = get_technician_name(self.jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def debug_setup ops\n    # make an alias for the inputs\n    if debug\n      ops.each do |op|\n        kit_num = rand(1..60)\n        make_alias(op.input(INPUT).item, kit_num, PREV_UNIT, PREV_COMPONENT, 1)\n        # op.input(PACK).item.associate(KIT_KEY, kit_num)\n      end\n\n      if ops.length \u003e= 2\n        i = ops[-1].input(INPUT).item\n        alias_array = get_alias_array(i)\n        alias_array[3] = if (alias_array[3] == 1) then\n                           2\n                         else\n                           1\n                         end\n        make_alias(ops[0].input(INPUT).item, *alias_array)\n\n        # kit_num = ops[-1].input(PACK).item.get(KIT_KEY)\n        # ops[0].input(PACK).item.associate(KIT_KEY, kit_num)\n      end\n    end\n  end\n\n  def run_checks myops\n    if operations.running.empty?\n      show do\n        title \"All operations have errored\"\n        note \"Contact #{SUPERVISOR}\"\n        operations.each do |op|\n          note \"#{op.errors.map {|k, v| [k, v]}}\"\n        end\n      end\n      return {}\n    end\n  end\n\n  def sorted_ops\n    operations.sort_by {|op| op.output_ref(OUTPUT)}.extend(OperationList)\n  end\n\n  #######################################\n  # Instructions\n  #######################################\n \n  def uw_kit_introduction ops\n    username = get_technician_name(self.jid).color(\"darkblue\")\n    kit_nums = ops.map {|op| op.input(INPUT).item.get(KIT_KEY)}.uniq\n    samples = \"#{ops.length} #{\"sample\".pluralize(ops.length)}\"\n    kits = \"#{kit_nums.length} #{\"kit\".pluralize(kit_nums.length)}\"\n    show do\n      title \"Welcome #{username} to OLASimple PCR\"\n      note \"You will be running the OLASimple PCR protocol. In this protocol, you will start with non-infectious, synthetic DNA. \" \\\n           \"You will generate PCR products from the samples and use them later to detect HIV mutations.\"\n     check \"OLASimple PCR assay is highly sensitive. If the space is not clean, this could cause false positive. Before proceeding this step, check with your assigner if the space and pipettes have been wiped with 10% bleach and 70% ethanol\"\n      note \"You will be running #{samples} from #{kits}.\"\n      note \"Click \u003cb\u003eOK\u003c/b\u003e in the upper right corner to start the protocol.\"\n    end\n  end\n  \n  def kenya_introduction ops\n    username = get_technician_name(self.jid).color(\"darkblue\")\n    kit_nums = ops.map {|op| op.input(INPUT).item.get(KIT_KEY)}.uniq\n    samples = \"#{ops.length} #{\"sample\".pluralize(ops.length)}\"\n    kits = \"#{kit_nums.length} #{\"kit\".pluralize(kit_nums.length)}\"\n    show do\n      title \"Welcome #{username} to OLASimple PCR\"\n      note \"You will be running the OLASimple PCR protocol. In this protocol, you will start with #{CELL_LYSATE}. \" \\\n           \"You will generate PCR products from the samples and use them later to detect HIV mutations.\"\n      note \"You will be running #{samples} from #{kits}.\"\n      note \"Click \u003cb\u003eOK\u003c/b\u003e in the upper right corner to start the protocol.\"\n    end\n  end\n\n  def get_pcr_packages myops\n    # TODO: remove all references to 4C fridge and replace with refridgerator\n    gops = group_packages(myops)\n    show do\n      title \"Take #{PCR_PKG_NAME.pluralize(gops.length)} from the #{FRIDGE} R1 and place on the #{BENCH} in the #{AREA}\"\n      # check \"Take the following from the #{FRIDGE} and place #{pluralizer(PACKAGE, gops.length)} on the #{BENCH}\"\n      gops.each do |unit, ops|\n        check \"Take \" \"#{PACKAGE} #{unit.bold}\" \" from R1 fridge.\"\n        check \"Place \" \"#{PACKAGE} #{unit.bold}\" \" on the bench.\" \n        check \"Put on a new pair of gloves. R1 fridge is located in the post-PCR area so your gloves might have picked up some DNA that could contaminate your assay.\"\n      end\n    end\n  end\n\n  def open_pcr_packages myops\n    grouped_by_unit = myops.group_by {|op| op.temporary[:output_kit_and_unit]}\n    grouped_by_unit.each do |kit_and_unit, ops|\n      ops.each do |op|\n        op.make_item_and_alias(OUTPUT, \"sample tube\", INPUT)\n      end\n\n\n\n      show_open_package(kit_and_unit, \"\", ops.first.temporary[:pack_hash][NUM_SUB_PACKAGES_FIELD_VALUE]) do\n          # img\n          tube_labels = ops.map {|op| op.output_ref(OUTPUT)}\n          tube_labels += ops.map {|op| op.ref(\"diluent A\")}\n          tube_labels.uniq.sort!\n    \n          num_samples = ops.first.temporary[:pack_hash][NUM_SAMPLES_FIELD_VALUE]\n          kit, unit, component, sample = ops.first.output_tokens(OUTPUT)\n          # diluentATube = label_tube(closedtube, tube_label(kit, unit, diluentAcomponent, \"\"))\n          diluentATube = self.make_tube(closedtube, \"Diluent A\", ops.first.tube_label(\"diluent A\"), \"medium\", true)\n    \n          grid = SVGGrid.new(num_samples, 1, 75, 10)\n          num_samples.times.each do |i|\n            pcrtube = self.make_tube(closedtube, \"\", [\"#{kit}#{unit}\", \"#{component}#{i + 1}\"], \"powder\", true).scale(0.75)\n            grid.add(pcrtube, i, 0)\n          end\n          grid.boundy = closedtube.boundy * 0.75\n          grid.align_with(diluentATube, 'center-right')\n          grid.align!('center-left')\n          grid.translate!(25, 25)\n          img = SVGElement.new(children: [diluentATube, grid], boundy: diluentATube.boundy + 50, boundx: 300).translate!(20)\n        \n        check \"Look for #{num_samples + 1} #{\"tube\".pluralize(num_samples)}\" # labeled #{tube_labels.join(', ').bold}\"\n        check \"Place tubes on a rack\"\n        note display_svg(img, 0.75)\n      end\n    end\n  end\n\n  def debug_table myops\n    if debug\n      show do\n        title \"DEBUG: I/O Table\"\n\n        table myops.running.start_table\n                  .custom_column(heading: \"Input Kit\") {|op| op.temporary[:input_kit]}\n                  .custom_column(heading: \"Output Kit\") {|op| op.temporary[:output_kit]}\n                  .custom_column(heading: \"Input Unit\") {|op| op.temporary[:input_unit]}\n                  .custom_column(heading: \"Output Unit\") {|op| op.temporary[:output_unit]}\n                  .custom_column(heading: \"Diluent A\") {|op| op.ref(\"diluent A\")}\n                  .custom_column(heading: \"Input Ref\") {|op| op.input_ref(INPUT)}\n                  .custom_column(heading: \"Output Ref\") {|op| op.output_ref(OUTPUT)}\n                  .end_table\n      end\n    end\n  end\n\n  def centrifuge_samples ops\n    labels = ops.map {|op| ref(op.output(OUTPUT).item)}\n    diluentALabels = ops.map {|op| op.ref(\"diluent A\")}\n    show do\n        title \"Obtain samples from your assigner.\"\n        check \"Do the samples match your kit number?\"\n        check \"Vortex sample tubes for 5 seconds.\"\n    end\n    show do\n        title \"Centrifuge all samples for 5 seconds\" \n        check \"Place diluent A (BB), balancing tube, PCR dried reagents (BA1, BA2), and DNA samples (AA and AB) in the centrifuge. It is important to balance all the tubes.\"\n        image \"Actions/OLA/centrifuge.svg\"\n        check \"Centrifuge the tubes for 5 seconds to pull down liquid and dried reagents\"\n    end\n    # centrifuge_helper(\"sample\", labels, CENTRIFUGE_TIME,\n    #                   \"to pull down dried powder.\",\n    #                   \"There may be dried powder on the inside of the tube #{\"lid\".pluralize(labels.length)}.\")\n    # centrifuge_helper(\"tube\", diluentALabels, CENTRIFUGE_TIME,\n    #                   \"to pull down liquid.\")\n  end\n\n  def resuspend_pcr_mix myops\n    gops = group_packages(myops)\n    gops.each do |unit, ops|\n      from = ops.first.ref(\"diluent A\")\n      ops.each do |op|\n        to_item = op.output(OUTPUT).item\n        to = ref(to_item)\n        tubeA = make_tube(opentube, [DILUENT_A, from], \"\", fluid = \"medium\")\n        tubeP = make_tube(opentube, [PCR_SAMPLE, to], \"\", fluid = \"powder\").scale!(0.75)\n        img = make_transfer(tubeA, tubeP, 250, \"#{PCR_MIX_VOLUME}uL\", \"(#{P200} pipette)\")\n        img.translate!(25)\n        show do\n          raw transfer_title_proc(PCR_MIX_VOLUME, from, to)\n          # title \"Add #{PCR_MIX_VOLUME}uL from #{DILUENT_A} #{from.bold} to #{PCR_SAMPLE} #{to.bold}\"\n          note \"#{DILUENT_A} will be used to dissolve the powder in the #{PCR_SAMPLE}.\"\n          note \"Use a #{P200} pipette and set it to [0 4 0].\"\n          note \"Avoid touching the inside of the lid, as this could cause contamination. \"\n          note \"Dispose of pipette tip.\"\n          note display_svg(img, 0.75)\n        end\n      end\n\n      # TODO: add \"make sure tube caps are completely closed\" for any centrifugation or vortexing step.\n      #\n    end\n\n    labels = myops.map {|op| ref(op.output(OUTPUT).item)}\n    vortex_and_centrifuge_helper(\"sample\",\n                                 labels,\n                                 VORTEX_TIME, CENTRIFUGE_TIME,\n                                 \"to mix.\", \"to pull down liquid\", mynote = nil)\n\n  end\n\n  def add_template_to_master_mix myops\n    gops = group_packages(myops)\n\n    # # TODO: Should this be moved to the preparation area?\n    # show do\n    #   title \"Place #{SAMPLE_ALIAS.bold} samples in #{AREA.bold}.\"\n    #\n    #   note \"Place the following #{SAMPLE_ALIAS.bold} samples into a rack in the #{AREA.bold}.\"\n    #   t = Table.new\n    #   t.add_column(\"Tube\", myops.map {|op| ref(op.input(INPUT).item)})\n    #   table t\n    #   # check \"Wipe with a #{WIPE}\"\n    # end\n\n    gops.each do |unit, ops|\n      samples = ops.map {|op| op.input(INPUT).item}\n      sample_refs = samples.map {|sample| ref(sample)}\n      ops.each do |op|\n        from = ref(op.input(INPUT).item)\n        to = ref(op.output(OUTPUT).item)\n        show do\n          raw transfer_title_proc(SAMPLE_VOLUME, \"#{SAMPLE_ALIAS} #{from}\", \"#{PCR_SAMPLE} #{to}\")\n          warning \"\u003ch1\u003eLabels look very similar. Read the label three times before proceeding.\u003ch1\\\u003e\"\n          note \"Carefully open tube #{from.bold} and tube #{to.bold}\"\n          note \"Use a #{P20} pipette and set it to [1 0 0].\"\n          warning \"Close both tubes and dispose of pipette tip.\"\n          tubeS = make_tube(opentube, [SAMPLE_ALIAS, from], \"\", fluid = \"medium\")\n          tubeP = make_tube(opentube, [PCR_SAMPLE, to], \"\", fluid = \"medium\").scale!(0.75)\n          img = make_transfer(tubeS, tubeP, 250, \"#{SAMPLE_VOLUME}uL\", \"(#{P20} pipette)\")\n          img.translate!(25)\n          note display_svg(img, 0.75)\n\n        end\n\n        # show do\n        #   title \"Mix and vortex #{PCR_SAMPLE} #{to.bold}\"\n\n        #   warning TUBE_CAP_WARNING\n        #   check \"Vortex #{pluralizer(\"sample\", 1)} for #{VORTEX_TIME} to mix.\"\n        #   check \"Centrifuge #{pluralizer(\"sample\", ops.length)} for #{CENTRIFUGE_TIME} to pull down liquid.\"\n        # end\n      end\n    end\n  end\n\n  def start_thermocycler ops\n    # Adds the PCR tubes to the PCR machine.\n    # Instructions for PCR cycles.\n    #\n    samples = ops.map {|op| op.output(OUTPUT).item}\n    sample_refs = samples.map {|sample| ref(sample)}\n\n    # show do\n    #   title \"Bring #{pluralizer(PCR_SAMPLE, ops.length)} to the #{POST_PCR.bold} area\"\n    #   check \"Walk #{\"tube\".pluralize(ops.length)} #{ops.map {|op| ref(op.output(OUTPUT).item).bold}.join(', ')} to the #{POST_PCR.bold} area\"\n    #   image \"Actions/OLA/map_Klavins.svg\" if KIT_NAME == \"uw kit\"\n    # end\n\n    # END OF PRE_PCR PROTOCOL\n\n    vortex_and_centrifuge_helper(PCR_SAMPLE,\n                                 ops.map {|op| ref(op.output(OUTPUT).item)},\n                                 VORTEX_TIME, CENTRIFUGE_TIME,\n                                 \"to mix.\", \"to pull down liquid\", mynote = nil)\n\n\n    # show do\n    #   title \"Place #{PCR_SAMPLE.pluralize(ops.length)} in #{THERMOCYCLER}, close and tighten the lid.\"\n    # end\n\n    t = Table.new()\n    cycles_temp = \"\u003ctable style=\\\"width:100%\\\"\u003e\n                    \u003ctr\u003e\u003ctd\u003e95C\u003c/td\u003e\u003c/tr\u003e\n                    \u003ctr\u003e\u003ctd\u003e57C\u003c/td\u003e\u003c/tr\u003e\n                    \u003ctr\u003e\u003ctd\u003e72C\u003c/td\u003e\u003c/tr\u003e\n      \u003c/table\u003e\"\n    cycles_time = \"\u003ctable style=\\\"width:100%\\\"\u003e\n                    \u003ctr\u003e\u003ctd\u003e30 sec\u003c/td\u003e\u003c/tr\u003e\n                    \u003ctr\u003e\u003ctd\u003e30 sec\u003c/td\u003e\u003c/tr\u003e\n                    \u003ctr\u003e\u003ctd\u003e30 sec\u003c/td\u003e\u003c/tr\u003e\n      \u003c/table\u003e\"\n    t.add_column(\"STEP\", [\"Initial Melt\", \"45 cycles of\", \"Extension\", \"Hold\"])\n    t.add_column(\"TEMP\", [\"95C\", cycles_temp, \"72C\", \"4C\"])\n    t.add_column(\"TIME\", [\"4 min\", cycles_time, \"7 min\", \"forever\"])\n    \n    \n    show do\n        title \"Run PCR\"\n        check \"Talk to your assigner which thermocycler to use\"\n        check \"Close all the lids of the pipette tip boxes and pre-PCR rack\"\n        check \"Take only the PCR tubes (BA1 and BA2) with you\"\n        check \"Place the PCR samples in the assigned thermocycler, close, and tighten the lid\"\n        check \"Select the program named #{PCR_CYCLE} under OS\"\n        check \"Hit #{\"Run\".quote} and #{\"OK to 50uL\".quote}\"\n        table t\n    end\n    \n    operations.each do |op|\n      op.output(OUTPUT).item.move THERMOCYCLER\n    end\n\n    # END OF POST_PCR PCR REACTION...\n  end\n\n  def cleanup myops\n\n    items = [INPUT].map {|x| myops.map {|op| op.input(x)}}.flatten.uniq\n    item_refs = [INPUT].map {|x| myops.map {|op| op.input_ref(x)}}.flatten.uniq\n    # if KIT_NAME == \"uw kit\"\n    #     item_refs = [] \n    # end\n    temp_items = [\"diluent A\"].map {|x| myops.map {|op| op.ref(x)}}.flatten.uniq\n\n    all_refs = temp_items + item_refs\n\n    show do\n      title \"Throw items into the #{WASTE}\"\n\n      note \"Throw the following items into the #{WASTE} in the #{AREA} area\"\n      t = Table.new\n      t.add_column(\"Tube\".bold, all_refs)\n      table t\n    end\n    # clean_area AREA\n  end\n\n  def conclusion myops\n    # if KIT_NAME == \"uw kit\"\n    #     show do \n    #         title \"Please return DNA tubes\"\n    #         check \"Please return tubes #{myops.map { |op| op.input_ref(INPUT).bold}.join(', ')} to the \u003cb\u003eM20 \\\"BOX 1A-60D\\\"\u003c/b\u003e\"\n    #         image \"Actions/OLA/map_Klavins.svg \"\n    #     end\n    # end\n    show do\n      title \"Thank you!\"\n      warning \"\u003ch2\u003eYou must click #{\"OK\".quote.bold} to complete the protocol\u003c/h2\u003e\"\n      check \" After clicking #{\"OK\".quote.bold}, discard your gloves and wash your hands with soap. \"\n      note \"You may start the next protocol in 2 hours.\"\n    end\n  end\n\n\nend # Class","precondition":"def precondition(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 7.5, materials: 0 }\nend","documentation":"New Documentation\n","test":"","timing":null}},{"sample_types":[{"id":72,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","field_types":[{"id":2750,"parent_id":72,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2751,"parent_id":72,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":773,"name":"OLA Ligation Stripwell","description":"OLA Ligation Stripwell","min":0,"max":1,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-29T09:10:02.000-07:00","updated_at":"2018-03-29T09:10:02.000-07:00","unit":"Well","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":1,"columns":12,"sample_type_name":null},{"id":768,"name":"OLA Detection Strips","description":"OLA Detection STrips","min":0,"max":1,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","unit":"strip","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":1,"columns":12,"sample_type_name":null}],"operation_type":{"name":"OLASimple Paper Detection","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Ligation Product","sample_types":["OLASimple Sample"],"object_types":["OLA Ligation Stripwell"],"part":false,"array":false,"routing":"LP","preferred_operation_type_id":1252,"preferred_field_type_id":12468,"choices":null},{"ftype":"sample","role":"output","name":"Detection Strip","sample_types":["OLASimple Sample"],"object_types":["OLA Detection Strips"],"part":false,"array":false,"routing":"LP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"##########################################\n#\n#\n# OLASimple Detection\n# author: Justin Vrana\n# date: March 2018\n#\n#\n##########################################\n\nneeds \"OLASimple/OLAConstants\"\nneeds \"OLASimple/OLALib\"\nneeds \"OLASimple/OLAGraphics\"\n\nclass Protocol\n  include OLAConstants\n  include OLALib\n  include OLAGraphics\n\n#   ##########################################\n#   # INPUT/OUTPUT\n#   ##########################################\n#   F\n  INPUT = \"Ligation Product\"\n  OUTPUT = \"Detection Strip\"\n  PACK = \"Detection Pack\"\n  A = \"Diluent A\"\n  G = \"Gold Mix\"\n  S = \"Stop Mix\"\n\n#   ##########################################\n#   # TERMINOLOGY\n#   ##########################################\n\n#   ##########################################\n#   # Protocol Specifics\n#   ##########################################\n  AREA = POST_PCR\n  NUM_SUB_PACKAGES = 4\n\n#   # 6 codons,\n#   # GOLD_VOLUME = 600\n#   # STOP_VOLUME = 36\n#   # STOP_TO_SAMPLE_VOLUME = 2.4\n#   # SAMPLE_TO_STRIP_VOLUME = 24\n#   # GOLD_TO_STRIP_VOLUME = 40\n\n#   # VOLUMES WILL CHANGES FOR 6 codons!!!!\n  CENTRIFUGE_TIME = \"5 seconds\" # time to pulse centrifuge to pull down dried powder\n  VORTEX_TIME = \"5 seconds\" # time to pulse vortex to mix\n  TUBE_CAP_WARNING = \"Check to make sure tube caps are completely closed.\"\n  PACK_HASH = DETECTION_UNIT\n  STOP_VOLUME = PACK_HASH[\"Stop Rehydration Volume\"]\n  GOLD_VOLUME = PACK_HASH[\"Gold Rehydration Volume\"]\n  STOP_TO_SAMPLE_VOLUME = PACK_HASH[\"Stop to Sample Volume\"]  # volume of competitive oligos to add to sample\n  SAMPLE_TO_STRIP_VOLUME = PACK_HASH[\"Sample to Strip Volume\"] # volume of sample to add to the strips\n  GOLD_TO_STRIP_VOLUME = PACK_HASH[\"Gold to Strip Volume\"]\n  PREV_COMPONENTS = PACK_HASH[\"Components\"][\"strips\"]\n  PREV_UNIT = \"C\"\n  MATERIALS =  [\n      \"P1000 pipette and filtered tips\",\n      \"P200 pipette and filtered tips\",\n      \"P20 pipette and filtered tips\",\n      \"a spray bottle of 10% v/v bleach\",\n      \"a spray bottle of 70% v/v ethanol\",\n      \"a timer\",\n      \"nitrile gloves\"\n  ]\n\n\n##########################################\n# ##\n# Input Restrictions:\n# Input needs a kit, unit, components,\n# and sample data associations to work properly\n##########################################\n\n  def main\n    operations.each do |op|\n      op.temporary[:pack_hash] = PACK_HASH\n    end\n    save_user operations\n    operations.running.retrieve interactive: false\n    debug_setup operations\n    save_temporary_input_values(operations, INPUT)\n    save_temporary_output_values(operations)\n    introduction operations.running\n    area_preparation POST_PCR, MATERIALS, PRE_PCR\n    get_detection_packages operations.running\n    open_detection_packages operations.running\n    rehydrate_stop_solution sorted_ops.running\n    wait_for_pcr sorted_ops.running\n    stop_ligation_product sorted_ops.running\n    # short_timer\n    rehydrate_gold_solution sorted_ops.running\n    display_detection_strip_diagram\n    add_ligation_product_to_strips sorted_ops.running\n    add_gold_solution sorted_ops.running\n    read_from_scanner sorted_ops.running\n    # if KIT_NAME == \"uw kit\"\n    #     run_image_analysis operations.running \n    # end\n    cleanup sorted_ops\n    conclusion sorted_ops\n    return {\"Ok\" =\u003e 1}\n  end\n\n  def sorted_ops\n    operations.sort_by {|op| op.output_ref(OUTPUT)}.extend(OperationList)\n  end\n\n  def save_user ops\n    ops.each do |op|\n      username = get_technician_name(self.jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def debug_setup ops\n    # make an alias for the inputs\n    if debug\n      ops.each do |op|\n        kit_num = rand(1..60)\n        INPUT\n        PREV_UNIT\n        PREV_COMPONENTS\n        make_alias(op.input(INPUT).item, kit_num, PREV_UNIT, PREV_COMPONENTS, 1)\n        # op.input(PACK).item.associate(KIT_KEY, kit_num)\n      end\n\n      if ops.length \u003e= 2\n        i = ops[-1].input(INPUT).item\n        alias_array = get_alias_array(i)\n        alias_array[3] = if (alias_array[3] == 1) then 2 else 1 end\n        make_alias(ops[0].input(INPUT).item, *alias_array)\n\n        # kit_num = ops[-1].input(PACK).item.get(KIT_KEY)\n        # ops[0].input(PACK).item.associate(KIT_KEY, kit_num)\n      end\n    end\n  end\n\n  def run_checks myops\n    if operations.running.empty?\n      show do\n        title \"All operations have errored\"\n        note \"Contact #{SUPERVISOR}\"\n        operations.each do |op|\n          note \"#{op.errors.map {|k, v| [k, v]}}\"\n        end\n      end\n      return {}\n    end\n  end\n\n  def introduction myops\n    username = get_technician_name(self.jid).color(\"darkblue\")\n    show do\n      title \"Welcome #{username} to OLASimple Paper Detection procotol\"\n      note \"In this protocol you will be adding samples from the ligation protocol onto paper detection strips. \" \\\n            \"You will then scan an image of the strips and upload the image. The strips will detect whether the sample has drug resistance mutations.\"\n      check \"Put on gloves.\"      \n      note \"Click \\\"OK\\\" to start the protocol.\"\n    end\n  end\n\n  def get_detection_packages(myops)\n    gops = group_packages(myops)\n    show do\n      title \"Get #{DET_PKG_NAME.pluralize(gops.length)} from the #{FRIDGE}\"\n      gops.each do |unit, ops|\n        check \"package #{unit.bold}\"\n      end\n      check \"Place #{pluralizer(PACKAGE, gops.length)} on the bench in the #{AREA.bold} area.\"\n    end\n  end\n\n  def open_detection_packages(myops)\n    grouped_by_unit = myops.running.group_by {|op| op.temporary[:output_kit_and_unit]}\n    grouped_by_unit.each do |unit, ops|\n      ops.each do |op|\n        op.make_collection_and_alias(OUTPUT, \"strips\", INPUT)\n      end\n\n      ops.each do |op|\n        op.temporary[:label_string] = \"#{op.output_refs(OUTPUT)[0]} through #{op.output_refs(OUTPUT)[-1]}\"\n      end\n\n      #ljklakjdlkaj\n      #Ljlkj\n\n      tokens = ops.first.output_tokens(OUTPUT)\n      num_samples = ops.first.temporary[:pack_hash][NUM_SAMPLES_FIELD_VALUE]\n\n      grid = SVGGrid.new(num_samples, num_samples, 50, 50)\n      num_samples.to_int.times.each do |i|\n        _tokens = tokens.dup\n        _tokens[-1] = i + 1\n        grid.add(display_strip_panel(*_tokens, COLORS).scale!(0.5), i, i)\n      end\n\n      diluentATube = self.make_tube(closedtube, \"Diluent A\", ops.first.tube_label(\"diluent A\"), \"medium\", true).scale!(0.75)\n      stopTube = self.make_tube(closedtube, \"Stop mix\", ops.first.tube_label(\"stop\"), \"powder\", true).scale!(0.75)\n      goldTube = self.make_tube(closedtube, \"Gold mix\", ops.first.tube_label(\"gold\"), \"powder\", true, fluidclass: \"pinkfluid\").scale!(0.75)\n      diluentATube.translate!(50, 75)\n      goldTube.align_with(diluentATube, 'top-right').translate!(50)\n      stopTube.align_with(goldTube, 'top-right').translate!(50)\n      img = SVGElement.new(children: [grid, diluentATube, goldTube, stopTube], boundx: 500, boundy: 220)\n      img\n\n      show_open_package(unit, \"\", NUM_SUB_PACKAGES) do\n        note \"Check that there are the following tubes and #{STRIPS}:\"\n        note display_svg(img, 1.0)\n      end\n    end\n\n  end\n\n  def rehydrate_stop_solution myops\n    gops = group_packages(myops)\n    gops.each do |unit, ops|\n      from = ops.first.ref(\"diluent A\")\n      to = ops.first.ref(\"stop\")\n      show do\n        raw transfer_title_proc(STOP_VOLUME, from, to)\n        check \"Centrifuge tube #{to} for 5 seconds to pull down powder.\"\n        check \"Set a #{P200} pipette to [0 3 6]. Add #{STOP_VOLUME}uL from #{from.bold} into tube #{to.bold}\"\n        tubeA = make_tube(opentube, DILUENT_A, ops.first.tube_label(\"diluent A\"), \"medium\")\n        tubeS = make_tube(opentube, STOP_MIX, ops.first.tube_label(\"stop\"), \"powder\")\n        img = make_transfer(tubeA, tubeS, 200, \"#{STOP_VOLUME}uL\", \"(#{P200} pipette)\")\n        img.translate!(20)\n        note display_svg(img, 0.75)\n      end\n\n      vortex_and_centrifuge_helper(\"tube\",\n                                   [to],\n                                   VORTEX_TIME, CENTRIFUGE_TIME,\n                                   \"to mix.\", \"to pull down liquid\", mynote = nil)\n    end\n  end\n\n  def wait_for_pcr myops\n    show do\n      title \"Wait for thermocycler to finish\"\n\n      note \"The thermocycler containing the #{LIGATION_SAMPLE.pluralize(5)} needs to complete before continuing\"\n      check \"Check the #{THERMOCYCLER} to see if the samples are done.\"\n      bullet \"If the cycle is at \\\"hold at 4C\\\" then it is done. If it is done, hit CANCEL followed by YES. If not, continue waiting.\"\n      note \"Else, if your ligation sample has been stored, retrieve from M20, 4th shelf down, green box.\"\n      warning \"Do not proceed until the #{THERMOCYCLER} is finished.\"\n    end\n  end\n\n  def stop_ligation_product myops\n    gops = myops.group_by { |op| op.temporary[:output_kit_and_unit] }\n    num_tubes = myops.inject(0) { |sum, op| sum + op.output_refs(OUTPUT).length }\n    # ordered_ops = gops.map {|unit, ops| ops}.flatten.extend(OperationList) # organize by unit\n    show do\n      title \"Take #{pluralizer(\"sample\", num_tubes)} from the #{THERMOCYCLER} and place on rack in #{AREA.bold} area\"\n      check \"Centrifuge for 5 seconds to pull down liquid\"\n      check \"Place on rack in post-PCR area\"\n\n      gops.each do |unit, ops|\n        ops.each do |op|\n          note display_svg(display_ligation_tubes(*op.input_tokens(INPUT), COLORS), 0.75)\n        end\n      end\n    end\n\n    gops.each do |unit, ops|\n      from = ops.first.ref(\"stop\")\n      ops.each do |op|\n        to_labels = op.input_refs(INPUT)\n        show do\n          # title \"Get ready to add #{STOP_MIX} to #{LIGATION_SAMPLE.pluralize(MUTATIONS.length)} for #{unit}\"\n          title \"Position #{STOP_MIX} #{from.bold} and colored tubes #{op.input_refs(INPUT)[0].bold} to #{op.input_refs(INPUT)[-1].bold} in front of you.\"\n          note \"In the next steps you will add #{STOP_MIX} to #{pluralizer(\"tube\", PREV_COMPONENTS.length)}\"\n          tube = closedtube.scale(0.75)\n          tube.translate!(0, -50)\n          tube = tube.g\n          tube.g.boundx = 0\n          labeled_tube = make_tube(closedtube, STOP_MIX, op.tube_label(\"stop\"), \"medium\", true)\n          ligation_tubes = display_ligation_tubes(*op.input_tokens(INPUT), COLORS)\n          ligation_tubes.align!('bottom-left')\n          ligation_tubes.align_with(tube, 'bottom-right')\n          ligation_tubes.translate!(50)\n          image = SVGElement.new(children: [labeled_tube, ligation_tubes], boundx: 600, boundy: tube.boundy)\n          image.translate!(50)\n          image.boundy = image.boundy + 50\n          note display_svg(image, 0.75)\n        end\n\n        to_labels.each.with_index do |label, i|\n          show do\n            raw transfer_title_proc(STOP_TO_SAMPLE_VOLUME, from, label)\n            # title \"Add #{STOP_TO_SAMPLE_VOLUME}uL #{STOP_MIX} #{from.bold} to #{LIGATION_SAMPLE} #{label}\"\n            note \"Set a #{P20} pipette to [0 2 4]. Add #{STOP_TO_SAMPLE_VOLUME}uL from #{from.bold} into tube #{label.bold}\"\n            note \"Close tube #{label}.\"\n            note \"Discard pipette tip.\"\n            tubeS = make_tube(opentube, STOP_MIX, op.tube_label(\"stop\"), \"medium\")\n            transfer_image = transfer_to_ligation_tubes_with_highlight(\n                tubeS, i, *op.input_tokens(INPUT), COLORS, STOP_TO_SAMPLE_VOLUME, \"(#{P20} pipette)\")\n            note display_svg(transfer_image, 0.75)\n          end\n        end\n      end\n    end\n    \n    show do\n      title \"Vortex and centrifuge all 12 tubes for 5 seconds.\"\n      check \"Vortex for 5 seconds.\"\n      check \"Centrifuge for 5 seconds.\"\n      note \"This step is important to avoid FALSE POSITIVE.\"\n    end\n\n    t = Table.new()\n    t.add_column(\"STEP\", [\"Initial Melt\", \"Annealing\"])\n    t.add_column(\"TEMP\", [\"95C\", \"37C\"])\n    t.add_column(\"TIME\", [\"30s\", \"4 min\"])\n    add_to_thermocycler(\"tube\", myops.length * PREV_COMPONENTS.length, STOP_CYCLE, t, \"Stop Cycle\")\n  end\n\n  def short_timer\n    show do\n      title \"Set timer for 6 minutes\"\n      check \"Set a timer for 6 minutes. This will notify you when the thermocycler is done.\"\n      timer initialize: {minute: 6}\n      check \"Click the \\\"\u003cb\u003eplay\u003c/b\u003e\\\" button on the left. Proceed to next step now.\"\n    end\n  end\n\n  def display_detection_strip_diagram\n    show do\n      title \"Review detection #{STRIP} diagram\"\n      note \"In the next steps you will be adding ligation mixtures followed by the gold solutions to the detection strips.\"\n      note \"You will pipette into the \u003cb\u003ePort\u003c/b\u003e. After pipetting, you should see the \u003cb\u003eReading Window\u003c/b\u003e become wet after a few minutes.\"\n      warning \"Do not add liquid directly to the \u003cb\u003eReading Window\u003c/b\u003e\"\n      note display_svg(detection_strip_diagram, 0.75)\n    end\n  end\n\n  def add_ligation_product_to_strips myops\n    gops = group_packages(myops)\n\n    show do\n      title \"Wait for stop cycle to finish (5 minutes).\"\n      check \"Wait for the #{THERMOCYCLER} containing your samples to finish. \"\n      bullet \"If the {THERMOCYCLER} beeps, it is done. If not, continue waiting.\"\n      check \"Once the #{THERMOCYCLER} finishes, IMMEDIATELY continue to the next step.\"\n      check \"Take all #{pluralizer(\"sample\", myops.length * PREV_COMPONENTS.length)} from the #{THERMOCYCLER}.\"\n      check \"Vortex #{\"sample\".pluralize(PREV_COMPONENTS.length)} for 5 seconds to mix.\"\n      check \"Centrifuge #{\"sample\".pluralize(PREV_COMPONENTS.length)} for 5 seconds to pull down liquid\"\n      check \"Place on rack in the #{POST_PCR.bold} area.\"\n    end\n\n    timer_set = false\n    gops.each do |unit, ops|\n      ops.each do |op|\n        kit = op.temporary[:output_kit]\n        sample = op.temporary[:output_sample]\n        panel_unit = op.temporary[:output_unit]\n        tube_unit = op.temporary[:input_unit]\n        show do\n          title \"Arrange #{STRIPS} and tubes\" # for sample 1?\n          note \"Place the detection #{STRIPS} and #{LIGATION_SAMPLE.pluralize(PREV_COMPONENTS.length)} as shown in the picture:\"\n          note display_svg(display_panel_and_tubes(kit, panel_unit, tube_unit, PREV_COMPONENTS, sample, COLORS).translate!(50), 0.6)\n        end\n\n        show do\n          title \"For each colored tube, add #{SAMPLE_TO_STRIP_VOLUME}uL of #{LIGATION_SAMPLE} to the sample port of each #{STRIP}.\"\n          warning \"\u003ch2\u003eSet a 5 minute timer after adding ligation sample to \u003cb\u003eFIRST A1\u003c/b\u003e strip at the SAMPLE PORT.\u003c/h2\u003e\" unless timer_set\n          warning \"\u003ch2\u003eAdd the rest of ligation samples to the rest of strips and then immediately click OK\u003c/h2\u003e\"\n          timer_set = true\n          #   check \"Set a 5 minute timer\" unless set_timer\n          check \"Set a #{P200} pipette to [0 2 4]. Add #{SAMPLE_TO_STRIP_VOLUME}uL of \u003cb\u003eeach\u003c/b\u003e #{LIGATION_SAMPLE} to the corresponding #{STRIP}.\"\n          note \"Match the sample tube color with the #{STRIP} color. For example, match #{op.input_refs(INPUT)[0].bold} to #{op.output_refs(OUTPUT)[0].bold}\"\n        #   note \"After adding the first sample, set the timer for 5 minutes\"\n          warning \"Dispose of pipette tip and close tube after each strip.\"\n          tubes = display_ligation_tubes(*op.input_tokens(INPUT), COLORS, (0..PREV_COMPONENTS.length - 1).to_a, [], 90)\n          panel = display_strip_panel(*op.output_tokens(OUTPUT), COLORS)\n          tubes.align_with(panel, 'center-bottom')\n          tubes.align!('center-top')\n          tubes.translate!(50, -50)\n          img = SVGElement.new(children: [panel, tubes], boundy: 330, boundx: panel.boundx)\n          note display_svg(img, 0.6)\n        end\n      end\n    end\n    show do\n          title \"Check to see if strips are wetting\"\n          note \"You should see the strip become wet in reading window \"\n          note \"If strips are not wetting after 2 minutes, contact #{SUPERVISOR}\"\n          warning \"Do not continue until all strips are fully wet.\"\n     end\n\n  end\n\n  def rehydrate_gold_solution myops\n    gops = group_packages(myops)\n    gops.each do |unit, ops|\n      from = ops.first.ref(\"diluent A\")\n      to = ops.first.ref(\"gold\")\n\n      show do\n        raw transfer_title_proc(GOLD_VOLUME, from, to)\n        # title \"Add #{GOLD_VOLUME}uL of #{DILUENT_A} #{from.bold} to #{GOLD_MIX} #{to.bold}\"\n        raw centrifuge_proc(GOLD_MIX, [to], CENTRIFUGE_TIME, \"to pull down dried powder.\")\n        note \"Set a #{P1000} pipette to [ 0 6 0]. Add #{GOLD_VOLUME}uL from #{from.bold} into tube #{to.bold}.\"\n        raw vortex_proc(GOLD_MIX, [to], \"10 seconds\", \"to mix well.\")\n        warning \"Make sure #{GOLD_MIX} is fully dissolved.\"\n        warning \"Do not centrifuge #{to.bold} after vortexing.\"\n        tubeA = make_tube(opentube, DILUENT_A, ops.first.tube_label(\"diluent A\"), \"medium\")\n        tubeG = make_tube(opentube, GOLD_MIX, ops.first.tube_label(\"gold\"), \"powder\", fluidclass: \"pinkfluid\")\n        img = make_transfer(tubeA, tubeG, 200, \"#{GOLD_VOLUME}uL\", \"(#{P1000} pipette)\")\n        img.translate!(20)\n        note display_svg(img, 0.75)\n      end\n    end\n  end\n\n  def add_gold_solution myops\n    gops = group_packages(myops)\n    set_timer = false\n\n    show do\n      title \"Wait until 5 minute timer ends\"\n      warning \"Do not proceed before 5 minute timer is up.\"\n      note \"The strips need a chance to become fully wet.\"\n    end\n\n    gops.each do |unit, ops|\n        show do\n            title \"Add gold solution to #{pluralizer(STRIP, PREV_COMPONENTS.length * ops.length)}\" \n            warning \"\u003ch2\u003eSet a 10 minute timer after adding gold to \u003cb\u003eFIRST A1\u003c/b\u003e strip at the SAMPLE PORT.\u003c/h2\u003e\"\n            warning \"\u003ch2\u003e Add gold to the rest of strips and then immediately click OK.\"\n            warning \"\u003ch2\u003e DO NOT add gold solution onto the reading window.\"\n            check \"Set a #{P200} pipette to [0 4 0]. Transfer #{GOLD_TO_STRIP_VOLUME}uL of #{GOLD_MIX} #{ops.first.ref(\"gold\").bold} to #{pluralizer(STRIP, PREV_COMPONENTS.length * ops.length)}.\"\n            grid = SVGGrid.new(ops.length,  ops.length, 50, 50)\n            ops.each.with_index do |op, i|\n                _tokens = op.output_tokens(OUTPUT)\n                grid.add(display_strip_panel(*_tokens, COLORS).scale!(0.5), i, i)\n            end\n            tubeG = make_tube(opentube, GOLD_MIX, ops.first.tube_label(\"gold\"), \"medium\", fluidclass: \"pinkfluid\")\n            img = make_transfer(tubeG, grid, 200, \"#{GOLD_TO_STRIP_VOLUME}uL\", \"(each strip)\")\n            img.boundx = 900\n            img.boundy = 400\n            img.translate!(40)\n            note display_svg(img, 0.6)\n        end\n      end\n  end\n\n  def read_from_scanner myops\n    gops = group_packages(myops)\n    show do\n      title \"Bring timer and #{pluralizer(STRIP, myops.length * PREV_COMPONENTS.length)} to the #{PHOTOCOPIER}.\"\n      image \"Actions/OLA/map_Klavins.svg\" if KIT_NAME == \"uw kit\"\n    end\n    \n    show do\n      title \"Wait until 10 minute timer is up\"\n      note \"#{STRIPS.capitalize} need to rest for 10 minutes before taking an image.\"\n      note \"In the meantime, make sure you have access to the #{PHOTOCOPIER}.\"\n      warning \"\u003ch2\u003e Signal can develop more slowly if the room is humid. After the 10-min timer ends, you should see at least two lines on each strip. \u003c/h2\u003e\" \n      warning \"If your signal is hard to see by eyes, give it another 5 minutes before clicking OK.\"\n    end\n\n    # show do\n    #   title \"IMPORTANT NOTE TO JUSTIN\"\n    #   warning \"This protocol should be broken into two since technician will be moving from one computer to the next.\"\n    #   note \"This really depends on whether we want to use the laptop ONLY for detection purposes (I think we should)\"\n    # end\n\n    myops.each do |op|\n      op.temporary[:filename] = \"#{op.output(OUTPUT).item.id}_#{op.temporary[:output_kit]}#{op.temporary[:output_sample]}\"\n    end\n\n    gops.each do |unit, ops|\n      ops.each do |op|\n        labels = op.output_refs(OUTPUT)\n        show do\n          title \"Scan #{STRIPS} \u003cb\u003e#{labels[0]} to #{labels[-1]}\u003c/b\u003e\"\n          check \"Open #{PHOTOCOPIER}\"\n          check \"Place #{STRIPS} face down in the #{PHOTOCOPIER}\"\n          check \"Align colored part of #{STRIPS} with the colored tape on the #{PHOTOCOPIER}\"\n          check \"Close the #{PHOTOCOPIER}\"\n        end\n\n        image_confirmed = false\n\n        5.times.each do |this_try|\n          unless image_confirmed\n            show do\n              title \"Scan the image\"\n              check \"Press the \u003cb\u003e\\\"AUTO SCAN\\\"\u003c/b\u003e button firmly on the side of the #{PHOTOCOPIER} and hold for a few seonds. A new window should pop up, with a green bar indicating scanning in progress.\"\n              check \"Wait for #{PHOTOCOPIER} to complete. This takes about 1 minute.\"\n            end\n\n            rename = \"\u003cmd-button ng-disabled=\\\"true\\\" class=\\\"md-raised\\\"\u003erename\u003c/md-button\u003e\"\n            copy = \"\u003cmd-button ng-disabled=\\\"true\\\" class=\\\"md-raised\\\"\u003ecopy\u003c/md-button\u003e\"\n            paste = \"\u003cmd-button ng-disabled=\\\"true\\\" class=\\\"md-raised\\\"\u003epaste\u003c/md-button\u003e\"\n\n            show do\n              title \"Copy image file name #{op.temporary[:filename].bold}\"\n              note \"1. highlight the file name: #{op.temporary[:filename].bold}\"\n              note \"2. then click #{copy}\"\n              title \"Then rename the new image file to #{op.temporary[:filename].bold}\"\n              note \"1. a new file should appear on the desktop. Minimize this browser and find the new file.\"\n              note \"2. right-click and then click #{rename}\"\n              note \"3. right-click and click #{paste} to rename file.\"\n            end\n\n            show_with_expected_uploads(op, op.temporary[:filename], SCANNED_IMAGE_UPLOAD_KEY) do\n              title \"Upload file \u003cb\u003e#{op.temporary[:filename]}\u003c/b\u003e\"\n              note \"Click the button below to upload file \u003cb\u003e#{op.temporary[:filename]}\u003c/b\u003e\"\n              note \"Navigate to the desktop. Click on file \u003cb\u003e#{op.temporary[:filename]}\u003c/b\u003e\"\n            end\n\n            confirmed = show do\n              title \"Confirm image labels say #{op.temporary[:label_string].bold}\"\n              select [ \"yes\", \"no\"], var: \"confirmed\", label: \"Do the image labels and your image match?\", default: 0\n              img = display_strip_panel(*op.output_tokens(OUTPUT), COLORS).g\n              img.boundy = 50\n              note display_svg(img, 0.75)\n              raw display_upload(op.temporary[SCANNED_IMAGE_UPLOAD_KEY])\n            end\n\n            image_confirmed = confirmed[:confirmed] == \"yes\"\n\n            unless image_confirmed\n              show do\n                title \"You selected that the images don't match!\"\n                note \"You will now be asked to scan and upload the strip again.\"\n              end\n            end\n          end\n        end\n\n        op.associate(SCANNED_IMAGE_UPLOAD_ID_KEY, op.temporary[SCANNED_IMAGE_UPLOAD_KEY].id)\n        op.output(OUTPUT).item.associate(SCANNED_IMAGE_UPLOAD_ID_KEY, op.temporary[SCANNED_IMAGE_UPLOAD_KEY].id)\n      end\n    end\n  end\n  \n  def run_image_analysis ops\n    image_result = nil\n    warning_msg = nil\n    5.times.each do |i|\n        if image_result.nil?\n            result = show do\n                title \"Run \u003cb\u003eOLA Image Processing\u003c/b\u003e\"\n                warning warning_msg unless warning_msg.nil?\n                note \"Find the icon on the desktop labeled \\\"OLA IP\\\"\"\n                image \"Actions/OLA/ola_ip_logo.png\" \n                note \"Double click the icon.\"\n                note \"#{ops.first.temporary[SCANNED_IMAGE_UPLOAD_KEY].name}\"\n                joined_file_names = ops.map { |op| op.temporary[SCANNED_IMAGE_UPLOAD_KEY][:name] }.join(', ')\n                note \"Copy-and-paste the following into the text box: \u003cb\u003e#{joined_file_names}\u003c/b\u003e\"\n                note \"Click \\\"PROCESS\\\"\"\n                note \"Return here and press \\\"CONTROL+V\\\" to paste the text to the field below.\"\n                get \"text\", var: :image_analysis_result, label: \"Press CONTROL+V here to paste\", default: \"\"\n            end\n            \n            image_result = result[:image_analysis_result]\n            if image_result == \"\"\n                image_result = nil\n                warning_msg = \"Result was empty! Try again!\"\n            end\n            \n            if i \u003e= 1\n                image_result = \"[]\"\n            end\n        end\n    end\n    \n    if image_result.nil?\n        ops.each do |op|\n            op.error(:image_result_failed, \"Image processing has failed.\") \n        end\n    end\n    \n    ops.each do |op|\n        op.associate(:image_processing_result, image_result)\n        op.plan.associate(:image_processing_result, image_result)\n    end\n    \n    show do\n        title \"Result has been sent!\"\n        note \"You image processing result has been saved and emailed to the supervisor. Congrats! Below is the message that was sent.\"\n        user = User.find_by_name(\"Nuttada Panpradist\")\n    \n        tech = get_technician_name(self.jid)\n        tech = User.find(66) unless tech.is_a?(User)\n        kits = ops.map { |op| op.temporary[:input_kit] }\n        samples = ops.map { |op| op.temporary[:input_sample] }\n        subject = \"Image processing result for #{tech.name}\"\n        message = \"\u003cp\u003eTech: #{tech.name} (#{tech.id})\u003c/p\u003e \" \\\n                \"\u003cp\u003eOperations: #{ops.map { |op| op.id }}\u003c/p\u003e \" \\\n                \"\u003cp\u003eJob: #{self.jid}\u003c/p\u003e\" \\\n                \"\u003cp\u003eKits: #{kits}\u003c/p\u003e \" \\\n                \"\u003cp\u003eSamples: #{samples}\u003c/p\u003e \" \\\n                \"\u003cp\u003e#{image_result}\u003c/p\u003e\"\n        note \"\u003cb\u003e#{subject}\u003c/b\u003e\"\n        note message\n        user.send_email(subject, message) unless debug\n    end\n  end\n \n# def cleanup myops\n#   show do\n#     title \"Cleanup\"\n#\n#     check \"After imaging #{pluralizer(\"strip\", myops.length * MUTATIONS.length)}, you may discard strips and tubes \" \\\n#             \"into the biohazard waste.\"\n#     check \"Change gloves.\"\n#   end\n#   #   clean_area AREA\n# end\n#\n\n  def cleanup myops\n    def discard_refs_from_op(op)\n      refs = []\n      refs.push(\"Diluent A \" + op.ref(\"diluent A\").bold)\n      refs.push(\"Gold Mix \" + op.ref(\"gold\").bold)\n      refs.push(\"Stop Mix \" + op.ref(\"stop\").bold)\n      unless KIT_NAME == \"uw kit\"\n        refs.push(\"Samples #{op.input_refs(INPUT).join(', ').bold}\")\n      end\n      refs\n    end\n\n    all_refs = myops.map {|op| discard_refs_from_op(op)}.flatten.uniq\n\n    show do\n      title \"Throw items into the #{WASTE}\"\n\n      #warning \"Do not throw away the #{STRIPS}\"\n      note \"Throw the following items into the #{WASTE} in the #{AREA.bold} area:\"\n      t = Table.new\n      t.add_column(\"Item to throw away\", all_refs)\n      table t\n    end\n    # clean_area AREA\n  end\n\n  def filename(op)\n    item_id = op.output(OUTPUT).item.id\n    labels = op.output_refs(OUTPUT)\n    \"#{labels[0]}_#{labels[-1]}_#{item_id}\"\n  end\n\n  def conclusion myops\n    #   if KIT_NAME == \"uw kit\"\n    #      show do\n    #         title \"Please return ligation products\"\n    #         note \"Please return the following to \u003cb\u003eM20 \\\"STORE USED 1C - 21C\\\"\u003c/b\u003e\"\n    #         myops.each do |op|\n    #             check \"tubes #{op.temporary[:label_string].bold}\" \n    #         end\n    #         image \"Actions/OLA/map_Klavins.svg\"\n    #      end\n    #   end\n    show do\n      title \"Thank you!\"\n      warning \"\u003ch2\u003eYou must click #{\"OK\".quote.bold} to complete the protocol\u003c/h2\u003e\"\n      note \"Please continue on to the next protocol. You will be ask to make visual calls for the detection strips.\"\n    end\n  end\n\nend","precondition":"def precondition(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 12.5, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[],"object_types":[],"operation_type":{"name":"OLASimple Tests","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[],"protocol":"# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\nneeds \"OLASimple/OLALib\"\nclass Protocol\ninclude OLALib\n  def main\n\n    operations.retrieve.make\n    \n    tin  = operations.io_table \"input\"\n    tout = operations.io_table \"output\"\n    u = Upload.find(21404)\n    show do \n        # raw display_upload(Upload.find(21404))\n        # note \"#{u.name}\"\n      title \"Input Table\"\n      table tin.all.render\n    end\n    \n    show do\n        warning \"\u003ch1\u003eA really big warning!\u003c/h1\u003e\" \n    end\n    \n    show do\n        raw display_strip_section(u, 0, 6, \"50%\")\n    end\n    \n    show do\n        raw display_strip_section(u, 1, 6, \"50%\")\n    end\n    \n    show do \n      title \"Output Table\"\n      table tout.all.render\n    end\n    \n    operations.store\n    \n    return {}\n    \n  end\n  \n  def display_strip_section(upload, display_section, num_sections, size)\n      p = Proc.new do\n          x = 100.0/num_sections\n          styles = []\n          num_sections.times.each do |section|\n              x1 = 100 - (x * (section+1)).to_i\n              x2 = (x*(section)).to_i\n              styles.push(\".clipimg#{section} { clip-path: inset(0% #{x1}% 0% #{x2}%); }\")\n          end\n          style = \"\u003chead\u003e\u003cstyle\u003e#{styles.join(' ')}\u003c/style\u003e\u003c/head\u003e\"\n          note style\n          note \"#{styles}\"\n          note \"\u003cimg class=\\\"clipimg#{display_section}\\\" src=\\\"#{upload.expiring_url}\\\" width=\\\"#{size}\\\"\u003e\u003c/img\u003e\" \n      end\n      ShowBlock.new(self).run(\u0026p)\n  end\n  \nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":72,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","field_types":[{"id":2750,"parent_id":72,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2751,"parent_id":72,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":768,"name":"OLA Detection Strips","description":"OLA Detection STrips","min":0,"max":1,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2018-03-29T09:10:01.000-07:00","updated_at":"2018-03-29T09:10:01.000-07:00","unit":"strip","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":1,"columns":12,"sample_type_name":null}],"operation_type":{"name":"OLASimple Visual Call","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Detection Strip","sample_types":["OLASimple Sample"],"object_types":["OLA Detection Strips"],"part":false,"array":false,"routing":"DS","preferred_operation_type_id":1253,"preferred_field_type_id":12473,"choices":null}],"protocol":"##########################################\n#\n#\n# OLASimple Visual Call\n# author: Justin Vrana\n# date: March 2018\n#\n#\n##########################################\n\nneeds \"OLASimple/OLAConstants\"\nneeds \"OLASimple/OLALib\"\nneeds \"OLASimple/OLAGraphics\"\n\nclass Protocol\n  include OLAConstants\n  include OLALib\n  include OLAGraphics\n\n  ##########################################\n  # INPUT/OUTPUT\n  ##########################################\n\n  INPUT = \"Detection Strip\"\n\n  ##########################################\n  # TERMINOLOGY\n  ##########################################\n\n  AREA = POST_PCR\n\n  ##########################################\n  # Protocol Specifics\n  ##########################################\n\n  PACK_HASH = ANALYSIS_UNIT\n  MUTATIONS_LABEL = PACK_HASH[\"Mutation Labels\"]\n  PREV_COMPONENTS = PACK_HASH[\"Components\"][\"strips\"]\n  PREV_UNIT = \"D\"\n\n  ##########################################\n  # ##\n  # Input Restrictions:\n  # Input needs a kit, unit, components,\n  # and sample data associations to work properly\n  ##########################################\n\n  POSITIVE = \"positive\"\n  NEGATIVE = \"negative\"\n  DEBUG_UPLOAD_ID = 21840\n  def main\n    save_user operations\n\n    band_choices = {\n        \"M\": {bands: [mut_band], description: \"-CTRL -WT +MUT\"},\n        \"N\": {bands: [control_band, wt_band, mut_band], description: \"+CTRL +WT +MUT\"},\n        \"O\": {bands: [control_band, mut_band], description: \"+CTRL -WT +MUT\"},\n        \"P\": {bands: [control_band, wt_band], description: \"+CTRL +WT -MUT\"},\n        \"Q\": {bands: [control_band], description: \"+CTRL -WT -MUT\"},\n        \"R\": {bands: [], description: \"-CTRL -WT -MUT\"}\n    }\n\n    categories = {\n        \"M\": POSITIVE,\n        \"N\": POSITIVE,\n        \"O\": POSITIVE,\n        \"P\": NEGATIVE,\n        \"Q\": \"ligation failure\",\n        \"R\": \"detection failure\"\n    }\n    operations.running.retrieve interactive: false\n    debug_setup(operations)\n\n    if debug\n      operations.each do |op|\n        op.input(INPUT).item.associate(SCANNED_IMAGE_UPLOAD_ID_KEY, DEBUG_UPLOAD_ID)\n      end\n    end\n\n    operations.running.each do |op|\n      image_upload_id = op.input(INPUT).item.get(SCANNED_IMAGE_UPLOAD_ID_KEY)\n      if image_upload_id.nil?\n        op.error(:no_image_attached, \"No image was found for item #{op.input(INPUT).item.id} (#{op.input_refs(INPUT)})\")\n      end\n    end\n\n    if operations.errored.any?\n      show do\n        title \"Some images were not found.\"\n        note \"Images were not found for the following:\"\n        operations.errored.each do |op|\n          bullet \"Strips #{op.input(INPUT).item} (#{op.input_refs(INPUT)})\"\n        end\n        note \"Contact #{SUPERVISOR}.\"\n      end\n    end\n\n    if operations.running.empty?\n      show do\n        title \"There are no operations left running\"\n        note \"Contact #{SUPERVISOR}.\"\n      end\n      return {}\n    end\n\n    save_temporary_input_values(operations, INPUT)\n    introduction operations.running\n    make_calls operations.running, band_choices, categories\n    show_calls operations.running, band_choices\n    show_summary operations.running\n    cleanup operations.running, AREA\n    return {}\n  end # MAIN\n\n  def save_user ops\n    ops.each do |op|\n      username = get_technician_name(self.jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def debug_setup ops\n    if debug\n      ops.each do |op|\n        kit_num = rand(1..60)\n        INPUT\n        PREV_UNIT\n        PREV_COMPONENTS\n        make_alias(op.input(INPUT).item, kit_num, PREV_UNIT, PREV_COMPONENTS, 1)\n        # op.input(PACK).item.associate(KIT_KEY, kit_num)\n      end\n\n      if ops.length \u003e= 2\n        i = ops[-1].input(INPUT).item\n        make_alias(i, i.get(KIT_KEY), i.get(UNIT_KEY), PREV_COMPONENTS, i.get(SAMPLE_KEY))\n\n        # kit_num = ops[-1].input(PACK).item.get(KIT_KEY)\n        # ops[0].input(PACK).item.associate(KIT_KEY, kit_num)\n      end\n    end\n  end\n\n\n  def introduction myops\n    username = get_technician_name(self.jid).color(\"darkblue\")\n    show do\n      title \"Welcome #{username} to the OLASimple Visual Call protocol\"\n\n      note \"In this protocol, you will be ask to look at and evaluate images of detection strips.\"\n      note \"Each strip may have three bands:\"\n      bullet \"Top band  corresponds to a flow control (C)\"\n      bullet \"Middle band corresponds to the wild-type genotype at that codon (W)\"\n      bullet \"Bottom band corresponds to the mutant genotype at that codon (M)\"\n      note \"You will be asked to compare your detection trips to some images on the screen\"\n      note \"Click \\\"OK\\\" in the upper right to continue.\"\n    end\n\n    show do\n      title \"You will be making visual calls on these #{\"scanned images\".quote.bold}\"\n      warning \"Do not make calls based on your actual strips. This is because:\"\n      note \"1) Assay is time-sensitive; false signal can develop over time on the actual strips after you scan the strips.\"\n      note \"2) Doctors will confirm your visual calls based on the scanned images, not the actual strips.\"\n      # note \"You may have noticed that we are not using notebooks for any of the procedures. This is because \" \\\n      #       \" #{AQUARIUM.bold} tracks every step in the protocol providing a detailed record for all of the protocols \" \\\n      #        \" allowing researchers to go back and look at the information.\"\n\n    end\n  end\n\n    \n  def make_calls(myops, band_choices, category_hash)\n    myops.each.with_index do |op|\n\n      this_kit = op.temporary[:input_kit]\n      this_unit = op.temporary[:input_unit]\n      this_sample = op.temporary[:input_sample]\n      #   show do\n      #     refs = op.input_refs(INPUT)\n      #     from = refs[0]\n      #     to = refs[-1]\n      #     title \"Place the #{STRIP} panel in front of you\"\n      #     note \"Labels should read #{from.bold} to #{to.bold}.\"\n      #     note display_svg(display_strip_panel(*op.input_tokens(INPUT), COLORS))\n      #   end\n\n      PREV_COMPONENTS.each.with_index do |this_component, i|\n        alias_label = op.input_refs(INPUT)[i]\n        colorclass = COLORS[i] + \"strip\"\n        strip_label = self.tube_label(this_kit, this_unit, this_component, this_sample)\n        strip = make_strip(strip_label, colorclass).scale!(0.5)\n        question_mark = label(\"?\", \"font-size\".to_sym =\u003e 100)\n        question_mark.align('center-center')\n        question_mark.align_with(strip, 'center-top')\n        question_mark.translate!(0, 75)\n\n        index = 0\n        grid = SVGGrid.new(band_choices.length, 1, 100, 10)\n        band_choices.each do |choice, band_hash|\n          this_strip = strip.inst.scale(1.0)\n          \n          reading_window = SVGElement.new(boundy: 50)\n          \n          # add strip\n          reading_window.add_child(this_strip)\n          \n          # add the bands\n          band_hash[:bands].each do |band|\n            reading_window.add_child(band)\n          end\n          \n          # crop label and bottom part of strip\n          c = reading_window.group_children\n          c.translate!(0, -40)\n          whitebox = SVGElement.new(boundx: 110, boundy: 400)\n          whitebox.add_child(\"\u003crect x=\\\"-1\\\" y=\\\"95\\\" width=\\\"102\\\" height=\\\"400\\\" fill=\\\"white\\\" /\u003e\")\n          reading_window.add_child(whitebox)\n          \n          # add label\n          strip_choice = label(choice, \"font-size\".to_sym =\u003e 40)\n          strip_choice.align!('center-top')\n          strip_choice.align_with(whitebox, 'center-top')\n          strip_choice.translate!(-10, 110)\n          reading_window.add_child(strip_choice)\n          \n          grid.add(reading_window, index, 0)\n          index += 1\n        end\n        grid.scale!(0.75)\n        img = SVGElement.new(children: [grid], boundx: 500, boundy: 250).scale(0.8)\n\n        upload = Upload.find(op.input(INPUT).item.get(SCANNED_IMAGE_UPLOAD_ID_KEY).to_i)\n        choice = show do\n          title \"Compare #{STRIP} #{alias_label} with the images below.\"\n          note \"There are three possible pink/red #{BANDS} for the #{STRIP}.\"\n          note \"Select the choice below that most resembles #{STRIP} #{alias_label}\"\n          warning \"\u003ch2\u003eDo not make calls based on the actual strips but based on the scanned images.\u003c/h2\u003e\"\n          warning \"\u003ch2\u003eAfter you click OK, you cannot change your call.\"\n          note \"Signal of all the lines does not have to be equally strong. Flow control signal is always the strongest.\"\n          select band_choices.keys.map {|k| k.to_s}, var: :choice, label: \"Choose:\", default: 0\n          raw display_strip_section(upload, i, PREV_COMPONENTS.length, \"25%\")\n          note display_svg(img)\n        end\n\n        if debug\n          choice[:choice] = band_choices.keys.sample.to_s\n        end\n\n        the_choice = choice[:choice]\n        op.input(INPUT).item.associate(make_call_key(alias_label), the_choice)\n        # op.input(INPUT).item.associate(make_call_description_key(alias_label), band_choices[the_choice.to_sym][:description])\n        op.input(INPUT).item.associate(make_call_category_key(alias_label), category_hash[the_choice.to_sym])\n        op.associate(make_call_key(alias_label), the_choice)\n        # op.associate(make_call_description_key(alias_label), band_choices[the_choice.to_sym][:description])\n        op.associate(make_call_category_key(alias_label), category_hash[the_choice.to_sym])\n      end\n    end\n  end\n\n  def make_call_key alias_label\n    \"#{alias_label}_call\".to_sym\n  end\n\n  def make_call_description_key alias_label\n    \"#{alias_label}_call_description\".to_sym\n  end\n\n  def make_call_category_key alias_label\n    \"#{alias_label}_call_category\".to_sym\n  end\n\n\n  def show_calls myops, band_choices\n    myops.each do |op|\n      kit_summary = {}\n\n      this_kit = op.temporary[:input_kit]\n      this_item = op.input(INPUT).item\n      this_unit = op.temporary[:input_unit]\n      this_sample = op.temporary[:input_sample]\n\n      grid = SVGGrid.new(MUTATIONS_LABEL.length, 1, 90, 10)\n      categories = []\n      PREV_COMPONENTS.each.with_index do |this_component, i|\n        alias_label = op.input_refs(INPUT)[i]\n        strip_label = self.tube_label(this_kit, this_unit, this_component, this_sample)\n        strip = make_strip(strip_label, COLORS[i] + \"strip\")\n        band_choice = this_item.get(make_call_key(alias_label))\n        codon_label = label(MUTATIONS_LABEL[i], \"font-size\".to_sym =\u003e 25)\n        codon_label.align_with(strip, 'center-bottom')\n        codon_label.align!('center-top').translate!(0, 30)\n        category = this_item.get(make_call_category_key(alias_label))\n        kit_summary[MUTATIONS_LABEL[i]] = {:alias =\u003e alias_label, :category =\u003e category.to_s, :call =\u003e band_choice.to_s}\n        tokens = category.split(' ')\n        tokens.push(\"\") if tokens.length == 1\n        category_label = two_labels(*tokens)\n        category_label.scale!(0.75)\n        category_label.align!('center-top')\n        category_label.align_with(codon_label, 'center-bottom')\n        category_label.translate!(0, 10)\n        bands = band_choices[band_choice.to_sym][:bands]\n        grid.add(strip, i, 0)\n        grid.add(codon_label, i, 0)\n        grid.add(category_label, i, 0)\n        bands.each do |band|\n          grid.add(band, i, 0)\n        end\n      end\n\n      op.associate(:results, kit_summary)\n      op.input(INPUT).item.associate(:results, kit_summary)\n      op.temporary[:results] = kit_summary\n\n      img = SVGElement.new(children: [grid], boundx: 600, boundy: 350)\n      img.translate!(15)\n      show do\n        refs = op.input_refs(INPUT)\n        title \"Here is the summary of your results for \u003cb\u003e#{refs[0]}-#{refs[-1]}\u003c/b\u003e\"\n        note display_svg(img)\n      end\n    end\n  end\n\n  def show_summary ops\n    ops.each do |op|\n      hits = op.temporary[:results].select {|k, v| v == POSITIVE}\n    end\n    show do\n      title \"Sample summary\"\n      note \"You analyzed #{ops.length} #{\"kit\".pluralize(ops.length)}. Below is the summarized data.\"\n\n      results_hash = {}\n      kits = ops.map {|op| op.input(INPUT).item.get(KIT_KEY)}\n      samples = ops.map {|op| op.input(INPUT).item.get(SAMPLE_KEY)}\n      t = Table.new\n      t.add_column(\"Kit\", kits)\n      t.add_column(\"Sample\", samples)\n      MUTATIONS_LABEL.each do |label|\n        col = ops.map {|op| op.temporary[:results][label][:category]}\n        t.add_column(label, col)\n        results_hash[label] = col\n      end\n      results_hash[\"kits\"] = kits\n      results_hash[\"samples\"] = samples\n      table t\n\n\n      if KIT_NAME == \"uw kit\"\n        user = User.find_by_name(\"Nuttada Panpradist\")\n        tech = get_technician_name(self.jid)\n        tech = User.find(66) unless tech.is_a?(User)\n        kits = ops.map {|op| op.temporary[:input_kit]}\n        samples = ops.map {|op| op.temporary[:input_sample]}\n        subject = \"Visual call result for #{tech.name}\"\n        \n              message = \"\u003cp\u003eTech: #{tech.name} (#{tech.id})\u003c/p\u003e \" \\\n                \"\u003cp\u003eOperations: #{ops.map { |op| op.id } }\u003c/p\u003e \" \\\n                \"\u003cp\u003eJob: #{self.jid}\u003c/p\u003e\" \\\n                \"\u003cp\u003eKits: #{kits}\u003c/p\u003e \" \\\n                \"\u003cp\u003eSamples: #{samples}\u003c/p\u003e \" \\\n                \"\u003cp\u003eResults: #{results_hash}\u003c/p\u003e\"\n        user.send_email(subject, message) unless debug\n      end\n    end\n  end\n\n\n  def cleanup myops, area\n    show do\n      title \"Cleanup\"\n      if KIT_NAME == \"uw kit\"\n        check \"Return to post-PCR space.\"\n        image \"Actions/OLA/map_Klavins.svg\" if KIT_NAME == \"uw kit\"\n      else\n        check \"You may now discard strips and tubes into the trash.\"\n      end\n    end\n\n    show do\n      disinfectant = \"10% bleach\"\n      title \"Wipe down #{AREA.bold} with #{disinfectant.bold}.\"\n      note \"Now you will wipe down your #{BENCH} and equipment with #{disinfectant.bold}.\"\n      check \"Spray #{disinfectant.bold} onto a #{WIPE} and clean off pipettes and pipette tip boxes.\"\n      check \"Spray a small amount of #{disinfectant.bold} on the bench surface. Clean bench with #{WIPE}.\"\n      # check \"Spray some #{disinfectant.bold} on a #{WIPE}, gently wipe down keyboard and mouse of this computer/tablet.\"\n      warning \"Do not spray #{disinfectant.bold} onto tablet or computer!\"\n      check \"Finally, spray outside of gloves with #{disinfectant.bold}.\"\n    end\n\n    show do\n      disinfectant = \"70% ethanol\"\n      title \"Wipe down #{AREA.bold} with #{disinfectant.bold}.\"\n      note \"Now you will wipe down your #{BENCH} and equipment with #{disinfectant.bold}.\"\n      check \"Spray #{disinfectant.bold} onto a #{WIPE} and clean off pipettes and pipette tip boxes.\"\n      check \"Spray a small amount of #{disinfectant.bold} on the bench surface. Clean bench with #{WIPE}.\"\n    #   check \"Spray a #{\"small\".bold} amount of #{disinfectant.bold} on a #{WIPE}. Gently wipe down keyboard and mouse of this computer/tablet.\"\n      warning \"Do not spray #{disinfectant.bold} onto tablet or computer!\"\n      check \"Finally, dispose of gloves in garbage bin.\"\n    end\n  end\n  \n  def apply_clipping(section, num_sections)\n      x = 100.0/num_sections\n      x1 = 100 - (x * section).to_i\n      x2 = (x*(section-1)).to_i\n      clipping_style = \".clipimg { clip-path: inset(0% #{x1}% 0% #{x2}%); }\"\n      \"\u003cstyle\u003e#{clipping_style}\u003c/style\u003e\"\n  end\n\n  def conclusion myops\n    show do\n      title \"Thank you!\"\n      warning \"\u003ch2\u003eYou must click #{\"OK\".quote.bold} to complete the protocol\u003c/h2\u003e\"\n      note \"Thanks for your hard work!\"\n      note \"All of your selections and steps in this protocol were tracked and saved using #{AQUARIUM.bold}. \" \\\n            \" #{AQUARIUM} uses the information from the computer/tablet and stores all of the steps and information \" \\\n            \" elsewhere on a server. We have a detailed record of each and every step for all protocols. \"\n      # note \"You may have noticed that we are not using notebooks for any of the procedures. This is because \" \\\n      #       \" #{AQUARIUM.bold} tracks every step in the protocol providing a detailed record for all of the protocols \" \\\n      #        \" allowing researchers to go back and look at the information.\"\n\n    end\n  end\n\nend","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 3.5, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}}]}